@charset "UTF-8";
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
@-webkit-keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }
@keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@-webkit-keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: 1; } }

@keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: 1; } }

@-webkit-keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 1; }
  to {
    opacity: 0; } }

@keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 1; }
  to {
    opacity: 0; } }

.mdc-ripple-surface--test-edge-var-bug {
  --mdc-ripple-surface-test-edge-var: 1px solid #000;
  visibility: hidden; }
  .mdc-ripple-surface--test-edge-var-bug::before {
    border: var(--mdc-ripple-surface-test-edge-var); }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
@-webkit-keyframes mdc-checkbox-unchecked-checked-checkmark-path {
  0%,
  50% {
    stroke-dashoffset: 29.78334; }
  50% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1); }
  100% {
    stroke-dashoffset: 0; } }
@keyframes mdc-checkbox-unchecked-checked-checkmark-path {
  0%,
  50% {
    stroke-dashoffset: 29.78334; }
  50% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1); }
  100% {
    stroke-dashoffset: 0; } }

@-webkit-keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {
  0%,
  68.2% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  68.2% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
            animation-timing-function: cubic-bezier(0, 0, 0, 1); }
  100% {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {
  0%,
  68.2% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  68.2% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
            animation-timing-function: cubic-bezier(0, 0, 0, 1); }
  100% {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

@-webkit-keyframes mdc-checkbox-checked-unchecked-checkmark-path {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
    opacity: 1;
    stroke-dashoffset: 0; }
  to {
    opacity: 0;
    stroke-dashoffset: -29.78334; } }

@keyframes mdc-checkbox-checked-unchecked-checkmark-path {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
    opacity: 1;
    stroke-dashoffset: 0; }
  to {
    opacity: 0;
    stroke-dashoffset: -29.78334; } }

@-webkit-keyframes mdc-checkbox-checked-indeterminate-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; } }

@keyframes mdc-checkbox-checked-indeterminate-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; } }

@-webkit-keyframes mdc-checkbox-indeterminate-checked-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
    opacity: 1; } }

@keyframes mdc-checkbox-indeterminate-checked-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
    opacity: 1; } }

@-webkit-keyframes mdc-checkbox-checked-indeterminate-mixedmark {
  from {
    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;
            animation-timing-function: mdc-animation-deceleration-curve-timing-function;
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; } }

@keyframes mdc-checkbox-checked-indeterminate-mixedmark {
  from {
    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;
            animation-timing-function: mdc-animation-deceleration-curve-timing-function;
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; } }

@-webkit-keyframes mdc-checkbox-indeterminate-checked-mixedmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(315deg);
            transform: rotate(315deg);
    opacity: 0; } }

@keyframes mdc-checkbox-indeterminate-checked-mixedmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(315deg);
            transform: rotate(315deg);
    opacity: 0; } }

@-webkit-keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {
  0% {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    -webkit-transform: scaleX(1);
            transform: scaleX(1);
    opacity: 1; }
  32.8%,
  100% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0);
    opacity: 0; } }

@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {
  0% {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    -webkit-transform: scaleX(1);
            transform: scaleX(1);
    opacity: 1; }
  32.8%,
  100% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0);
    opacity: 0; } }

.mdc-checkbox {
  display: inline-block;
  position: relative;
  -webkit-box-flex: 0;
      -ms-flex: 0 0 18px;
          flex: 0 0 18px;
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  width: 18px;
  height: 18px;
  padding: 11px;
  line-height: 0;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: bottom;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }
  .mdc-checkbox .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
    border-color: rgba(0, 0, 0, 0.26); }
  .mdc-checkbox .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
  .mdc-checkbox .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background {
    border-color: transparent;
    background-color: rgba(0, 0, 0, 0.26); }
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
    border-color: rgba(255, 255, 255, 0.3); }
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background {
    background-color: rgba(255, 255, 255, 0.3); }
  .mdc-checkbox .mdc-checkbox__checkmark__path {
    stroke: white !important; }
  .mdc-checkbox .mdc-checkbox__mixedmark {
    background-color: white; }
  .mdc-checkbox .mdc-checkbox__background::before {
    /* @alternate */
    background-color: #ff4081; }
    @supports not (-ms-ime-align: auto) {
      .mdc-checkbox .mdc-checkbox__background::before {
        background-color: var(--mdc-theme-secondary, #ff4081); } }
  .mdc-checkbox::before, .mdc-checkbox::after {
    position: absolute;
    -webkit-transition: opacity 250ms linear;
    transition: opacity 250ms linear;
    border-radius: 50%;
    pointer-events: none;
    content: ""; }
  .mdc-checkbox::before, .mdc-checkbox::after {
    background-color: rgba(255, 64, 129, 0.14);
    opacity: 0; }
    @supports (background-color: color(green a(10%))) {
      .mdc-checkbox::before, .mdc-checkbox::after {
        background-color: color(var(--mdc-theme-secondary, #ff4081) a(14%)); } }
  .mdc-checkbox:not(.mdc-ripple-upgraded):hover::before, .mdc-checkbox:not(.mdc-ripple-upgraded):focus::before, .mdc-checkbox:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .mdc-checkbox.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .mdc-checkbox.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .mdc-checkbox.mdc-ripple-upgraded::after {
    opacity: 0; }
  .mdc-checkbox.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .mdc-checkbox::before, .mdc-checkbox::after {
    top: calc(50% - 50%);
    left: calc(50% - 50%);
    width: 100%;
    height: 100%; }
  .mdc-checkbox.mdc-ripple-upgraded::before {
    top: calc(50% - 50%);
    left: calc(50% - 50%);
    width: 100%;
    height: 100%;
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .mdc-checkbox.mdc-ripple-upgraded--unbounded::before {
    top: var(--mdc-ripple-top, calc(50% - 25%));
    left: var(--mdc-ripple-left, calc(50% - 25%));
    width: var(--mdc-ripple-fg-size, 50%);
    height: var(--mdc-ripple-fg-size, 50%);
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .mdc-checkbox.mdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    width: var(--mdc-ripple-fg-size, 50%);
    height: var(--mdc-ripple-fg-size, 50%);
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .mdc-checkbox.mdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; }
  .mdc-checkbox .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
  .mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }

@-webkit-keyframes mdc-checkbox-fade-in-background-0 {
  0% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); } }

@keyframes mdc-checkbox-fade-in-background-0 {
  0% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); } }

@-webkit-keyframes mdc-checkbox-fade-out-background-0 {
  0%,
  80% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }
  100% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; } }

@keyframes mdc-checkbox-fade-out-background-0 {
  0%,
  80% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }
  100% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; } }
  .mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
    -webkit-animation-name: mdc-checkbox-fade-in-background-0;
            animation-name: mdc-checkbox-fade-in-background-0; }
  .mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
    -webkit-animation-name: mdc-checkbox-fade-out-background-0;
            animation-name: mdc-checkbox-fade-out-background-0; }
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .mdc-checkbox__background {
    border-color: white;
    background-color: transparent; }
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
  .mdc-checkbox--theme-dark .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }

@-webkit-keyframes mdc-checkbox-fade-in-background-1 {
  0% {
    border-color: white;
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); } }

@keyframes mdc-checkbox-fade-in-background-1 {
  0% {
    border-color: white;
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); } }

@-webkit-keyframes mdc-checkbox-fade-out-background-1 {
  0%,
  80% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }
  100% {
    border-color: white;
    background-color: transparent; } }

@keyframes mdc-checkbox-fade-out-background-1 {
  0%,
  80% {
    /* @alternate */
    border-color: #ff4081;
    border-color: var(--mdc-theme-secondary, #ff4081);
    /* @alternate */
    background-color: #ff4081;
    background-color: var(--mdc-theme-secondary, #ff4081); }
  100% {
    border-color: white;
    background-color: transparent; } }
  .mdc-checkbox--theme-dark.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
    -webkit-animation-name: mdc-checkbox-fade-in-background-1;
            animation-name: mdc-checkbox-fade-in-background-1; }
  .mdc-checkbox--theme-dark.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background,
  .mdc-theme--dark .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {
    -webkit-animation-name: mdc-checkbox-fade-out-background-1;
            animation-name: mdc-checkbox-fade-out-background-1; }

.mdc-checkbox--disabled {
  cursor: default;
  pointer-events: none; }

.mdc-checkbox--upgraded .mdc-checkbox__background,
.mdc-checkbox--upgraded .mdc-checkbox__checkmark,
.mdc-checkbox--upgraded .mdc-checkbox__checkmark__path,
.mdc-checkbox--upgraded .mdc-checkbox__mixedmark {
  -webkit-transition: none !important;
  transition: none !important; }

.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background, .mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background {
  -webkit-animation-duration: 180ms;
          animation-duration: 180ms;
  -webkit-animation-timing-function: linear;
          animation-timing-function: linear; }

.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark__path {
  -webkit-animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
          animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
          animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark__path {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
          animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
          animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
          animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark {
  -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
          animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark {
  -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
          animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark {
  -webkit-animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
          animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
  -webkit-transition: none;
  transition: none; }

.mdc-checkbox__background {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  left: 11px;
  right: initial;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  top: 11px;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  width: 45%;
  height: 45%;
  -webkit-transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border: 2px solid currentColor;
  border-radius: 2px;
  background-color: transparent;
  pointer-events: none;
  will-change: background-color, border-color; }
  [dir="rtl"] .mdc-checkbox .mdc-checkbox__background,
  .mdc-checkbox[dir="rtl"] .mdc-checkbox__background {
    left: initial;
    right: 11px; }
  .mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,
  .mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background {
    -webkit-transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1); }

.mdc-checkbox__background::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  -webkit-transform: scale(0, 0);
          transform: scale(0, 0);
  -webkit-transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
  will-change: opacity, transform; }
  .mdc-checkbox__native-control:focus ~ .mdc-checkbox__background::before {
    -webkit-transform: scale(2.75, 2.75);
            transform: scale(2.75, 2.75);
    -webkit-transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    opacity: 0.26; }
  .mdc-ripple-upgraded--unbounded .mdc-checkbox__background::before {
    content: none; }

.mdc-checkbox__native-control {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
  cursor: inherit; }
  .mdc-checkbox__native-control:disabled {
    cursor: default;
    pointer-events: none; }

.mdc-checkbox__checkmark {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  -webkit-transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0; }
  .mdc-checkbox--upgraded .mdc-checkbox__checkmark {
    opacity: 1; }
  .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark {
    -webkit-transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    opacity: 1; }
  .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    -webkit-transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    opacity: 0; }

.mdc-checkbox__checkmark__path {
  -webkit-transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  stroke-width: 3.12px;
  stroke-dashoffset: 29.78334;
  stroke-dasharray: 29.78334; }
  .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path,
  .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path {
    stroke-dashoffset: 0; }

.mdc-checkbox__mixedmark {
  width: 100%;
  height: 2px;
  -webkit-transform: scaleX(0) rotate(0deg);
          transform: scaleX(0) rotate(0deg);
  -webkit-transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0; }
  .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {
    -webkit-transform: scaleX(1) rotate(-45deg);
            transform: scaleX(1) rotate(-45deg); }
  .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {
    -webkit-transform: scaleX(1) rotate(0deg);
            transform: scaleX(1) rotate(0deg);
    opacity: 1; }

/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* stylelint-disable selector-max-type */
.mdc-form-field {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  line-height: 1.25rem;
  text-decoration: inherit;
  text-transform: inherit;
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  vertical-align: middle; }
  .mdc-form-field--theme-dark,
  .mdc-theme--dark .mdc-form-field {
    /* @alternate */
    color: white;
    color: var(--mdc-theme-text-primary-on-dark, white); }
  .mdc-form-field > label {
    -webkit-box-ordinal-group: 1;
        -ms-flex-order: 0;
            order: 0;
    margin-right: auto;
    padding-left: 4px; }
  [dir="rtl"] .mdc-form-field > label, .mdc-form-field[dir="rtl"] > label {
    margin-left: auto;
    padding-right: 4px; }

.mdc-form-field--align-end > label {
  -webkit-box-ordinal-group: 0;
      -ms-flex-order: -1;
          order: -1;
  margin-left: auto;
  padding-right: 4px; }

[dir="rtl"] .mdc-form-field--align-end > label, .mdc-form-field--align-end[dir="rtl"] > label {
  margin-right: auto;
  padding-left: 4px; }

/* stylelint-enable selector-max-type */
@font-face {
  font-family: "MuseoSansCyrl-100";
  src: url("/static/fonts/MuseoSansLight/MuseoSansLight.eot");
  src: url("/static/fonts/MuseoSansLight/MuseoSansLight.eot?#iefix") format("embedded-opentype"), url("/static/fonts/MuseoSansLight/MuseoSansLight.woff2") format("woff2"), url("/static/fonts/MuseoSansLight/MuseoSansLight.woff") format("woff"), url("/static/fonts/MuseoSansLight/MuseoSansLight.ttf") format("ttf"), url("/static/fonts/MuseoSansLight/MuseoSansLight.svg#MuseoSansCyrl-100") format("svg");
  font-style: normal;
  font-weight: 300; }

@font-face {
  font-family: "MuseoSansCyrl-300";
  src: url("/static/fonts/MuseoSansRegular/MuseoSansRegular.eot");
  src: url("/static/fonts/MuseoSansRegular/MuseoSansRegular.eot?#iefix") format("embedded-opentype"), url("/static/fonts/MuseoSansRegular/MuseoSansRegular.woff2") format("woff2"), url("/static/fonts/MuseoSansRegular/MuseoSansRegular.woff") format("woff"), url("/static/fonts/MuseoSansRegular/MuseoSansRegular.ttf") format("ttf"), url("/static/fonts/MuseoSansRegular/MuseoSansRegular.svg#MuseoSansCyrl-300") format("svg");
  font-style: normal;
  font-weight: 300; }

@font-face {
  font-family: "MuseoSansCyrl-500";
  src: url("/static/fonts/MuseoSansMedium/MuseoSansMedium.eot");
  src: url("/static/fonts/MuseoSansMedium/MuseoSansMedium.eot?#iefix") format("embedded-opentype"), url("/static/fonts/MuseoSansMedium/MuseoSansMedium.woff2") format("woff2"), url("/static/fonts/MuseoSansMedium/MuseoSansMedium.woff") format("woff"), url("/static/fonts/MuseoSansMedium/MuseoSansMedium.ttf") format("ttf"), url("/static/fonts/MuseoSansMedium/MuseoSansMedium.svg#MuseoSansCyrl-500") format("svg");
  font-style: normal;
  font-weight: 300; }

@font-face {
  font-family: "MuseoSansCyrl-700";
  src: url("/static/fonts/MuseoSansBold/MuseoSansBold.eot");
  src: url("/static/fonts/MuseoSansBold/MuseoSansBold.eot?#iefix") format("embedded-opentype"), url("/static/fonts/MuseoSansBold/MuseoSansBold.woff2") format("woff2"), url("/static/fonts/MuseoSansBold/MuseoSansBold.woff") format("woff"), url("/static/fonts/MuseoSansBold/MuseoSansBold.ttf") format("ttf"), url("/static/fonts/MuseoSansBold/MuseoSansBold.svg#MuseoSansCyrl-700") format("svg");
  font-style: normal;
  font-weight: demi; }

@font-face {
  font-family: "MuseoSansCyrl-900";
  src: url("/static/fonts/MuseoSansBlack/MuseoSansBlack.eot");
  src: url("/static/fonts/MuseoSansBlack/MuseoSansBlack.eot?#iefix") format("embedded-opentype"), url("/static/fonts/MuseoSansBlack/MuseoSansBlack.woff2") format("woff2"), url("/static/fonts/MuseoSansBlack/MuseoSansBlack.woff") format("woff"), url("/static/fonts/MuseoSansBlack/MuseoSansBlack.ttf") format("ttf"), url("/static/fonts/MuseoSansBlack/MuseoSansBlack.svg#MuseoSansCyrl-900") format("svg");
  font-style: normal;
  font-weight: 700; }

@font-face {
  font-family: "icons";
  src: url("/static/fonts/icons/icons.eot");
  src: url("/static/fonts/icons/icons.eot?#iefix") format("embedded-opentype"), url("/static/fonts/icons/icons.woff2") format("woff2"), url("/static/fonts/icons/icons.woff") format("woff"), url("/static/fonts/icons/icons.ttf") format("ttf"), url("/static/fonts/icons/icons.svg#icons") format("svg");
  font-style: normal;
  font-weight: 300; }

* {
  margin: 0;
  padding: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

html, body {
  height: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-font-smoothing: antialiased; }

h1, h2, h3, h4, h5, h6 {
  font-weight: 500; }

body {
  background-color: white; }

button {
  border-style: none;
  outline: none; }

ul {
  list-style: none; }

li {
  list-style: none; }

a {
  text-decoration: none; }

input {
  outline: none !important;
  -webkit-box-shadow: none !important;
          box-shadow: none !important;
  border-radius: 0px;
  border: none; }

textarea {
  border: none;
  overflow: auto;
  outline: none;
  resize: none;
  -webkit-box-shadow: none;
  box-shadow: none; }

.button {
  font-family: "MuseoSansCyrl-700"; }

.main {
  height: 100%;
  width: 100%;
  -webkit-transition: -webkit-transform 300ms ease-out;
  transition: -webkit-transform 300ms ease-out;
  transition: transform 300ms ease-out;
  transition: transform 300ms ease-out, -webkit-transform 300ms ease-out;
  will-change: transform; }

.clearfix {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0; }

.acid-green {
  color: #00e871; }

.content-area {
  height: 100%;
  margin: 0 auto;
  width: 320px; }
  @media (min-width: 46.875em) and (max-width: 60.615em) {
    .content-area {
      width: 750px; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .content-area {
      width: 970px; } }
  @media (min-width: 73.125em) {
    .content-area {
      width: 1170px; } }

.content-area_flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  padding: 0px 15px 0px 15px; }
  @media (min-width: 46.875em) and (max-width: 60.615em) {
    .content-area_flex {
      width: 750px; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .content-area_flex {
      width: 970px; } }
  @media (min-width: 73.125em) {
    .content-area_flex {
      width: 1170px; } }

.page-content-wrapper {
  margin-bottom: -374px;
  min-height: 100%;
  min-width: 320px; }
  .page-content-wrapper:after {
    content: '';
    display: block;
    height: 600px; }

.page-footer {
  height: 374px;
  min-width: 320px; }

body {
  font-size: 16px;
  color: #1c1c1c;
  font-family: "MuseoSansCyrl-500"; }

.title {
  width: 100%;
  padding: 0px 0px 15px 0px;
  font-size: 1.44rem;
  text-transform: uppercase;
  border-bottom: 3px solid #eee;
  font-family: "MuseoSansCyrl-700"; }
  @media (min-width: 46.875em) {
    .title {
      font-size: 1.728rem; } }

.button {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  line-height: 2.25rem;
  text-decoration: none;
  text-transform: uppercase;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent;
  display: inline-block;
  position: relative;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  min-width: 64px;
  height: 36px;
  padding: 0 16px;
  border: none;
  outline: none;
  text-align: center;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-appearance: none;
  overflow: hidden;
  vertical-align: middle;
  border-radius: 2px;
  font-family: "MuseoSansCyrl-500"; }
  .button::before, .button::after {
    position: absolute;
    -webkit-transition: opacity 250ms linear;
    transition: opacity 250ms linear;
    border-radius: 50%;
    pointer-events: none;
    content: ""; }
  .button::before, .button::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .button.mdc-ripple-upgraded::before {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%;
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .button.mdc-ripple-upgraded--unbounded::before {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .button.mdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .button.mdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .button:active {
    outline: none; }
  .button:hover {
    cursor: pointer; }
  .button::-moz-focus-inner {
    padding: 0;
    border: 0; }
  .button:disabled {
    background-color: transparent;
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
    cursor: default;
    pointer-events: none; }
    .mdc-button--theme-dark .button:disabled,
    .mdc-theme--dark .button:disabled {
      /* @alternate */
      color: rgba(255, 255, 255, 0.5);
      color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)); }
  .button:not(:disabled) {
    background-color: transparent; }
  .button:not(:disabled) {
    /* @alternate */
    color: #3f51b5;
    color: var(--mdc-theme-primary, #3f51b5); }
  .button::before, .button::after {
    background-color: rgba(63, 81, 181, 0.16);
    opacity: 0; }
    @supports (background-color: color(green a(10%))) {
      .button::before, .button::after {
        background-color: color(var(--mdc-theme-primary, #3f51b5) a(16%)); } }
  .button:not(.mdc-ripple-upgraded):hover::before, .button:not(.mdc-ripple-upgraded):focus::before, .button:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .button.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .button.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .button.mdc-ripple-upgraded::after {
    opacity: 0; }
  .button.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .button.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

.button_raised:disabled,
.button_unelevated:disabled {
  background-color: rgba(0, 0, 0, 0.12);
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }
  .mdc-button--theme-dark .button_raised:disabled,
  .mdc-theme--dark .button_raised:disabled, .mdc-button--theme-dark
  .button_unelevated:disabled,
  .mdc-theme--dark
  .button_unelevated:disabled {
    background-color: rgba(255, 255, 255, 0.12);
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }

.button_raised:not(:disabled),
.button_unelevated:not(:disabled) {
  /* @alternate */
  background-color: #3f51b5; }
  @supports not (-ms-ime-align: auto) {
    .button_raised:not(:disabled),
    .button_unelevated:not(:disabled) {
      background-color: var(--mdc-theme-primary, #3f51b5); } }

.button_raised:not(:disabled),
.button_unelevated:not(:disabled) {
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.button_raised::before, .button_raised::after,
.button_unelevated::before,
.button_unelevated::after {
  background-color: rgba(255, 255, 255, 0.32);
  opacity: 0; }
  @supports (background-color: color(green a(10%))) {
    .button_raised::before, .button_raised::after,
    .button_unelevated::before,
    .button_unelevated::after {
      background-color: color(var(--mdc-theme-text-primary-on-primary, white) a(32%)); } }

.button_raised:not(.mdc-ripple-upgraded):hover::before, .button_raised:not(.mdc-ripple-upgraded):focus::before, .button_raised:not(.mdc-ripple-upgraded):active::after,
.button_unelevated:not(.mdc-ripple-upgraded):hover::before,
.button_unelevated:not(.mdc-ripple-upgraded):focus::before,
.button_unelevated:not(.mdc-ripple-upgraded):active::after {
  -webkit-transition-duration: 85ms;
          transition-duration: 85ms;
  opacity: .6; }

.button_raised.mdc-ripple-upgraded--background-focused::before,
.button_unelevated.mdc-ripple-upgraded--background-focused::before {
  opacity: .99999; }

.button_raised.mdc-ripple-upgraded--background-active-fill::before,
.button_unelevated.mdc-ripple-upgraded--background-active-fill::before {
  -webkit-transition-duration: 120ms;
          transition-duration: 120ms;
  opacity: 1; }

.button_raised.mdc-ripple-upgraded::after,
.button_unelevated.mdc-ripple-upgraded::after {
  opacity: 0; }

.button_raised.mdc-ripple-upgraded--foreground-activation::after,
.button_unelevated.mdc-ripple-upgraded--foreground-activation::after {
  -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
          animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }

.button_raised.mdc-ripple-upgraded--foreground-deactivation::after,
.button_unelevated.mdc-ripple-upgraded--foreground-deactivation::after {
  -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
          animation: 83ms mdc-ripple-fg-opacity-out;
  -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
          transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

.button_raised {
  -webkit-box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
          box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  -webkit-transition: -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow; }
  .button_raised:hover, .button_raised:focus {
    -webkit-box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }
  .button_raised:active {
    -webkit-box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }
  .button_raised:disabled {
    -webkit-box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

.button_stroked {
  border-style: solid;
  padding-right: 14px;
  padding-left: 14px;
  border-width: 2px;
  line-height: 32px; }
  .button_stroked:disabled {
    /* @alternate */
    border-color: rgba(0, 0, 0, 0.38);
    border-color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }
    .mdc-button--theme-dark .button_stroked:disabled,
    .mdc-theme--dark .button_stroked:disabled {
      /* @alternate */
      border-color: rgba(255, 255, 255, 0.5);
      border-color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)); }
  .button_stroked.mdc-button--dense {
    line-height: 27px; }
  .button_stroked.mdc-button--compact {
    padding-right: 6px;
    padding-left: 6px; }
  .button_stroked:not(:disabled) {
    /* @alternate */
    border-color: #3f51b5;
    border-color: var(--mdc-theme-primary, #3f51b5); }

.button_compact {
  padding: 0 8px; }

.button_dense {
  height: 32px;
  font-size: .8125rem;
  line-height: 32px; }

.button_round {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 44px;
  width: 44px;
  font-size: 22px;
  color: #1c1c1c;
  border-radius: 22px;
  overflow: hidden;
  cursor: pointer;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent; }
  .button_round::before, .button_round::after {
    position: absolute;
    -webkit-transition: opacity 250ms linear;
    transition: opacity 250ms linear;
    border-radius: 50%;
    pointer-events: none;
    content: ""; }
  .button_round::before, .button_round::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .button_round.mdc-ripple-upgraded::before {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%;
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .button_round.mdc-ripple-upgraded--unbounded::before {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .button_round.mdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .button_round.mdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .button_round:not(:disabled) {
    background-color: transparent; }
  .button_round::before, .button_round::after {
    background-color: rgba(0, 0, 0, 0.1);
    opacity: 0; }
  .button_round:not(.mdc-ripple-upgraded):hover::before, .button_round:not(.mdc-ripple-upgraded):focus::before, .button_round:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .button_round.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .button_round.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .button_round.mdc-ripple-upgraded::after {
    opacity: 0; }
  .button_round.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .button_round.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

.button__icon {
  display: inline-block;
  width: 18px;
  height: 18px;
  margin-right: 8px;
  font-size: 18px;
  line-height: inherit;
  vertical-align: top;
  font-style: normal;
  font-weight: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }
  .button__icon:before {
    display: inline-block;
    height: 20px;
    width: 20px; }

.fab {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  will-change: transform, opacity;
  -webkit-tap-highlight-color: transparent;
  -webkit-box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
          box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  width: 56px;
  height: 56px;
  padding: 0;
  -webkit-transition: opacity 15ms linear 30ms, -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 15ms linear 30ms, -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), opacity 15ms linear 30ms, transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), opacity 15ms linear 30ms, transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1);
  border: none;
  border-radius: 50%;
  fill: currentColor;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  overflow: hidden;
  /* @alternate */
  background-color: #ff4081;
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-secondary, white);
  font-size: 24px; }
  .fab::before, .fab::after {
    position: absolute;
    -webkit-transition: opacity 250ms linear;
    transition: opacity 250ms linear;
    border-radius: 50%;
    pointer-events: none;
    content: ""; }
  .fab::before, .fab::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .fab.mdc-ripple-upgraded::before {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%;
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .fab.mdc-ripple-upgraded--unbounded::before {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 0));
            transform: scale(var(--mdc-ripple-fg-scale, 0)); }
  .fab.mdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%);
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .fab.mdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .fab:hover, .fab:focus {
    -webkit-box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }
  .fab:active {
    -webkit-box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12); }
  .fab:active, .fab:focus {
    outline: none; }
  .fab:hover {
    cursor: pointer; }
  .fab::-moz-focus-inner {
    padding: 0;
    border: 0; }
  .fab > svg {
    width: 100%; }
  @supports not (-ms-ime-align: auto) {
    .fab {
      background-color: var(--mdc-theme-secondary, #ff4081); } }
  .fab::before, .fab::after {
    background-color: rgba(255, 255, 255, 0.16);
    opacity: 0; }
    @supports (background-color: color(green a(10%))) {
      .fab::before, .fab::after {
        background-color: color(var(--mdc-theme-text-primary-on-secondary, white) a(16%)); } }
  .fab:not(.mdc-ripple-upgraded):hover::before, .fab:not(.mdc-ripple-upgraded):focus::before, .fab:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .fab.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .fab.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .fab.mdc-ripple-upgraded::after {
    opacity: 0; }
  .fab.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .fab.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .fab:not(.mdc-ripple-upgraded) {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0.18); }

.fab__icon {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  width: 100%;
  -webkit-transition: -webkit-transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);
  transition: -webkit-transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);
  will-change: transform; }

.fab_mini {
  width: 40px;
  height: 40px;
  font-size: 20px !important; }

.icon:before {
  font-family: 'icons'; }

.icon_heart:before {
  content: ""; }

.icon_heart-empty:before {
  content: ""; }

.icon_menu:before {
  content: ""; }

.icon_list:before {
  content: ""; }

.icon_cart:before {
  content: ""; }

.icon_close:before {
  content: ""; }

.icon_options:before {
  content: ""; }

.icon_direction:before {
  content: ""; }

.icon_help-outline:before {
  content: ""; }

.icon_rouble:before {
  content: ""; }

.icon_contact:before {
  content: ""; }

.icon_contact-outline:before {
  content: ""; }

.icon_search:before {
  content: ""; }

.icon_chevron-up:before {
  content: ""; }

.icon_chevron-down:before {
  content: ""; }

.icon_chevron-left:before {
  content: ""; }

.icon_chevron-right:before {
  content: ""; }

.icon_cart-plus:before {
  content: ""; }

.link_filled {
  display: inline-block;
  position: relative;
  vertical-align: middle;
  color: #1c1c1c;
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  -webkit-transition-property: color;
  transition-property: color;
  -webkit-transition-duration: 0.1s;
          transition-duration: 0.1s; }

.link_filled:before {
  content: "";
  position: absolute;
  z-index: -1;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: #00e871;
  -webkit-transform: scaleY(0);
          transform: scaleY(0);
  -webkit-transform-origin: 50%;
          transform-origin: 50%;
  -webkit-transition-property: -webkit-transform;
  transition-property: -webkit-transform;
  transition-property: transform;
  transition-property: transform, -webkit-transform;
  -webkit-transition-duration: 0.1s;
          transition-duration: 0.1s;
  -webkit-transition-timing-function: ease-out;
          transition-timing-function: ease-out; }

.link_filled:hover:before, .link_filled:focus:before, .link_filled:active:before {
  -webkit-transform: scaleY(1);
          transform: scaleY(1); }

.input {
  height: 100%;
  width: 100%;
  padding: 0px 0px 0px 15px; }

.breadcrumbs {
  margin: 20px 0;
  background: white;
  font-size: 0.69444rem; }

.breadcrumbs__items {
  padding: 10px 0px 10px 0px;
  list-style: none; }

.breadcrumbs__item {
  display: inline-block;
  padding: 0px 2px 0px 2px; }

.breadcrumbs__link {
  color: #4d4d4d; }

.breadcrumbs__content-area {
  padding: 0px 15px 0px 15px; }
  @media (min-width: 20em) and (max-width: 60.615em) {
    .breadcrumbs__content-area {
      width: 100%; } }

.breadcrumbs__delimeter {
  padding: 0px 2px 0px 2px; }

.ribbon {
  position: absolute;
  top: 15px;
  left: -12px;
  padding: 3px 12px 2px 23px;
  font-size: 12px;
  color: white;
  -webkit-transform: skewX(-25deg);
          transform: skewX(-25deg);
  z-index: 50;
  -webkit-box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
          box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }

.ribbon__content {
  font-weight: 600;
  -webkit-transform: skewX(25deg);
          transform: skewX(25deg);
  font-family: "MuseoSansCyrl-700"; }

.ribbon_green {
  color: #1c1c1c;
  background: #00e871; }

.header-top {
  position: relative;
  height: 78px;
  background: white; }
  .header-top .content-area {
    position: relative; }

.header-top__logo {
  height: 100%;
  width: 170px;
  color: #1c1c1c;
  font-size: 1.728rem;
  text-align: center;
  line-height: 78px;
  font-family: "MuseoSansCyrl-700"; }
  @media (min-width: 46.875em) {
    .header-top__logo {
      width: 235px;
      font-size: 34px; } }

.header-top__nav {
  display: none;
  height: 100%;
  width: 505px;
  padding: 32px 15px 22px 15px;
  -ms-flex-pack: distribute;
      justify-content: space-around;
  font-size: 0.83333rem; }
  @media (min-width: 60.625em) {
    .header-top__nav {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex; } }
  @media (min-width: 73.125em) {
    .header-top__nav {
      width: 680px; } }

.header-top__nav-item {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  text-align: center;
  text-transform: uppercase; }

.header-top__controls {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  top: 0px;
  right: 15px;
  height: 100%;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  font-size: 24px; }
  @media (min-width: 60.625em) {
    .header-top__controls {
      display: none; } }

.header-top__control {
  height: 44px;
  width: 44px;
  border-radius: 22px;
  color: #1c1c1c; }
  .header-top__control::before, .header-top__control::after {
    background-color: rgba(0, 0, 0, 0.1);
    opacity: 0; }
  .header-top__control:not(.mdc-ripple-upgraded):hover::before, .header-top__control:not(.mdc-ripple-upgraded):focus::before, .header-top__control:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .header-top__control.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .header-top__control.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .header-top__control.mdc-ripple-upgraded::after {
    opacity: 0; }
  .header-top__control.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .header-top__control.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

.header-top__phones {
  display: none;
  width: 200px;
  padding: 15px 0px 15px 15px;
  text-transform: uppercase;
  text-align: right;
  font-family: "MuseoSansCyrl-700"; }
  @media (min-width: 60.625em) {
    .header-top__phones {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: end;
          -ms-flex-align: end;
              align-items: flex-end;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column; } }

.header-top__phone-caption {
  font-size: 0.83333rem; }

.header-top__phone {
  font-size: 1.44rem; }

.main {
  position: absolute; }

.page-wrapper {
  position: absolute; }

.header-bottom {
  height: 48px;
  width: 100%;
  color: white;
  background-color: #212121;
  font-family: "MuseoSansCyrl-700";
  -webkit-box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
          box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }
  @media (min-width: 20em) and (max-width: 60.615em) {
    .header-bottom .content-area_flex {
      padding: 0px; } }

.header-bottom__search-box {
  position: relative;
  padding: 7px;
  width: 100%; }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .header-bottom__search-box {
      width: 460px; } }
  @media (min-width: 73.125em) {
    .header-bottom__search-box {
      width: 660px; } }

.header-bottom__dropdown {
  display: none;
  width: 240px;
  text-align: center;
  font-size: 1rem;
  line-height: 48px;
  cursor: pointer;
  -webkit-transition: 0.2s;
  transition: 0.2s; }
  .header-bottom__dropdown:hover {
    background: #303131; }
  @media (min-width: 60.625em) {
    .header-bottom__dropdown {
      display: block; } }

.header-bottom__cart {
  display: none;
  position: relative;
  width: 240px;
  text-align: center;
  line-height: 48px;
  cursor: pointer;
  -webkit-transition: 0.2s;
  transition: 0.2s; }
  .header-bottom__cart:hover {
    background: #303131; }
  @media (min-width: 60.625em) {
    .header-bottom__cart {
      display: block; } }

.header-bottom__cart-icon {
  position: absolute;
  top: 0px;
  left: 25px;
  font-size: 20px; }

.header-bottom__search-icon {
  position: absolute;
  top: 12px;
  right: 25px;
  color: #1c1c1c;
  font-size: 18px; }

.header-bottom__cart-counter {
  position: absolute;
  top: 9px;
  right: 25px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 30px;
  width: 30px;
  border: 2px solid #48daa1;
  border-radius: 15px;
  -webkit-box-shadow: 0px 0px 20px 0px #48daa1;
  box-shadow: 0px 0px 20px 0px #48daa1; }

.footer-middle {
  height: 320px;
  font-size: 2.0736rem;
  text-align: center; }

.footer-bottom {
  height: 54px;
  color: white;
  text-align: center;
  line-height: 54px;
  font-size: 0.83333rem;
  background-color: #1c1c1c; }

.side-menu {
  position: absolute;
  top: 0px;
  right: 0px;
  height: 100%;
  width: 100%;
  min-height: 100;
  visibility: hidden;
  overflow: hidden;
  z-index: 1000; }

.sideMenu__hidden {
  -webkit-transition: visibility 0ms ease-out 300ms;
  transition: visibility 0ms ease-out 300ms; }

.navMenu_visible {
  visibility: visible !important; }

.side-menu__overlay {
  position: absolute;
  top: 0;
  right: 80%;
  left: 0;
  height: 100%; }

.side-menu__content {
  height: 100%;
  width: 100%;
  margin-left: 100%;
  padding-right: 20%;
  background: white;
  border-left: 1px solid #e5e5e5;
  -webkit-transition: -webkit-transform 300ms ease-out;
  transition: -webkit-transform 300ms ease-out;
  transition: transform 300ms ease-out;
  transition: transform 300ms ease-out, -webkit-transform 300ms ease-out;
  will-change: transform; }

.side-menu__auth-area {
  position: relative;
  height: 74px;
  width: 100%;
  padding: 22px; }

.side-menu__close {
  position: absolute;
  top: 16px;
  right: 16px;
  cursor: pointer; }

.side-menu__delimeter {
  margin: 4px 0px 4px 0px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1); }

.side-menu__item {
  height: 48px;
  width: 100%;
  text-transform: none !important;
  text-align: left !important;
  border-radius: 0px !important;
  color: #1c1c1c !important;
  font-size: 1rem;
  line-height: 48px;
  font-family: "MuseoSansCyrl-500"; }

.nav-menu {
  position: fixed;
  top: 100%;
  bottom: 0;
  left: 0;
  overflow-x: hidden;
  overflow-y: scroll;
  width: 100%;
  height: 100%;
  max-height: 100%;
  -webkit-transition: -webkit-transform 300ms ease-out;
  transition: -webkit-transform 300ms ease-out;
  transition: transform 300ms ease-out;
  transition: transform 300ms ease-out, -webkit-transform 300ms ease-out;
  background: white;
  will-change: transform;
  z-index: 20000; }

.nav-menu__header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 74px;
  width: 100%;
  padding: 12px 16px;
  text-align: center; }

.nav-menu__control {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

.nav-menu__content {
  overflow: auto; }

.nav-menu__title {
  display: inline-block;
  overflow: hidden;
  margin-top: 0;
  text-align: center;
  white-space: nowrap;
  text-overflow: ellipsis;
  font-size: 1.2rem;
  line-height: 24px;
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1; }

.catalog {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }
  @media (min-width: 60.625em) {
    .catalog {
      padding: 0px 15px 0px 15px; } }

.catalog__left-content {
  display: none; }
  @media (min-width: 60.625em) {
    .catalog__left-content {
      display: block; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .catalog__left-content {
      width: 212px; } }
  @media (min-width: 73.125em) {
    .catalog__left-content {
      width: 263px; } }

.catalog__right-content {
  width: 100%; }
  @media (min-width: 46.875em) {
    .catalog__right-content {
      padding: 0px 15px 0px 15px; } }
  @media (min-width: 60.625em) {
    .catalog__right-content {
      width: 728px;
      padding: 0px 0px 0px 30px; } }
  @media (min-width: 73.125em) {
    .catalog__right-content {
      width: 876px; } }

.catalog__nav {
  padding: 0px 4px 0px 4px;
  max-height: 336px;
  overflow-y: scroll;
  background: white; }

.catalog__nav-item {
  display: block;
  height: 48px;
  width: 100%;
  font-size: 0.83333rem;
  color: #1c1c1c !important;
  text-transform: none;
  text-align: left;
  line-height: 48px;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  font-family: "MuseoSansCyrl-500"; }
  .catalog__nav-item::before, .catalog__nav-item::after {
    background-color: rgba(72, 218, 161, 0.1);
    opacity: 0; }
  .catalog__nav-item:not(.mdc-ripple-upgraded):hover::before, .catalog__nav-item:not(.mdc-ripple-upgraded):focus::before, .catalog__nav-item:not(.mdc-ripple-upgraded):active::after {
    -webkit-transition-duration: 85ms;
            transition-duration: 85ms;
    opacity: .6; }
  .catalog__nav-item.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999; }
  .catalog__nav-item.mdc-ripple-upgraded--background-active-fill::before {
    -webkit-transition-duration: 120ms;
            transition-duration: 120ms;
    opacity: 1; }
  .catalog__nav-item.mdc-ripple-upgraded::after {
    opacity: 0; }
  .catalog__nav-item.mdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
            animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards; }
  .catalog__nav-item.mdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 83ms mdc-ripple-fg-opacity-out;
            animation: 83ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }

.green_scrollbar {
  overflow-y: scroll; }
  .green_scrollbar::-webkit-scrollbar-track {
    background-color: #ebf2f7; }
  .green_scrollbar::-webkit-scrollbar {
    width: 15px;
    background-color: #ebf2f7; }
  .green_scrollbar::-webkit-scrollbar-thumb {
    width: 15px;
    background-color: #48daa1; }

.gallery__items {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between; }

.gallery__item {
  margin-bottom: 16px; }

.gallery__top {
  height: 45px;
  width: 100%;
  background: white; }

.gallery__sorting {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height: 100%; }

.gallery__sorting-caption {
  font-family: "MuseoSansCyrl-700"; }

.gallery__sorting-button {
  margin-left: 15px;
  color: #4d4d4d;
  cursor: pointer; }

.card {
  display: block;
  position: relative;
  width: 152px;
  height: 320px;
  color: #1c1c1c;
  background: white;
  cursor: pointer;
  overflow: hidden;
  border-radius: 2px;
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-property: -webkit-box-shadow;
  transition-property: -webkit-box-shadow;
  transition-property: box-shadow;
  transition-property: box-shadow, -webkit-box-shadow;
  -webkit-box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
          box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }
  .card:hover {
    z-index: 500;
    -webkit-box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);
            box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12); }
    .card:hover .card__purchase {
      visibility: visible; }
    .card:hover .card__img-overlay-wrapper {
      opacity: 1; }
    .card:hover .card__ribbon {
      opacity: 0; }
  @media (min-width: 46.875em) and (max-width: 60.615em) {
    .card {
      height: 420px;
      width: 225px; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .card {
      height: 420px;
      width: 222px; } }
  @media (min-width: 73.125em) {
    .card {
      height: 420px;
      width: 272px; } }

.card__img-wrap {
  position: relative;
  width: 100%;
  height: 152px;
  text-align: center; }
  @media (min-width: 46.875em) and (max-width: 60.615em) {
    .card__img-wrap {
      height: 225px; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .card__img-wrap {
      height: 222px; } }
  @media (min-width: 73.125em) {
    .card__img-wrap {
      height: 272px; } }

.card__img-overlay-wrapper {
  position: absolute;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  opacity: 0;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-property: opacity;
  transition-property: opacity;
  will-change: opacity; }

.card__img-overlay {
  position: absolute;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  background: #48daa1;
  opacity: 0.7;
  z-index: 4000; }

.card__img {
  height: auto;
  width: 100%; }

.card__details-wrap {
  width: 100%; }

.card__details {
  color: white !important;
  border-color: white !important;
  z-index: 5000;
  font-family: "MuseoSansCyrl-700"; }

.card__content {
  position: relative;
  height: 168px;
  padding: 8px; }
  @media (min-width: 46.875em) {
    .card__content {
      padding: 14px; } }
  @media (min-width: 46.875em) and (max-width: 60.615em) {
    .card__content {
      height: 185px; } }
  @media (min-width: 60.625em) and (max-width: 73.115em) {
    .card__content {
      height: 185px; } }

.card__price {
  position: absolute;
  bottom: 24px;
  left: 8px;
  font-size: 1rem; }
  @media (min-width: 46.875em) {
    .card__price {
      left: 14px;
      font-size: 1.44rem; } }

.price {
  font-family: "MuseoSansCyrl-700"; }
  .price:after {
    display: inline-block;
    font-family: "icons";
    content: "";
    margin-left: 8px;
    font-size: 15px; }

.card__title {
  display: block;
  font-size: 0.83333rem;
  -webkit-transition: 0.2s;
  transition: 0.2s; }
  .card__title:hover {
    color: #3757c5; }
  @media (min-width: 46.875em) {
    .card__title {
      font-size: 1rem; } }

.card__purchase {
  display: block;
  display: -webkit-box;
  visibility: hidden;
  position: absolute;
  background: #00e871;
  bottom: 16px;
  right: 12px;
  color: #1c1c1c; }
  @media (min-width: 20em) and (max-width: 46.865em) {
    .card__purchase {
      height: 40px;
      width: 40px;
      border-radius: 20px; } }

.card__ribbon {
  opacity: 1;
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-property: opacity;
  transition-property: opacity; }

.row__title {
  padding: 20px 0px 10px 0px;
  font-size: 1.44rem; }

.row {
  width: 100%;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: distribute;
      justify-content: space-around; }

.content-area_components {
  padding: 50px 15px 50px 15px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5jc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9fbWl4aW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9fa2V5ZnJhbWVzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2FuaW1hdGlvbi9fdmFyaWFibGVzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9fbWl4aW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2J1dHRvbi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2J1dHRvbi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9fbWl4aW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3R5cG9ncmFwaHkvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mYWIvbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mYWIvbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9lbGV2YXRpb24vX21peGlucy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ydGwvX21peGlucy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9jaGVja2JveC9fa2V5ZnJhbWVzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2NoZWNrYm94L192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvY2hlY2tib3gvbWRjLWNoZWNrYm94LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2NoZWNrYm94L19taXhpbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvY2hlY2tib3gvbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvX21peGlucy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9jaGVja2JveC9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL19taXhpbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvcmlwcGxlL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGhlbWUvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mb3JtLWZpZWxkL21kYy1mb3JtLWZpZWxkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3R5cG9ncmFwaHkvX21peGlucy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90aGVtZS9fbWl4aW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2ZhYi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL3N0YXRpYy9mb250cy9NdXNlb1NhbnNMaWdodC9NdXNlb1NhbnNMaWdodC5jc3MiLCIuLi8uLi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zUmVndWxhci9NdXNlb1NhbnNSZWd1bGFyLmNzcyIsIi4uLy4uL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLmNzcyIsIi4uLy4uL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCb2xkL011c2VvU2Fuc0JvbGQuY3NzIiwiLi4vLi4vc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLmNzcyIsIi4uLy4uL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy5jc3MiLCJjb3JlL2Jhc2Uuc2NzcyIsImNvcmUvY29sb3JzLnNjc3MiLCJzdHlsZXMuc2NzcyIsImNvcmUvY29yZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbXEvX21xLnNjc3MiLCJibG9ja3MvdGl0bGUvdGl0bGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9tb2R1bGFyc2NhbGUtc2Fzcy9zdHlsZXNoZWV0cy9tb2R1bGFyc2NhbGUvX2Z1bmN0aW9uLnNjc3MiLCJibG9ja3MvYnV0dG9uL2J1dHRvbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9idXR0b24vX21peGlucy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9idXR0b24vX3ZhcmlhYmxlcy5zY3NzIiwiYmxvY2tzL2ZhYi9mYWIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZmFiL19taXhpbnMuc2NzcyIsImJsb2Nrcy9pY29uL2ljb25zLnNjc3MiLCJibG9ja3MvaWNvbi9fX3ZhcmlhYmxlcy5zY3NzIiwiYmxvY2tzL2xpbmsvbGluay5zY3NzIiwiYmxvY2tzL2lucHV0L2lucHV0LnNjc3MiLCJibG9ja3MvYnJlYWRjcnVtYnMvYnJlYWRjcnVtYnMuc2NzcyIsImJsb2Nrcy9yaWJib24vcmliYm9uLnNjc3MiLCJibG9ja3MvaGVhZGVyLXRvcC9oZWFkZXItdG9wLnNjc3MiLCJibG9ja3MvaGVhZGVyLWJvdHRvbS9oZWFkZXItYm90dG9tLnNjc3MiLCJibG9ja3MvZm9vdGVyLW1pZGRsZS9mb290ZXItbWlkZGxlLnNjc3MiLCJibG9ja3MvZm9vdGVyLWJvdHRvbS9mb290ZXItYm90dG9tLnNjc3MiLCJibG9ja3Mvc2lkZS1tZW51L3NpZGUtbWVudS5zY3NzIiwiYmxvY2tzL25hdi1tZW51L25hdi1tZW51LnNjc3MiLCJibG9ja3MvY2F0YWxvZy9jYXRhbG9nLnNjc3MiLCJibG9ja3MvZ2FsbGVyeS9nYWxsZXJ5LnNjc3MiLCJibG9ja3Mv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bnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuLyoqXG4gKiBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuICogYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4gKiBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuICovXG4vKipcbiAqIFRoZSBkZWZhdWx0IGR1cmF0aW9uIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4gKi9cbi8qKlxuICogVGhlIGRlZmF1bHQgZWFzaW5nIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4gKi9cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgdG8gYW4gZWxlbWVudCB0byBnaXZlIGl0IHRoZSBlbGV2YXRpb24gc3BlY2lmaWVkIGJ5ICR6LXZhbHVlLlxuICogVGhlICR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNC5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvciBhIGB0cmFuc2l0aW9uYCBwcm9wZXJ0eSBmb3IgZWxldmF0aW9uLlxuICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIGEgY29tcG9uZW50IG5lZWRzIHRvIHRyYW5zaXRpb25cbiAqIG1vcmUgdGhhbiBvbmUgcHJvcGVydHkuXG4gKlxuICogYGBgc2Nzc1xuICogLmZvbyB7XG4gKiAgIHRyYW5zaXRpb246IG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1ydWxlKCksIG9wYWNpdHkgMTAwbXMgZWFzZTtcbiAqICAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5LCBvcGFjaXR5O1xuICogfVxuICogYGBgXG4gKi9cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgbmVlZGVkIHRvIGhhdmUgYW4gZWxlbWVudCB0cmFuc2l0aW9uIGJldHdlZW4gZWxldmF0aW9ucy5cbiAqIFRoaXMgbWl4aW4gc2hvdWxkIGJlIGFwcGxpZWQgdG8gZWxlbWVudHMgd2hvc2UgZWxldmF0aW9uIHZhbHVlcyB3aWxsIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlaXJcbiAqIGNvbnRleHQgKGUuZy4gd2hlbiBhY3RpdmUgb3IgZGlzYWJsZWQpLlxuICovXG5Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIHtcbiAgZnJvbSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCwgMCkpIHNjYWxlKDEpOyB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7IH0gfVxuXG5Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuQGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0IHtcbiAgZnJvbSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgdG8ge1xuICAgIG9wYWNpdHk6IDA7IH0gfVxuXG4ubWRjLXJpcHBsZS1zdXJmYWNlLS10ZXN0LWVkZ2UtdmFyLWJ1ZyB7XG4gIC0tbWRjLXJpcHBsZS1zdXJmYWNlLXRlc3QtZWRnZS12YXI6IDFweCBzb2xpZCAjMDAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47IH1cbiAgLm1kYy1yaXBwbGUtc3VyZmFjZS0tdGVzdC1lZGdlLXZhci1idWc6OmJlZm9yZSB7XG4gICAgYm9yZGVyOiB2YXIoLS1tZGMtcmlwcGxlLXN1cmZhY2UtdGVzdC1lZGdlLXZhcik7IH1cblxuLyoqXG4gKiBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuICogYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4gKiBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuICovXG4vKipcbiAqIFRoZSBkZWZhdWx0IGR1cmF0aW9uIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4gKi9cbi8qKlxuICogVGhlIGRlZmF1bHQgZWFzaW5nIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4gKi9cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBDU1MgcnVsZXMgdG8gYW4gZWxlbWVudCB0byBnaXZlIGl0IHRoZSBlbGV2YXRpb24gc3BlY2lmaWVkIGJ5ICR6LXZhbHVlLlxuICogVGhlICR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNC5cbiAqIElmICRjb2xvciBoYXMgYW4gYWxwaGEgY2hhbm5lbCwgaXQgd2lsbCBiZSBpZ25vcmVkIGFuZCBvdmVycmlkZGVuLiBUbyBpbmNyZWFzZSB0aGUgb3BhY2l0eSBvZiB0aGUgc2hhZG93LCB1c2VcbiAqICRvcGFjaXR5LWJvb3N0LlxuICovXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgdmFsdWUgZm9yIGEgYHRyYW5zaXRpb25gIHByb3BlcnR5IGZvciBlbGV2YXRpb24uXG4gKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gZGlyZWN0bHkgaXMgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgYSBjb21wb25lbnQgbmVlZHMgdG8gdHJhbnNpdGlvblxuICogbW9yZSB0aGFuIG9uZSBwcm9wZXJ0eS5cbiAqXG4gKiBgYGBzY3NzXG4gKiAuZm9vIHtcbiAqICAgdHJhbnNpdGlvbjogbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXJ1bGUoKSwgb3BhY2l0eSAxMDBtcyBlYXNlO1xuICogICB3aWxsLWNoYW5nZTogJG1kYy1lbGV2YXRpb24tcHJvcGVydHksIG9wYWNpdHk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuLyoqXG4gKiBBcHBsaWVzIHRoZSBjb3JyZWN0IGNzcyBydWxlcyBuZWVkZWQgdG8gaGF2ZSBhbiBlbGVtZW50IHRyYW5zaXRpb24gYmV0d2VlbiBlbGV2YXRpb25zLlxuICogVGhpcyBtaXhpbiBzaG91bGQgYmUgYXBwbGllZCB0byBlbGVtZW50cyB3aG9zZSBlbGV2YXRpb24gdmFsdWVzIHdpbGwgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGVpclxuICogY29udGV4dCAoZS5nLiB3aGVuIGFjdGl2ZSBvciBkaXNhYmxlZCkuXG4gKi9cbi8qIFRPRE8oc2dvbWVzKTogRmlndXJlIG91dCB3aGF0IHRvIGRvIGFib3V0IGRlc2t0b3AgZm9udCBzaXplcy4gKi9cbi8qIFRPRE8oc2dvbWVzKTogRmlndXJlIG91dCB3aGF0IHRvIGRvIGFib3V0IGkxOG4gYW5kIGkxOG4gZm9udCBzaXplcy4gKi9cbi8qKlxuICogVGhlIGNzcyBwcm9wZXJ0eSB1c2VkIGZvciBlbGV2YXRpb24uIEluIG1vc3QgY2FzZXMgdGhpcyBzaG91bGQgbm90IGJlIGNoYW5nZWQuIEl0IGlzIGV4cG9zZWRcbiAqIGFzIGEgdmFyaWFibGUgZm9yIGFic3RyYWN0aW9uIC8gZWFzeSB1c2Ugd2hlbiBuZWVkaW5nIHRvIHJlZmVyZW5jZSB0aGUgcHJvcGVydHkgZGlyZWN0bHksIGZvclxuICogZXhhbXBsZSBpbiBhIGB3aWxsLWNoYW5nZWAgcnVsZS5cbiAqL1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBkdXJhdGlvbiB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuICovXG4vKipcbiAqIFRoZSBkZWZhdWx0IGVhc2luZyB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuICovXG4vKipcbiAqIEFwcGxpZXMgdGhlIGNvcnJlY3QgQ1NTIHJ1bGVzIHRvIGFuIGVsZW1lbnQgdG8gZ2l2ZSBpdCB0aGUgZWxldmF0aW9uIHNwZWNpZmllZCBieSAkei12YWx1ZS5cbiAqIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4gKiBJZiAkY29sb3IgaGFzIGFuIGFscGhhIGNoYW5uZWwsIGl0IHdpbGwgYmUgaWdub3JlZCBhbmQgb3ZlcnJpZGRlbi4gVG8gaW5jcmVhc2UgdGhlIG9wYWNpdHkgb2YgdGhlIHNoYWRvdywgdXNlXG4gKiAkb3BhY2l0eS1ib29zdC5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvciBhIGB0cmFuc2l0aW9uYCBwcm9wZXJ0eSBmb3IgZWxldmF0aW9uLlxuICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIGEgY29tcG9uZW50IG5lZWRzIHRvIHRyYW5zaXRpb25cbiAqIG1vcmUgdGhhbiBvbmUgcHJvcGVydHkuXG4gKlxuICogYGBgc2Nzc1xuICogLmZvbyB7XG4gKiAgIHRyYW5zaXRpb246IG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1ydWxlKCksIG9wYWNpdHkgMTAwbXMgZWFzZTtcbiAqICAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5LCBvcGFjaXR5O1xuICogfVxuICogYGBgXG4gKi9cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgbmVlZGVkIHRvIGhhdmUgYW4gZWxlbWVudCB0cmFuc2l0aW9uIGJldHdlZW4gZWxldmF0aW9ucy5cbiAqIFRoaXMgbWl4aW4gc2hvdWxkIGJlIGFwcGxpZWQgdG8gZWxlbWVudHMgd2hvc2UgZWxldmF0aW9uIHZhbHVlcyB3aWxsIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlaXJcbiAqIGNvbnRleHQgKGUuZy4gd2hlbiBhY3RpdmUgb3IgZGlzYWJsZWQpLlxuICovXG4vKipcbiAqIFRoZSBjc3MgcHJvcGVydHkgdXNlZCBmb3IgZWxldmF0aW9uLiBJbiBtb3N0IGNhc2VzIHRoaXMgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLiBJdCBpcyBleHBvc2VkXG4gKiBhcyBhIHZhcmlhYmxlIGZvciBhYnN0cmFjdGlvbiAvIGVhc3kgdXNlIHdoZW4gbmVlZGluZyB0byByZWZlcmVuY2UgdGhlIHByb3BlcnR5IGRpcmVjdGx5LCBmb3JcbiAqIGV4YW1wbGUgaW4gYSBgd2lsbC1jaGFuZ2VgIHJ1bGUuXG4gKi9cbi8qKlxuICogVGhlIGRlZmF1bHQgZHVyYXRpb24gdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiAqL1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgcnVsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB3aGVuIGFuIE1EQy1XZWIgY29tcG9uZW50IGlzIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhbiBSVEwgbGF5b3V0LlxuICpcbiAqIFVzYWdlIEV4YW1wbGU6XG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgbGVmdDogMDtcbiAqXG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwge1xuICogICAgIGxlZnQ6IGF1dG87XG4gKiAgICAgcmlnaHQ6IDA7XG4gKiAgIH1cbiAqXG4gKiAgICZfX2JhciB7XG4gKiAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAqICAgICBAaW5jbHVkZSBtZGMtcnRsKFwiLm1kYy1mb29cIikge1xuICogICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gKiAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiAubWRjLWZvby0tbW9kIHtcbiAqICAgcGFkZGluZy1sZWZ0OiA0cHg7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBwYWRkaW5nLWxlZnQ6IGF1dG87XG4gKiAgICAgcGFkZGluZy1yaWdodDogNHB4O1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyB3b3JrcyBieSBjaGVja2luZyBmb3IgW2Rpcj1cInJ0bFwiXSBvbiBhbiBhbmNlc3RvciBlbGVtZW50LiBXaGlsZSB0aGlzIHdpbGwgd29ya1xuICogaW4gbW9zdCBjYXNlcywgaXQgd2lsbCBpbiBzb21lIGNhc2VzIGxlYWQgdG8gZmFsc2UgbmVnYXRpdmVzLCBlLmcuXG4gKlxuICogYGBgaHRtbFxuICogPGh0bWwgZGlyPVwicnRsXCI+XG4gKiAgIDwhLS0gLi4uIC0tPlxuICogICA8ZGl2IGRpcj1cImx0clwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJtZGMtZm9vXCI+U3R5bGVkIGluY29ycmVjdGx5IGFzIFJUTCE8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2h0bWw+XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgZnV0dXJlLCBzZWxlY3RvcnMgc3VjaCBhcyA6ZGlyIChodHRwOi8vbWRuLmlvLzpkaXIpIHdpbGwgaGVscCB1cyBtaXRpZ2F0ZSB0aGlzLlxuICovXG4vKipcbiAqIFRha2VzIGEgYmFzZSBib3gtbW9kZWwgcHJvcGVydHkgLSBlLmcuIG1hcmdpbiAvIGJvcmRlciAvIHBhZGRpbmcgLSBhbG9uZyB3aXRoIGEgZGVmYXVsdFxuICogZGlyZWN0aW9uIGFuZCB2YWx1ZSwgYW5kIGVtaXRzIHJ1bGVzIHdoaWNoIGFwcGx5IHRoZSB2YWx1ZSB0byB0aGVcbiAqIFwiPGJhc2UtcHJvcGVydHk+LTxkZWZhdWx0LWRpcmVjdGlvbj5cIiBwcm9wZXJ0eSBieSBkZWZhdWx0LCBidXQgZmxpcHMgdGhlIGRpcmVjdGlvblxuICogd2hlbiB3aXRoaW4gYW4gUlRMIGNvbnRleHQuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCBsZWZ0LCA4cHgpO1xuICogfVxuICogYGBgXG4gKiBpcyBlcXVpdmFsZW50IHRvOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAqXG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwge1xuICogICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICogICAgIG1hcmdpbi1sZWZ0OiAwO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqIHdoZXJlYXM6XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCByaWdodCwgOHB4KTtcbiAqIH1cbiAqIGBgYFxuICogaXMgZXF1aXZhbGVudCB0bzpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIG1hcmdpbi1yaWdodDogOHB4O1xuICpcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICogICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgNHRoIG9wdGlvbmFsICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IHdoaWNoIHdpbGwgYmUgZm9yd2FyZGVkIHRvIGBtZGMtcnRsYCxcbiAqIGUuZy4gYEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCwgXCIubWRjLWNvbXBvbmVudFwiKWAuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgemVybyBvdXQgdGhlIG9yaWdpbmFsIHZhbHVlIGluIGFuIFJUTCBjb250ZXh0LiBJZiB5b3UncmVcbiAqIHRyeWluZyB0byBmbGlwIHRoZSB2YWx1ZXMsIHVzZSBtZGMtcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eSgpLlxuICovXG4vKipcbiAqIFRha2VzIGEgYmFzZSBwcm9wZXJ0eSBhbmQgZW1pdHMgcnVsZXMgdGhhdCBhc3NpZ24gPGJhc2UtcHJvcGVydHk+LWxlZnQgdG8gPGxlZnQtdmFsdWU+IGFuZFxuICogPGJhc2UtcHJvcGVydHk+LXJpZ2h0IHRvIDxyaWdodC12YWx1ZT4gaW4gYSBMVFIgY29udGV4dCwgYW5kIHZpY2UgdmVyc2EgaW4gYSBSVEwgY29udGV4dC5cbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtcHJvcGVydHkobWFyZ2luLCBhdXRvLCAxMnB4KTtcbiAqIH1cbiAqIGBgYFxuICogaXMgZXF1aXZhbGVudCB0bzpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICogICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAqICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEEgNHRoIG9wdGlvbmFsICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IGNhbiBiZSBnaXZlbiwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYG1kYy1ydGxgLlxuICovXG4vKipcbiAqIFRha2VzIGFuIGFyZ3VtZW50IHNwZWNpZnlpbmcgYSBob3Jpem9udGFsIHBvc2l0aW9uIHByb3BlcnR5IChlaXRoZXIgXCJsZWZ0XCIgb3IgXCJyaWdodFwiKSBhcyB3ZWxsXG4gKiBhcyBhIHZhbHVlLCBhbmQgYXBwbGllcyB0aGF0IHZhbHVlIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gaW4gYSBMVFIgY29udGV4dCwgYW5kIGZsaXBzIGl0IGluIGFcbiAqIFJUTCBjb250ZXh0LiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLXBvc2l0aW9uKGxlZnQsIDApO1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiB9XG4gKiBgYGBcbiAqIGlzIGVxdWl2YWxlbnQgdG86XG4gKlxuICogYGBgc2Nzc1xuICogIC5tZGMtZm9vIHtcbiAqICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgIGxlZnQ6IDA7XG4gKiAgICByaWdodDogaW5pdGlhbDtcbiAqXG4gKiAgICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICAgcmlnaHQ6IDA7XG4gKiAgICAgIGxlZnQ6IGluaXRpYWw7XG4gKiAgICB9XG4gKiAgfVxuICogYGBgXG4gKiBBbiBvcHRpb25hbCB0aGlyZCAkcm9vdC1zZWxlY3RvciBhcmd1bWVudCBtYXkgYWxzbyBiZSBnaXZlbiwgd2hpY2ggaXMgcGFzc2VkIHRvIGBtZGMtcnRsYC5cbiAqL1xuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtdW5jaGVja2VkLWNoZWNrZWQtY2hlY2ttYXJrLXBhdGgge1xuICAwJSxcbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMjkuNzgzMzQ7IH1cbiAgNTAlIHtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTsgfVxuICAxMDAlIHtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMDsgfSB9XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LXVuY2hlY2tlZC1pbmRldGVybWluYXRlLW1peGVkbWFyayB7XG4gIDAlLFxuICA2OC4yJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7IH1cbiAgNjguMiUge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLCAxKTsgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgxKTsgfSB9XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWNoZWNrZWQtdW5jaGVja2VkLWNoZWNrbWFyay1wYXRoIHtcbiAgZnJvbSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSk7XG4gICAgb3BhY2l0eTogMTtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMDsgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTI5Ljc4MzM0OyB9IH1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtY2hlY2tlZC1pbmRldGVybWluYXRlLWNoZWNrbWFyayB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICBvcGFjaXR5OiAwOyB9IH1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWNoZWNrbWFyayB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE0LCAwLCAwLCAxKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gICAgb3BhY2l0eTogMDsgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtY2hlY2tlZC1pbmRldGVybWluYXRlLW1peGVkbWFyayB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IG1kYy1hbmltYXRpb24tZGVjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIG9wYWNpdHk6IDE7IH0gfVxuXG5Aa2V5ZnJhbWVzIG1kYy1jaGVja2JveC1pbmRldGVybWluYXRlLWNoZWNrZWQtbWl4ZWRtYXJrIHtcbiAgZnJvbSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMTQsIDAsIDAsIDEpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDMxNWRlZyk7XG4gICAgb3BhY2l0eTogMDsgfSB9XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUtdW5jaGVja2VkLW1peGVkbWFyayB7XG4gIDAlIHtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gICAgb3BhY2l0eTogMTsgfVxuICAzMi44JSxcbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gICAgb3BhY2l0eTogMDsgfSB9XG5cbi5tZGMtY2hlY2tib3gge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZmxleDogMCAwIDE4cHg7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICB3aWR0aDogMThweDtcbiAgaGVpZ2h0OiAxOHB4O1xuICBwYWRkaW5nOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xuICAtLW1kYy1yaXBwbGUtZmctc2l6ZTogMDtcbiAgLS1tZGMtcmlwcGxlLWxlZnQ6IDA7XG4gIC0tbWRjLXJpcHBsZS10b3A6IDA7XG4gIC0tbWRjLXJpcHBsZS1mZy1zY2FsZTogMTtcbiAgLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6IDA7XG4gIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQ6IDA7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDpub3QoOmNoZWNrZWQpOm5vdCg6aW5kZXRlcm1pbmF0ZSkgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNik7IH1cbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjYpOyB9XG4gIC5tZGMtY2hlY2tib3gtLXRoZW1lLWRhcmsgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZGlzYWJsZWQ6bm90KDpjaGVja2VkKTpub3QoOmluZGV0ZXJtaW5hdGUpIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy10aGVtZS0tZGFyayAubWRjLWNoZWNrYm94IC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmRpc2FibGVkOm5vdCg6Y2hlY2tlZCk6bm90KDppbmRldGVybWluYXRlKSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpOyB9XG4gIC5tZGMtY2hlY2tib3gtLXRoZW1lLWRhcmsgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZGlzYWJsZWQ6Y2hlY2tlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtY2hlY2tib3gtLXRoZW1lLWRhcmsgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZGlzYWJsZWQ6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy10aGVtZS0tZGFyayAubWRjLWNoZWNrYm94IC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmRpc2FibGVkOmluZGV0ZXJtaW5hdGUgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7IH1cbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGgge1xuICAgIHN0cm9rZTogd2hpdGUgIWltcG9ydGFudDsgfVxuICAubWRjLWNoZWNrYm94IC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7IH1cbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kOjpiZWZvcmUge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY0MDgxOyB9XG4gICAgQHN1cHBvcnRzIG5vdCAoLW1zLWltZS1hbGlnbjogYXV0bykge1xuICAgICAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kOjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjZmY0MDgxKTsgfSB9XG4gIC5tZGMtY2hlY2tib3g6OmJlZm9yZSwgLm1kYy1jaGVja2JveDo6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGxpbmVhcjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY29udGVudDogXCJcIjsgfVxuICAubWRjLWNoZWNrYm94OjpiZWZvcmUsIC5tZGMtY2hlY2tib3g6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgNjQsIDEyOSwgMC4xNCk7XG4gICAgb3BhY2l0eTogMDsgfVxuICAgIEBzdXBwb3J0cyAoYmFja2dyb3VuZC1jb2xvcjogY29sb3IoZ3JlZW4gYSgxMCUpKSkge1xuICAgICAgLm1kYy1jaGVja2JveDo6YmVmb3JlLCAubWRjLWNoZWNrYm94OjphZnRlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHZhcigtLW1kYy10aGVtZS1zZWNvbmRhcnksICNmZjQwODEpIGEoMTQlKSk7IH0gfVxuICAubWRjLWNoZWNrYm94Om5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6aG92ZXI6OmJlZm9yZSwgLm1kYy1jaGVja2JveDpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmUsIC5tZGMtY2hlY2tib3g6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVyIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiA4NW1zO1xuICAgIG9wYWNpdHk6IC42OyB9XG4gIC5tZGMtY2hlY2tib3gubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkOjpiZWZvcmUge1xuICAgIG9wYWNpdHk6IC45OTk5OTsgfVxuICAubWRjLWNoZWNrYm94Lm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtYWN0aXZlLWZpbGw6OmJlZm9yZSB7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMTIwbXM7XG4gICAgb3BhY2l0eTogMTsgfVxuICAubWRjLWNoZWNrYm94Lm1kYy1yaXBwbGUtdXBncmFkZWQ6OmFmdGVyIHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIC5tZGMtY2hlY2tib3gubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiAzMDBtcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiBmb3J3YXJkcywgODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gZm9yd2FyZHM7IH1cbiAgLm1kYy1jaGVja2JveC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTsgfVxuICAubWRjLWNoZWNrYm94OjpiZWZvcmUsIC5tZGMtY2hlY2tib3g6OmFmdGVyIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gNTAlKTtcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDUwJSk7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlOyB9XG4gIC5tZGMtY2hlY2tib3gubWRjLXJpcHBsZS11cGdyYWRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gNTAlKTtcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDUwJSk7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMCkpOyB9XG4gIC5tZGMtY2hlY2tib3gubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkOjpiZWZvcmUge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIGNhbGMoNTAlIC0gMjUlKSk7XG4gICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCBjYWxjKDUwJSAtIDI1JSkpO1xuICAgIHdpZHRoOiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDUwJSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDUwJSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7IH1cbiAgLm1kYy1jaGVja2JveC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgNTAlKTtcbiAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgNTAlKTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7IH1cbiAgLm1kYy1jaGVja2JveC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS11bmJvdW5kZWQ6OmFmdGVyIHtcbiAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCAwKTtcbiAgICBsZWZ0OiB2YXIoLS1tZGMtcmlwcGxlLWxlZnQsIDApOyB9XG4gIC5tZGMtY2hlY2tib3ggLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDpub3QoOmNoZWNrZWQpOm5vdCg6aW5kZXRlcm1pbmF0ZSkgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkOmNoZWNrZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLFxuICAubWRjLWNoZWNrYm94IC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQ6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBib3JkZXItY29sb3I6ICNmZjQwODE7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjZmY0MDgxKTtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNDA4MTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjZmY0MDgxKTsgfVxuXG5Aa2V5ZnJhbWVzIG1kYy1jaGVja2JveC1mYWRlLWluLWJhY2tncm91bmQtMCB7XG4gIDAlIHtcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgNTAlIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgYm9yZGVyLWNvbG9yOiAjZmY0MDgxO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7IH0gfVxuXG5Aa2V5ZnJhbWVzIG1kYy1jaGVja2JveC1mYWRlLW91dC1iYWNrZ3JvdW5kLTAge1xuICAwJSxcbiAgODAlIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgYm9yZGVyLWNvbG9yOiAjZmY0MDgxO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7IH1cbiAgMTAwJSB7XG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9IH1cbiAgLm1kYy1jaGVja2JveC5tZGMtY2hlY2tib3gtLWFuaW0tdW5jaGVja2VkLWNoZWNrZWQgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsIC5tZGMtY2hlY2tib3gubWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1pbmRldGVybWluYXRlIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBhbmltYXRpb24tbmFtZTogbWRjLWNoZWNrYm94LWZhZGUtaW4tYmFja2dyb3VuZC0wOyB9XG4gIC5tZGMtY2hlY2tib3gubWRjLWNoZWNrYm94LS1hbmltLWNoZWNrZWQtdW5jaGVja2VkIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLCAubWRjLWNoZWNrYm94Lm1kYy1jaGVja2JveC0tYW5pbS1pbmRldGVybWluYXRlLXVuY2hlY2tlZCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IG1kYy1jaGVja2JveC1mYWRlLW91dC1iYWNrZ3JvdW5kLTA7IH1cbiAgLm1kYy1jaGVja2JveC0tdGhlbWUtZGFyayAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkOm5vdCg6Y2hlY2tlZCk6bm90KDppbmRldGVybWluYXRlKSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkOm5vdCg6Y2hlY2tlZCk6bm90KDppbmRldGVybWluYXRlKSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIGJvcmRlci1jb2xvcjogd2hpdGU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgLm1kYy1jaGVja2JveC0tdGhlbWUtZGFyayAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkOmNoZWNrZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLFxuICAubWRjLWNoZWNrYm94LS10aGVtZS1kYXJrIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQ6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkOmNoZWNrZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLFxuICAubWRjLXRoZW1lLS1kYXJrIC5tZGMtY2hlY2tib3ggLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJvcmRlci1jb2xvcjogI2ZmNDA4MTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW1kYy10aGVtZS1zZWNvbmRhcnksICNmZjQwODEpO1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY0MDgxO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1kYy10aGVtZS1zZWNvbmRhcnksICNmZjQwODEpOyB9XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWZhZGUtaW4tYmFja2dyb3VuZC0xIHtcbiAgMCUge1xuICAgIGJvcmRlci1jb2xvcjogd2hpdGU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgNTAlIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgYm9yZGVyLWNvbG9yOiAjZmY0MDgxO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7IH0gfVxuXG5Aa2V5ZnJhbWVzIG1kYy1jaGVja2JveC1mYWRlLW91dC1iYWNrZ3JvdW5kLTEge1xuICAwJSxcbiAgODAlIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgYm9yZGVyLWNvbG9yOiAjZmY0MDgxO1xuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLXNlY29uZGFyeSwgI2ZmNDA4MSk7IH1cbiAgMTAwJSB7XG4gICAgYm9yZGVyLWNvbG9yOiB3aGl0ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfSB9XG4gIC5tZGMtY2hlY2tib3gtLXRoZW1lLWRhcmsubWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1jaGVja2VkIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLCAubWRjLWNoZWNrYm94LS10aGVtZS1kYXJrLm1kYy1jaGVja2JveC0tYW5pbS11bmNoZWNrZWQtaW5kZXRlcm1pbmF0ZSAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy10aGVtZS0tZGFyayAubWRjLWNoZWNrYm94Lm1kYy1jaGVja2JveC0tYW5pbS11bmNoZWNrZWQtY2hlY2tlZCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy10aGVtZS0tZGFyayAubWRjLWNoZWNrYm94Lm1kYy1jaGVja2JveC0tYW5pbS11bmNoZWNrZWQtaW5kZXRlcm1pbmF0ZSAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IG1kYy1jaGVja2JveC1mYWRlLWluLWJhY2tncm91bmQtMTsgfVxuICAubWRjLWNoZWNrYm94LS10aGVtZS1kYXJrLm1kYy1jaGVja2JveC0tYW5pbS1jaGVja2VkLXVuY2hlY2tlZCAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCwgLm1kYy1jaGVja2JveC0tdGhlbWUtZGFyay5tZGMtY2hlY2tib3gtLWFuaW0taW5kZXRlcm1pbmF0ZS11bmNoZWNrZWQgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLm1kYy1jaGVja2JveC5tZGMtY2hlY2tib3gtLWFuaW0tY2hlY2tlZC11bmNoZWNrZWQgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLm1kYy1jaGVja2JveC5tZGMtY2hlY2tib3gtLWFuaW0taW5kZXRlcm1pbmF0ZS11bmNoZWNrZWQgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIGFuaW1hdGlvbi1uYW1lOiBtZGMtY2hlY2tib3gtZmFkZS1vdXQtYmFja2dyb3VuZC0xOyB9XG5cbi5tZGMtY2hlY2tib3gtLWRpc2FibGVkIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS11cGdyYWRlZCAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLFxuLm1kYy1jaGVja2JveC0tdXBncmFkZWQgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrLFxuLm1kYy1jaGVja2JveC0tdXBncmFkZWQgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoLFxuLm1kYy1jaGVja2JveC0tdXBncmFkZWQgLm1kYy1jaGVja2JveF9fbWl4ZWRtYXJrIHtcbiAgdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50OyB9XG5cbi5tZGMtY2hlY2tib3gtLWFuaW0tdW5jaGVja2VkLWNoZWNrZWQgLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCwgLm1kYy1jaGVja2JveC0tYW5pbS11bmNoZWNrZWQtaW5kZXRlcm1pbmF0ZSAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLCAubWRjLWNoZWNrYm94LS1hbmltLWNoZWNrZWQtdW5jaGVja2VkIC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsIC5tZGMtY2hlY2tib3gtLWFuaW0taW5kZXRlcm1pbmF0ZS11bmNoZWNrZWQgLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMTgwbXM7XG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1jaGVja2VkIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFya19fcGF0aCB7XG4gIGFuaW1hdGlvbjogMTgwbXMgbGluZWFyIDBzIG1kYy1jaGVja2JveC11bmNoZWNrZWQtY2hlY2tlZC1jaGVja21hcmstcGF0aDtcbiAgdHJhbnNpdGlvbjogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1pbmRldGVybWluYXRlIC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gIGFuaW1hdGlvbjogOTBtcyBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LXVuY2hlY2tlZC1pbmRldGVybWluYXRlLW1peGVkbWFyaztcbiAgdHJhbnNpdGlvbjogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLWNoZWNrZWQtdW5jaGVja2VkIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFya19fcGF0aCB7XG4gIGFuaW1hdGlvbjogOTBtcyBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWNoZWNrZWQtdW5jaGVja2VkLWNoZWNrbWFyay1wYXRoO1xuICB0cmFuc2l0aW9uOiBub25lOyB9XG5cbi5tZGMtY2hlY2tib3gtLWFuaW0tY2hlY2tlZC1pbmRldGVybWluYXRlIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayB7XG4gIGFuaW1hdGlvbjogOTBtcyBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWNoZWNrZWQtaW5kZXRlcm1pbmF0ZS1jaGVja21hcms7XG4gIHRyYW5zaXRpb246IG5vbmU7IH1cblxuLm1kYy1jaGVja2JveC0tYW5pbS1jaGVja2VkLWluZGV0ZXJtaW5hdGUgLm1kYy1jaGVja2JveF9fbWl4ZWRtYXJrIHtcbiAgYW5pbWF0aW9uOiA5MG1zIGxpbmVhciAwcyBtZGMtY2hlY2tib3gtY2hlY2tlZC1pbmRldGVybWluYXRlLW1peGVkbWFyaztcbiAgdHJhbnNpdGlvbjogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLWluZGV0ZXJtaW5hdGUtY2hlY2tlZCAubWRjLWNoZWNrYm94X19jaGVja21hcmsge1xuICBhbmltYXRpb246IDUwMG1zIGxpbmVhciAwcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWNoZWNrbWFyaztcbiAgdHJhbnNpdGlvbjogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLWluZGV0ZXJtaW5hdGUtY2hlY2tlZCAubWRjLWNoZWNrYm94X19taXhlZG1hcmsge1xuICBhbmltYXRpb246IDUwMG1zIGxpbmVhciAwcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLW1peGVkbWFyaztcbiAgdHJhbnNpdGlvbjogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94LS1hbmltLWluZGV0ZXJtaW5hdGUtdW5jaGVja2VkIC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gIGFuaW1hdGlvbjogMzAwbXMgbGluZWFyIDBzIG1kYy1jaGVja2JveC1pbmRldGVybWluYXRlLXVuY2hlY2tlZC1taXhlZG1hcms7XG4gIHRyYW5zaXRpb246IG5vbmU7IH1cblxuLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICBsZWZ0OiAxMXB4O1xuICByaWdodDogaW5pdGlhbDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIHRvcDogMTFweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiA0NSU7XG4gIGhlaWdodDogNDUlO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDkwbXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSksIGJvcmRlci1jb2xvciA5MG1zIDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpO1xuICBib3JkZXI6IDJweCBzb2xpZCBjdXJyZW50Q29sb3I7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB3aWxsLWNoYW5nZTogYmFja2dyb3VuZC1jb2xvciwgYm9yZGVyLWNvbG9yOyB9XG4gIFtkaXI9XCJydGxcIl0gLm1kYy1jaGVja2JveCAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLFxuICAubWRjLWNoZWNrYm94W2Rpcj1cInJ0bFwiXSAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBsZWZ0OiBpbml0aWFsO1xuICAgIHJpZ2h0OiAxMXB4OyB9XG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQ6Y2hlY2tlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQ6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciA5MG1zIDBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKSwgYmFja2dyb3VuZC1jb2xvciA5MG1zIDBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTsgfVxuXG4ubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kOjpiZWZvcmUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLCAwKTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSA5MG1zIDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpLCB0cmFuc2Zvcm0gOTBtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBvcGFjaXR5OiAwO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgY29udGVudDogXCJcIjtcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHksIHRyYW5zZm9ybTsgfVxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpmb2N1cyB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQ6OmJlZm9yZSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgyLjc1LCAyLjc1KTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDgwbXMgMG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpLCB0cmFuc2Zvcm0gODBtcyAwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XG4gICAgb3BhY2l0eTogMC4yNjsgfVxuICAubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkIC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQ6OmJlZm9yZSB7XG4gICAgY29udGVudDogbm9uZTsgfVxuXG4ubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIG9wYWNpdHk6IDA7XG4gIGN1cnNvcjogaW5oZXJpdDsgfVxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZCB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XG5cbi5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxODBtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKTtcbiAgb3BhY2l0eTogMDsgfVxuICAubWRjLWNoZWNrYm94LS11cGdyYWRlZCAubWRjLWNoZWNrYm94X19jaGVja21hcmsge1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6Y2hlY2tlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrIHtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDE4MG1zIDBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKSwgdHJhbnNmb3JtIDE4MG1zIDBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcbiAgICBvcGFjaXR5OiAxOyB9XG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmluZGV0ZXJtaW5hdGUgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgOTBtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSwgdHJhbnNmb3JtIDkwbXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSk7XG4gICAgb3BhY2l0eTogMDsgfVxuXG4ubWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGgge1xuICB0cmFuc2l0aW9uOiBzdHJva2UtZGFzaG9mZnNldCAxODBtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKTtcbiAgc3Ryb2tlLXdpZHRoOiAzLjEycHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAyOS43ODMzNDtcbiAgc3Ryb2tlLWRhc2hhcnJheTogMjkuNzgzMzQ7IH1cbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6Y2hlY2tlZCB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoLFxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCAubWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGgge1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwOyB9XG5cbi5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDJweDtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMCkgcm90YXRlKDBkZWcpO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDkwbXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSksIHRyYW5zZm9ybSA5MG1zIDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpO1xuICBvcGFjaXR5OiAwOyB9XG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmNoZWNrZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMSkgcm90YXRlKC00NWRlZyk7IH1cbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQgLm1kYy1jaGVja2JveF9fbWl4ZWRtYXJrIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgxKSByb3RhdGUoMGRlZyk7XG4gICAgb3BhY2l0eTogMTsgfVxuXG4vKipcbiAqIENyZWF0ZXMgYSBydWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHdoZW4gYW4gTURDLVdlYiBjb21wb25lbnQgaXMgd2l0aGluIHRoZSBjb250ZXh0IG9mIGFuIFJUTCBsYXlvdXQuXG4gKlxuICogVXNhZ2UgRXhhbXBsZTpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICBsZWZ0OiAwO1xuICpcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgbGVmdDogYXV0bztcbiAqICAgICByaWdodDogMDtcbiAqICAgfVxuICpcbiAqICAgJl9fYmFyIHtcbiAqICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICogICAgIEBpbmNsdWRlIG1kYy1ydGwoXCIubWRjLWZvb1wiKSB7XG4gKiAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAqICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICogICAgIH1cbiAqICAgfVxuICogfVxuICpcbiAqIC5tZGMtZm9vLS1tb2Qge1xuICogICBwYWRkaW5nLWxlZnQ6IDRweDtcbiAqXG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwge1xuICogICAgIHBhZGRpbmctbGVmdDogYXV0bztcbiAqICAgICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIHdvcmtzIGJ5IGNoZWNraW5nIGZvciBbZGlyPVwicnRsXCJdIG9uIGFuIGFuY2VzdG9yIGVsZW1lbnQuIFdoaWxlIHRoaXMgd2lsbCB3b3JrXG4gKiBpbiBtb3N0IGNhc2VzLCBpdCB3aWxsIGluIHNvbWUgY2FzZXMgbGVhZCB0byBmYWxzZSBuZWdhdGl2ZXMsIGUuZy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8aHRtbCBkaXI9XCJydGxcIj5cbiAqICAgPCEtLSAuLi4gLS0+XG4gKiAgIDxkaXYgZGlyPVwibHRyXCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cIm1kYy1mb29cIj5TdHlsZWQgaW5jb3JyZWN0bHkgYXMgUlRMITwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvaHRtbD5cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBmdXR1cmUsIHNlbGVjdG9ycyBzdWNoIGFzIDpkaXIgKGh0dHA6Ly9tZG4uaW8vOmRpcikgd2lsbCBoZWxwIHVzIG1pdGlnYXRlIHRoaXMuXG4gKi9cbi8qKlxuICogVGFrZXMgYSBiYXNlIGJveC1tb2RlbCBwcm9wZXJ0eSAtIGUuZy4gbWFyZ2luIC8gYm9yZGVyIC8gcGFkZGluZyAtIGFsb25nIHdpdGggYSBkZWZhdWx0XG4gKiBkaXJlY3Rpb24gYW5kIHZhbHVlLCBhbmQgZW1pdHMgcnVsZXMgd2hpY2ggYXBwbHkgdGhlIHZhbHVlIHRvIHRoZVxuICogXCI8YmFzZS1wcm9wZXJ0eT4tPGRlZmF1bHQtZGlyZWN0aW9uPlwiIHByb3BlcnR5IGJ5IGRlZmF1bHQsIGJ1dCBmbGlwcyB0aGUgZGlyZWN0aW9uXG4gKiB3aGVuIHdpdGhpbiBhbiBSVEwgY29udGV4dC5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCk7XG4gKiB9XG4gKiBgYGBcbiAqIGlzIGVxdWl2YWxlbnQgdG86XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBtYXJnaW4tbGVmdDogOHB4O1xuICpcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gKiAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICogd2hlcmVhczpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIHJpZ2h0LCA4cHgpO1xuICogfVxuICogYGBgXG4gKiBpcyBlcXVpdmFsZW50IHRvOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gKiAgICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogWW91IGNhbiBhbHNvIHBhc3MgYSA0dGggb3B0aW9uYWwgJHJvb3Qtc2VsZWN0b3IgYXJndW1lbnQgd2hpY2ggd2lsbCBiZSBmb3J3YXJkZWQgdG8gYG1kYy1ydGxgLFxuICogZS5nLiBgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtYm94KG1hcmdpbiwgbGVmdCwgOHB4LCBcIi5tZGMtY29tcG9uZW50XCIpYC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIGFsd2F5cyB6ZXJvIG91dCB0aGUgb3JpZ2luYWwgdmFsdWUgaW4gYW4gUlRMIGNvbnRleHQuIElmIHlvdSdyZVxuICogdHJ5aW5nIHRvIGZsaXAgdGhlIHZhbHVlcywgdXNlIG1kYy1ydGwtcmVmbGV4aXZlLXByb3BlcnR5KCkuXG4gKi9cbi8qKlxuICogVGFrZXMgYSBiYXNlIHByb3BlcnR5IGFuZCBlbWl0cyBydWxlcyB0aGF0IGFzc2lnbiA8YmFzZS1wcm9wZXJ0eT4tbGVmdCB0byA8bGVmdC12YWx1ZT4gYW5kXG4gKiA8YmFzZS1wcm9wZXJ0eT4tcmlnaHQgdG8gPHJpZ2h0LXZhbHVlPiBpbiBhIExUUiBjb250ZXh0LCBhbmQgdmljZSB2ZXJzYSBpbiBhIFJUTCBjb250ZXh0LlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eShtYXJnaW4sIGF1dG8sIDEycHgpO1xuICogfVxuICogYGBgXG4gKiBpcyBlcXVpdmFsZW50IHRvOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gKiAgIG1hcmdpbi1yaWdodDogMTJweDtcbiAqXG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwge1xuICogICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICogICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQSA0dGggb3B0aW9uYWwgJHJvb3Qtc2VsZWN0b3IgYXJndW1lbnQgY2FuIGJlIGdpdmVuLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgbWRjLXJ0bGAuXG4gKi9cbi8qKlxuICogVGFrZXMgYW4gYXJndW1lbnQgc3BlY2lmeWluZyBhIGhvcml6b250YWwgcG9zaXRpb24gcHJvcGVydHkgKGVpdGhlciBcImxlZnRcIiBvciBcInJpZ2h0XCIpIGFzIHdlbGxcbiAqIGFzIGEgdmFsdWUsIGFuZCBhcHBsaWVzIHRoYXQgdmFsdWUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiBhIExUUiBjb250ZXh0LCBhbmQgZmxpcHMgaXQgaW4gYVxuICogUlRMIGNvbnRleHQuIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtcG9zaXRpb24obGVmdCwgMCk7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqIH1cbiAqIGBgYFxuICogaXMgZXF1aXZhbGVudCB0bzpcbiAqXG4gKiBgYGBzY3NzXG4gKiAgLm1kYy1mb28ge1xuICogICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICAgbGVmdDogMDtcbiAqICAgIHJpZ2h0OiBpbml0aWFsO1xuICpcbiAqICAgIEBpbmNsdWRlIG1kYy1ydGwge1xuICogICAgICByaWdodDogMDtcbiAqICAgICAgbGVmdDogaW5pdGlhbDtcbiAqICAgIH1cbiAqICB9XG4gKiBgYGBcbiAqIEFuIG9wdGlvbmFsIHRoaXJkICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IG1heSBhbHNvIGJlIGdpdmVuLCB3aGljaCBpcyBwYXNzZWQgdG8gYG1kYy1ydGxgLlxuICovXG4vKiBUT0RPKHNnb21lcyk6IEZpZ3VyZSBvdXQgd2hhdCB0byBkbyBhYm91dCBkZXNrdG9wIGZvbnQgc2l6ZXMuICovXG4vKiBUT0RPKHNnb21lcyk6IEZpZ3VyZSBvdXQgd2hhdCB0byBkbyBhYm91dCBpMThuIGFuZCBpMThuIGZvbnQgc2l6ZXMuICovXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1tYXgtdHlwZSAqL1xuLm1kYy1mb3JtLWZpZWxkIHtcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgc2Fucy1zZXJpZjtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxldHRlci1zcGFjaW5nOiAwLjA0ZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjI1cmVtO1xuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XG4gIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xuICAvKiBAYWx0ZXJuYXRlICovXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xuICBjb2xvcjogdmFyKC0tbWRjLXRoZW1lLXRleHQtcHJpbWFyeS1vbi1saWdodCwgcmdiYSgwLCAwLCAwLCAwLjg3KSk7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XG4gIC5tZGMtZm9ybS1maWVsZC0tdGhlbWUtZGFyayxcbiAgLm1kYy10aGVtZS0tZGFyayAubWRjLWZvcm0tZmllbGQge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBjb2xvcjogd2hpdGU7XG4gICAgY29sb3I6IHZhcigtLW1kYy10aGVtZS10ZXh0LXByaW1hcnktb24tZGFyaywgd2hpdGUpOyB9XG4gIC5tZGMtZm9ybS1maWVsZCA+IGxhYmVsIHtcbiAgICBvcmRlcjogMDtcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgcGFkZGluZy1sZWZ0OiA0cHg7IH1cbiAgW2Rpcj1cInJ0bFwiXSAubWRjLWZvcm0tZmllbGQgPiBsYWJlbCwgLm1kYy1mb3JtLWZpZWxkW2Rpcj1cInJ0bFwiXSA+IGxhYmVsIHtcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBwYWRkaW5nLXJpZ2h0OiA0cHg7IH1cblxuLm1kYy1mb3JtLWZpZWxkLS1hbGlnbi1lbmQgPiBsYWJlbCB7XG4gIG9yZGVyOiAtMTtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIHBhZGRpbmctcmlnaHQ6IDRweDsgfVxuXG5bZGlyPVwicnRsXCJdIC5tZGMtZm9ybS1maWVsZC0tYWxpZ24tZW5kID4gbGFiZWwsIC5tZGMtZm9ybS1maWVsZC0tYWxpZ24tZW5kW2Rpcj1cInJ0bFwiXSA+IGxhYmVsIHtcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBwYWRkaW5nLWxlZnQ6IDRweDsgfVxuXG4vKiBzdHlsZWxpbnQtZW5hYmxlIHNlbGVjdG9yLW1heC10eXBlICovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC0xMDBcIjtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0xpZ2h0L011c2VvU2Fuc0xpZ2h0LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0xpZ2h0L011c2VvU2Fuc0xpZ2h0LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0xpZ2h0L011c2VvU2Fuc0xpZ2h0LnR0ZlwiKSBmb3JtYXQoXCJ0dGZcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQuc3ZnI011c2VvU2Fuc0N5cmwtMTAwXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogMzAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTMwMFwiO1xuICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zUmVndWxhci9NdXNlb1NhbnNSZWd1bGFyLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNSZWd1bGFyL011c2VvU2Fuc1JlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci50dGZcIikgZm9ybWF0KFwidHRmXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci5zdmcjTXVzZW9TYW5zQ3lybC0zMDBcIikgZm9ybWF0KFwic3ZnXCIpO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtNTAwXCI7XG4gIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc01lZGl1bS9NdXNlb1NhbnNNZWRpdW0uZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc01lZGl1bS9NdXNlb1NhbnNNZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc01lZGl1bS9NdXNlb1NhbnNNZWRpdW0udHRmXCIpIGZvcm1hdChcInR0ZlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLnN2ZyNNdXNlb1NhbnNDeXJsLTUwMFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDMwMDsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC03MDBcIjtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JvbGQvTXVzZW9TYW5zQm9sZC5lb3RcIik7XG4gIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCb2xkL011c2VvU2Fuc0JvbGQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCb2xkL011c2VvU2Fuc0JvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCb2xkL011c2VvU2Fuc0JvbGQudHRmXCIpIGZvcm1hdChcInR0ZlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCb2xkL011c2VvU2Fuc0JvbGQuc3ZnI011c2VvU2Fuc0N5cmwtNzAwXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogZGVtaTsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC05MDBcIjtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQmxhY2svTXVzZW9TYW5zQmxhY2sud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQmxhY2svTXVzZW9TYW5zQmxhY2sud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLnR0ZlwiKSBmb3JtYXQoXCJ0dGZcIiksIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQmxhY2svTXVzZW9TYW5zQmxhY2suc3ZnI011c2VvU2Fuc0N5cmwtOTAwXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNzAwOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJpY29uc1wiO1xuICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMuZW90XCIpO1xuICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMudHRmXCIpIGZvcm1hdChcInR0ZlwiKSwgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy5zdmcjaWNvbnNcIikgZm9ybWF0KFwic3ZnXCIpO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cblxuKiB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG5odG1sLCBib2R5IHtcbiAgaGVpZ2h0OiAxMDAlO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7IH1cblxuYm9keSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOyB9XG5cbmJ1dHRvbiB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgb3V0bGluZTogbm9uZTsgfVxuXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cblxubGkge1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuaW5wdXQge1xuICBvdXRsaW5lOiBub25lICFpbXBvcnRhbnQ7XG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgYm9yZGVyLXJhZGl1czogMHB4O1xuICBib3JkZXI6IG5vbmU7IH1cblxudGV4dGFyZWEge1xuICBib3JkZXI6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBvdXRsaW5lOiBub25lO1xuICByZXNpemU6IG5vbmU7XG4gIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTtcbiAgLW1vei1ib3gtc2hhZG93OiBub25lO1xuICBib3gtc2hhZG93OiBub25lOyB9XG5cbi5idXR0b24ge1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTcwMFwiOyB9XG5cbi5tYWluIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDMwMG1zIGVhc2Utb3V0O1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtOyB9XG5cbi5jbGVhcmZpeCB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMDtcbiAgY29udGVudDogXCIgXCI7XG4gIGNsZWFyOiBib3RoO1xuICBoZWlnaHQ6IDA7IH1cblxuLmFjaWQtZ3JlZW4ge1xuICBjb2xvcjogIzAwZTg3MTsgfVxuXG4uY29udGVudC1hcmVhIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtYXJnaW46IDAgYXV0bztcbiAgd2lkdGg6IDMyMHB4OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkgYW5kIChtYXgtd2lkdGg6IDYwLjYxNWVtKSB7XG4gICAgLmNvbnRlbnQtYXJlYSB7XG4gICAgICB3aWR0aDogNzUwcHg7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAuNjI1ZW0pIGFuZCAobWF4LXdpZHRoOiA3My4xMTVlbSkge1xuICAgIC5jb250ZW50LWFyZWEge1xuICAgICAgd2lkdGg6IDk3MHB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDczLjEyNWVtKSB7XG4gICAgLmNvbnRlbnQtYXJlYSB7XG4gICAgICB3aWR0aDogMTE3MHB4OyB9IH1cblxuLmNvbnRlbnQtYXJlYV9mbGV4IHtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDBweCAxNXB4IDBweCAxNXB4OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkgYW5kIChtYXgtd2lkdGg6IDYwLjYxNWVtKSB7XG4gICAgLmNvbnRlbnQtYXJlYV9mbGV4IHtcbiAgICAgIHdpZHRoOiA3NTBweDsgfSB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MC42MjVlbSkgYW5kIChtYXgtd2lkdGg6IDczLjExNWVtKSB7XG4gICAgLmNvbnRlbnQtYXJlYV9mbGV4IHtcbiAgICAgIHdpZHRoOiA5NzBweDsgfSB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3My4xMjVlbSkge1xuICAgIC5jb250ZW50LWFyZWFfZmxleCB7XG4gICAgICB3aWR0aDogMTE3MHB4OyB9IH1cblxuLnBhZ2UtY29udGVudC13cmFwcGVyIHtcbiAgbWFyZ2luLWJvdHRvbTogLTM3NHB4O1xuICBtaW4taGVpZ2h0OiAxMDAlO1xuICBtaW4td2lkdGg6IDMyMHB4OyB9XG4gIC5wYWdlLWNvbnRlbnQtd3JhcHBlcjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgaGVpZ2h0OiA2MDBweDsgfVxuXG4ucGFnZS1mb290ZXIge1xuICBoZWlnaHQ6IDM3NHB4O1xuICBtaW4td2lkdGg6IDMyMHB4OyB9XG5cbmJvZHkge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGNvbG9yOiAjMWMxYzFjO1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTUwMFwiOyB9XG5cbi50aXRsZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAwcHggMHB4IDE1cHggMHB4O1xuICBmb250LXNpemU6IDEuNDRyZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjZWVlO1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTcwMFwiOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkge1xuICAgIC50aXRsZSB7XG4gICAgICBmb250LXNpemU6IDEuNzI4cmVtOyB9IH1cblxuLmJ1dHRvbiB7XG4gIGZvbnQtZmFtaWx5OiBSb2JvdG8sIHNhbnMtc2VyaWY7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICBmb250LXNpemU6IDAuODc1cmVtO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsZXR0ZXItc3BhY2luZzogMC4wNGVtO1xuICBsaW5lLWhlaWdodDogMi4yNXJlbTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAtLW1kYy1yaXBwbGUtZmctc2l6ZTogMDtcbiAgLS1tZGMtcmlwcGxlLWxlZnQ6IDA7XG4gIC0tbWRjLXJpcHBsZS10b3A6IDA7XG4gIC0tbWRjLXJpcHBsZS1mZy1zY2FsZTogMTtcbiAgLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6IDA7XG4gIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQ6IDA7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtaW4td2lkdGg6IDY0cHg7XG4gIGhlaWdodDogMzZweDtcbiAgcGFkZGluZzogMCAxNnB4O1xuICBib3JkZXI6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTUwMFwiOyB9XG4gIC5idXR0b246OmJlZm9yZSwgLmJ1dHRvbjo6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGxpbmVhcjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY29udGVudDogXCJcIjsgfVxuICAuYnV0dG9uOjpiZWZvcmUsIC5idXR0b246OmFmdGVyIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gMTAwJSk7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICB3aWR0aDogMjAwJTtcbiAgICBoZWlnaHQ6IDIwMCU7IH1cbiAgLmJ1dHRvbi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjpiZWZvcmUge1xuICAgIHRvcDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDEwMCUpO1xuICAgIHdpZHRoOiAyMDAlO1xuICAgIGhlaWdodDogMjAwJTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDApKTsgfVxuICAuYnV0dG9uLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtIDUwJSkpO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgY2FsYyg1MCUgLSA1MCUpKTtcbiAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKTtcbiAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7IH1cbiAgLmJ1dHRvbi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsgfVxuICAuYnV0dG9uLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YWZ0ZXIge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIDApO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7IH1cbiAgLmJ1dHRvbjphY3RpdmUge1xuICAgIG91dGxpbmU6IG5vbmU7IH1cbiAgLmJ1dHRvbjpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XG4gIC5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyOiAwOyB9XG4gIC5idXR0b246ZGlzYWJsZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjM4KTtcbiAgICBjb2xvcjogdmFyKC0tbWRjLXRoZW1lLXRleHQtZGlzYWJsZWQtb24tbGlnaHQsIHJnYmEoMCwgMCwgMCwgMC4zOCkpO1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxuICAgIC5tZGMtYnV0dG9uLS10aGVtZS1kYXJrIC5idXR0b246ZGlzYWJsZWQsXG4gICAgLm1kYy10aGVtZS0tZGFyayAuYnV0dG9uOmRpc2FibGVkIHtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gICAgICBjb2xvcjogdmFyKC0tbWRjLXRoZW1lLXRleHQtZGlzYWJsZWQtb24tZGFyaywgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpKTsgfVxuICAuYnV0dG9uOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuICAuYnV0dG9uOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgY29sb3I6ICMzZjUxYjU7XG4gICAgY29sb3I6IHZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjM2Y1MWI1KTsgfVxuICAuYnV0dG9uOjpiZWZvcmUsIC5idXR0b246OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDYzLCA4MSwgMTgxLCAwLjE2KTtcbiAgICBvcGFjaXR5OiAwOyB9XG4gICAgQHN1cHBvcnRzIChiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihncmVlbiBhKDEwJSkpKSB7XG4gICAgICAuYnV0dG9uOjpiZWZvcmUsIC5idXR0b246OmFmdGVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IodmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICMzZjUxYjUpIGEoMTYlKSk7IH0gfVxuICAuYnV0dG9uOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6aG92ZXI6OmJlZm9yZSwgLmJ1dHRvbjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmUsIC5idXR0b246bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVyIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiA4NW1zO1xuICAgIG9wYWNpdHk6IC42OyB9XG4gIC5idXR0b24ubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkOjpiZWZvcmUge1xuICAgIG9wYWNpdHk6IC45OTk5OTsgfVxuICAuYnV0dG9uLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtYWN0aXZlLWZpbGw6OmJlZm9yZSB7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMTIwbXM7XG4gICAgb3BhY2l0eTogMTsgfVxuICAuYnV0dG9uLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmFmdGVyIHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIC5idXR0b24ubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiAzMDBtcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiBmb3J3YXJkcywgODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gZm9yd2FyZHM7IH1cbiAgLmJ1dHRvbi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTsgfVxuXG4uYnV0dG9uX3JhaXNlZDpkaXNhYmxlZCxcbi5idXR0b25fdW5lbGV2YXRlZDpkaXNhYmxlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xMik7XG4gIC8qIEBhbHRlcm5hdGUgKi9cbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zOCk7XG4gIGNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtdGV4dC1kaXNhYmxlZC1vbi1saWdodCwgcmdiYSgwLCAwLCAwLCAwLjM4KSk7IH1cbiAgLm1kYy1idXR0b24tLXRoZW1lLWRhcmsgLmJ1dHRvbl9yYWlzZWQ6ZGlzYWJsZWQsXG4gIC5tZGMtdGhlbWUtLWRhcmsgLmJ1dHRvbl9yYWlzZWQ6ZGlzYWJsZWQsIC5tZGMtYnV0dG9uLS10aGVtZS1kYXJrXG4gIC5idXR0b25fdW5lbGV2YXRlZDpkaXNhYmxlZCxcbiAgLm1kYy10aGVtZS0tZGFya1xuICAuYnV0dG9uX3VuZWxldmF0ZWQ6ZGlzYWJsZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMik7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMzgpO1xuICAgIGNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtdGV4dC1kaXNhYmxlZC1vbi1saWdodCwgcmdiYSgwLCAwLCAwLCAwLjM4KSk7IH1cblxuLmJ1dHRvbl9yYWlzZWQ6bm90KDpkaXNhYmxlZCksXG4uYnV0dG9uX3VuZWxldmF0ZWQ6bm90KDpkaXNhYmxlZCkge1xuICAvKiBAYWx0ZXJuYXRlICovXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjU7IH1cbiAgQHN1cHBvcnRzIG5vdCAoLW1zLWltZS1hbGlnbjogYXV0bykge1xuICAgIC5idXR0b25fcmFpc2VkOm5vdCg6ZGlzYWJsZWQpLFxuICAgIC5idXR0b25fdW5lbGV2YXRlZDpub3QoOmRpc2FibGVkKSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtcHJpbWFyeSwgIzNmNTFiNSk7IH0gfVxuXG4uYnV0dG9uX3JhaXNlZDpub3QoOmRpc2FibGVkKSxcbi5idXR0b25fdW5lbGV2YXRlZDpub3QoOmRpc2FibGVkKSB7XG4gIC8qIEBhbHRlcm5hdGUgKi9cbiAgY29sb3I6IHdoaXRlO1xuICBjb2xvcjogdmFyKC0tbWRjLXRoZW1lLXRleHQtcHJpbWFyeS1vbi1wcmltYXJ5LCB3aGl0ZSk7IH1cblxuLmJ1dHRvbl9yYWlzZWQ6OmJlZm9yZSwgLmJ1dHRvbl9yYWlzZWQ6OmFmdGVyLFxuLmJ1dHRvbl91bmVsZXZhdGVkOjpiZWZvcmUsXG4uYnV0dG9uX3VuZWxldmF0ZWQ6OmFmdGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMyKTtcbiAgb3BhY2l0eTogMDsgfVxuICBAc3VwcG9ydHMgKGJhY2tncm91bmQtY29sb3I6IGNvbG9yKGdyZWVuIGEoMTAlKSkpIHtcbiAgICAuYnV0dG9uX3JhaXNlZDo6YmVmb3JlLCAuYnV0dG9uX3JhaXNlZDo6YWZ0ZXIsXG4gICAgLmJ1dHRvbl91bmVsZXZhdGVkOjpiZWZvcmUsXG4gICAgLmJ1dHRvbl91bmVsZXZhdGVkOjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcih2YXIoLS1tZGMtdGhlbWUtdGV4dC1wcmltYXJ5LW9uLXByaW1hcnksIHdoaXRlKSBhKDMyJSkpOyB9IH1cblxuLmJ1dHRvbl9yYWlzZWQ6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpob3Zlcjo6YmVmb3JlLCAuYnV0dG9uX3JhaXNlZDpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmUsIC5idXR0b25fcmFpc2VkOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlOjphZnRlcixcbi5idXR0b25fdW5lbGV2YXRlZDpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmhvdmVyOjpiZWZvcmUsXG4uYnV0dG9uX3VuZWxldmF0ZWQ6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3JlLFxuLmJ1dHRvbl91bmVsZXZhdGVkOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlOjphZnRlciB7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDg1bXM7XG4gIG9wYWNpdHk6IC42OyB9XG5cbi5idXR0b25fcmFpc2VkLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlLFxuLmJ1dHRvbl91bmVsZXZhdGVkLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlIHtcbiAgb3BhY2l0eTogLjk5OTk5OyB9XG5cbi5idXR0b25fcmFpc2VkLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtYWN0aXZlLWZpbGw6OmJlZm9yZSxcbi5idXR0b25fdW5lbGV2YXRlZC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWFjdGl2ZS1maWxsOjpiZWZvcmUge1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxMjBtcztcbiAgb3BhY2l0eTogMTsgfVxuXG4uYnV0dG9uX3JhaXNlZC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlcixcbi5idXR0b25fdW5lbGV2YXRlZC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gIG9wYWNpdHk6IDA7IH1cblxuLmJ1dHRvbl9yYWlzZWQubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uOjphZnRlcixcbi5idXR0b25fdW5lbGV2YXRlZC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb246OmFmdGVyIHtcbiAgYW5pbWF0aW9uOiAzMDBtcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiBmb3J3YXJkcywgODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gZm9yd2FyZHM7IH1cblxuLmJ1dHRvbl9yYWlzZWQubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1kZWFjdGl2YXRpb246OmFmdGVyLFxuLmJ1dHRvbl91bmVsZXZhdGVkLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uOjphZnRlciB7XG4gIGFuaW1hdGlvbjogODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7IH1cblxuLmJ1dHRvbl9yYWlzZWQge1xuICBib3gtc2hhZG93OiAwcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDI4MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gIHdpbGwtY2hhbmdlOiBib3gtc2hhZG93OyB9XG4gIC5idXR0b25fcmFpc2VkOmhvdmVyLCAuYnV0dG9uX3JhaXNlZDpmb2N1cyB7XG4gICAgYm94LXNoYWRvdzogMHB4IDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCA0cHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDEwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7IH1cbiAgLmJ1dHRvbl9yYWlzZWQ6YWN0aXZlIHtcbiAgICBib3gtc2hhZG93OiAwcHggNXB4IDVweCAtM3B4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDhweCAxMHB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggM3B4IDE0cHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xMik7IH1cbiAgLmJ1dHRvbl9yYWlzZWQ6ZGlzYWJsZWQge1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCAwcHggMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMHB4IDBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTsgfVxuXG4uYnV0dG9uX3N0cm9rZWQge1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICBwYWRkaW5nLXJpZ2h0OiAxNHB4O1xuICBwYWRkaW5nLWxlZnQ6IDE0cHg7XG4gIGJvcmRlci13aWR0aDogMnB4O1xuICBsaW5lLWhlaWdodDogMzJweDsgfVxuICAuYnV0dG9uX3N0cm9rZWQ6ZGlzYWJsZWQge1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zOCk7XG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtdGV4dC1kaXNhYmxlZC1vbi1saWdodCwgcmdiYSgwLCAwLCAwLCAwLjM4KSk7IH1cbiAgICAubWRjLWJ1dHRvbi0tdGhlbWUtZGFyayAuYnV0dG9uX3N0cm9rZWQ6ZGlzYWJsZWQsXG4gICAgLm1kYy10aGVtZS0tZGFyayAuYnV0dG9uX3N0cm9rZWQ6ZGlzYWJsZWQge1xuICAgICAgLyogQGFsdGVybmF0ZSAqL1xuICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gICAgICBib3JkZXItY29sb3I6IHZhcigtLW1kYy10aGVtZS10ZXh0LWRpc2FibGVkLW9uLWRhcmssIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSk7IH1cbiAgLmJ1dHRvbl9zdHJva2VkLm1kYy1idXR0b24tLWRlbnNlIHtcbiAgICBsaW5lLWhlaWdodDogMjdweDsgfVxuICAuYnV0dG9uX3N0cm9rZWQubWRjLWJ1dHRvbi0tY29tcGFjdCB7XG4gICAgcGFkZGluZy1yaWdodDogNnB4O1xuICAgIHBhZGRpbmctbGVmdDogNnB4OyB9XG4gIC5idXR0b25fc3Ryb2tlZDpub3QoOmRpc2FibGVkKSB7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGJvcmRlci1jb2xvcjogIzNmNTFiNTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjM2Y1MWI1KTsgfVxuXG4uYnV0dG9uX2NvbXBhY3Qge1xuICBwYWRkaW5nOiAwIDhweDsgfVxuXG4uYnV0dG9uX2RlbnNlIHtcbiAgaGVpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IC44MTI1cmVtO1xuICBsaW5lLWhlaWdodDogMzJweDsgfVxuXG4uYnV0dG9uX3JvdW5kIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGhlaWdodDogNDRweDtcbiAgd2lkdGg6IDQ0cHg7XG4gIGZvbnQtc2l6ZTogMjJweDtcbiAgY29sb3I6ICMxYzFjMWM7XG4gIGJvcmRlci1yYWRpdXM6IDIycHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgLS1tZGMtcmlwcGxlLWZnLXNpemU6IDA7XG4gIC0tbWRjLXJpcHBsZS1sZWZ0OiAwO1xuICAtLW1kYy1yaXBwbGUtdG9wOiAwO1xuICAtLW1kYy1yaXBwbGUtZmctc2NhbGU6IDE7XG4gIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kOiAwO1xuICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0OiAwO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG4gIC5idXR0b25fcm91bmQ6OmJlZm9yZSwgLmJ1dHRvbl9yb3VuZDo6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGxpbmVhcjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY29udGVudDogXCJcIjsgfVxuICAuYnV0dG9uX3JvdW5kOjpiZWZvcmUsIC5idXR0b25fcm91bmQ6OmFmdGVyIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gMTAwJSk7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICB3aWR0aDogMjAwJTtcbiAgICBoZWlnaHQ6IDIwMCU7IH1cbiAgLmJ1dHRvbl9yb3VuZC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjpiZWZvcmUge1xuICAgIHRvcDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDEwMCUpO1xuICAgIHdpZHRoOiAyMDAlO1xuICAgIGhlaWdodDogMjAwJTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDApKTsgfVxuICAuYnV0dG9uX3JvdW5kLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtIDUwJSkpO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgY2FsYyg1MCUgLSA1MCUpKTtcbiAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKTtcbiAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7IH1cbiAgLmJ1dHRvbl9yb3VuZC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsgfVxuICAuYnV0dG9uX3JvdW5kLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YWZ0ZXIge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIDApO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7IH1cbiAgLmJ1dHRvbl9yb3VuZDpub3QoOmRpc2FibGVkKSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgLmJ1dHRvbl9yb3VuZDo6YmVmb3JlLCAuYnV0dG9uX3JvdW5kOjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgLmJ1dHRvbl9yb3VuZDpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmhvdmVyOjpiZWZvcmUsIC5idXR0b25fcm91bmQ6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1czo6YmVmb3JlLCAuYnV0dG9uX3JvdW5kOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlOjphZnRlciB7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogODVtcztcbiAgICBvcGFjaXR5OiAuNjsgfVxuICAuYnV0dG9uX3JvdW5kLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlIHtcbiAgICBvcGFjaXR5OiAuOTk5OTk7IH1cbiAgLmJ1dHRvbl9yb3VuZC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWFjdGl2ZS1maWxsOjpiZWZvcmUge1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDEyMG1zO1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgLmJ1dHRvbl9yb3VuZC5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgb3BhY2l0eTogMDsgfVxuICAuYnV0dG9uX3JvdW5kLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogMzAwbXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gZm9yd2FyZHMsIDgzbXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIGZvcndhcmRzOyB9XG4gIC5idXR0b25fcm91bmQubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1kZWFjdGl2YXRpb246OmFmdGVyIHtcbiAgICBhbmltYXRpb246IDgzbXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7IH1cblxuLmJ1dHRvbl9faWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDE4cHg7XG4gIGhlaWdodDogMThweDtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7IH1cbiAgLmJ1dHRvbl9faWNvbjpiZWZvcmUge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7IH1cblxuLmZhYiB7XG4gIC0tbWRjLXJpcHBsZS1mZy1zaXplOiAwO1xuICAtLW1kYy1yaXBwbGUtbGVmdDogMDtcbiAgLS1tZGMtcmlwcGxlLXRvcDogMDtcbiAgLS1tZGMtcmlwcGxlLWZnLXNjYWxlOiAxO1xuICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZDogMDtcbiAgLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydDogMDtcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm94LXNoYWRvdzogMHB4IDNweCA1cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCA2cHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCAxOHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDU2cHg7XG4gIGhlaWdodDogNTZweDtcbiAgcGFkZGluZzogMDtcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyODBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLCBvcGFjaXR5IDE1bXMgbGluZWFyIDMwbXMsIHRyYW5zZm9ybSAyNzBtcyAwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBmaWxsOiBjdXJyZW50Q29sb3I7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICAvKiBAYWx0ZXJuYXRlICovXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gIC8qIEBhbHRlcm5hdGUgKi9cbiAgY29sb3I6IHdoaXRlO1xuICBjb2xvcjogdmFyKC0tbWRjLXRoZW1lLXRleHQtcHJpbWFyeS1vbi1zZWNvbmRhcnksIHdoaXRlKTtcbiAgZm9udC1zaXplOiAyNHB4OyB9XG4gIC5mYWI6OmJlZm9yZSwgLmZhYjo6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGxpbmVhcjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY29udGVudDogXCJcIjsgfVxuICAuZmFiOjpiZWZvcmUsIC5mYWI6OmFmdGVyIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gMTAwJSk7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICB3aWR0aDogMjAwJTtcbiAgICBoZWlnaHQ6IDIwMCU7IH1cbiAgLmZhYi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjpiZWZvcmUge1xuICAgIHRvcDogY2FsYyg1MCUgLSAxMDAlKTtcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIDEwMCUpO1xuICAgIHdpZHRoOiAyMDAlO1xuICAgIGhlaWdodDogMjAwJTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDApKTsgfVxuICAuZmFiLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtIDUwJSkpO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgY2FsYyg1MCUgLSA1MCUpKTtcbiAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKTtcbiAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7IH1cbiAgLmZhYi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgMTAwJSk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsgfVxuICAuZmFiLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YWZ0ZXIge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIDApO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7IH1cbiAgLmZhYjpob3ZlciwgLmZhYjpmb2N1cyB7XG4gICAgYm94LXNoYWRvdzogMHB4IDVweCA1cHggLTNweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCA4cHggMTBweCAxcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDNweCAxNHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTIpOyB9XG4gIC5mYWI6YWN0aXZlIHtcbiAgICBib3gtc2hhZG93OiAwcHggN3B4IDhweCAtNHB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDEycHggMTdweCAycHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDVweCAyMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMTIpOyB9XG4gIC5mYWI6YWN0aXZlLCAuZmFiOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lOyB9XG4gIC5mYWI6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxuICAuZmFiOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJvcmRlcjogMDsgfVxuICAuZmFiID4gc3ZnIHtcbiAgICB3aWR0aDogMTAwJTsgfVxuICBAc3VwcG9ydHMgbm90ICgtbXMtaW1lLWFsaWduOiBhdXRvKSB7XG4gICAgLmZhYiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZGMtdGhlbWUtc2Vjb25kYXJ5LCAjZmY0MDgxKTsgfSB9XG4gIC5mYWI6OmJlZm9yZSwgLmZhYjo6YWZ0ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNik7XG4gICAgb3BhY2l0eTogMDsgfVxuICAgIEBzdXBwb3J0cyAoYmFja2dyb3VuZC1jb2xvcjogY29sb3IoZ3JlZW4gYSgxMCUpKSkge1xuICAgICAgLmZhYjo6YmVmb3JlLCAuZmFiOjphZnRlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHZhcigtLW1kYy10aGVtZS10ZXh0LXByaW1hcnktb24tc2Vjb25kYXJ5LCB3aGl0ZSkgYSgxNiUpKTsgfSB9XG4gIC5mYWI6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpob3Zlcjo6YmVmb3JlLCAuZmFiOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZSwgLmZhYjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXIge1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDg1bXM7XG4gICAgb3BhY2l0eTogLjY7IH1cbiAgLmZhYi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSB7XG4gICAgb3BhY2l0eTogLjk5OTk5OyB9XG4gIC5mYWIubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1hY3RpdmUtZmlsbDo6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxMjBtcztcbiAgICBvcGFjaXR5OiAxOyB9XG4gIC5mYWIubWRjLXJpcHBsZS11cGdyYWRlZDo6YWZ0ZXIge1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgLmZhYi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb246OmFmdGVyIHtcbiAgICBhbmltYXRpb246IDMwMG1zIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIGZvcndhcmRzLCA4M21zIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiBmb3J3YXJkczsgfVxuICAuZmFiLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiA4M21zIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQ7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpOyB9XG4gIC5mYWI6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKSB7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMTgpOyB9XG5cbi5mYWJfX2ljb24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxODBtcyA5MG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtOyB9XG5cbi5mYWJfbWluaSB7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZvbnQtc2l6ZTogMjBweCAhaW1wb3J0YW50OyB9XG5cbi5pY29uOmJlZm9yZSB7XG4gIGZvbnQtZmFtaWx5OiAnaWNvbnMnOyB9XG5cbi5pY29uX2hlYXJ0OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi7qCBXCI7IH1cblxuLmljb25faGVhcnQtZW1wdHk6YmVmb3JlIHtcbiAgY29udGVudDogXCLuoIJcIjsgfVxuXG4uaWNvbl9tZW51OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi746UXCI7IH1cblxuLmljb25fbGlzdDpiZWZvcmUge1xuICBjb250ZW50OiBcIu6ghlwiOyB9XG5cbi5pY29uX2NhcnQ6YmVmb3JlIHtcbiAgY29udGVudDogXCLuoI9cIjsgfVxuXG4uaWNvbl9jbG9zZTpiZWZvcmUge1xuICBjb250ZW50OiBcIu+Ll1wiOyB9XG5cbi5pY29uX29wdGlvbnM6YmVmb3JlIHtcbiAgY29udGVudDogXCLvjp1cIjsgfVxuXG4uaWNvbl9kaXJlY3Rpb246YmVmb3JlIHtcbiAgY29udGVudDogXCLuoINcIjsgfVxuXG4uaWNvbl9oZWxwLW91dGxpbmU6YmVmb3JlIHtcbiAgY29udGVudDogXCLvkYVcIjsgfVxuXG4uaWNvbl9yb3VibGU6YmVmb3JlIHtcbiAgY29udGVudDogXCLvhZhcIjsgfVxuXG4uaWNvbl9jb250YWN0OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi75CaXCI7IH1cblxuLmljb25fY29udGFjdC1vdXRsaW5lOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi75CZXCI7IH1cblxuLmljb25fc2VhcmNoOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi7qCFXCI7IH1cblxuLmljb25fY2hldnJvbi11cDpiZWZvcmUge1xuICBjb250ZW50OiBcIu+EplwiOyB9XG5cbi5pY29uX2NoZXZyb24tZG93bjpiZWZvcmUge1xuICBjb250ZW50OiBcIu+Eo1wiOyB9XG5cbi5pY29uX2NoZXZyb24tbGVmdDpiZWZvcmUge1xuICBjb250ZW50OiBcIu+EpFwiOyB9XG5cbi5pY29uX2NoZXZyb24tcmlnaHQ6YmVmb3JlIHtcbiAgY29udGVudDogXCLvhKVcIjsgfVxuXG4uaWNvbl9jYXJ0LXBsdXM6YmVmb3JlIHtcbiAgY29udGVudDogXCLviJdcIjsgfVxuXG4ubGlua19maWxsZWQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgY29sb3I6ICMxYzFjMWM7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBjb2xvcjtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xczsgfVxuXG4ubGlua19maWxsZWQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAtMTtcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBiYWNrZ3JvdW5kOiAjMDBlODcxO1xuICB0cmFuc2Zvcm06IHNjYWxlWSgwKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogNTAlO1xuICB0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm07XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsgfVxuXG4ubGlua19maWxsZWQ6aG92ZXI6YmVmb3JlLCAubGlua19maWxsZWQ6Zm9jdXM6YmVmb3JlLCAubGlua19maWxsZWQ6YWN0aXZlOmJlZm9yZSB7XG4gIHRyYW5zZm9ybTogc2NhbGVZKDEpOyB9XG5cbi5pbnB1dCB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDBweCAwcHggMHB4IDE1cHg7IH1cblxuLmJyZWFkY3J1bWJzIHtcbiAgbWFyZ2luOiAyMHB4IDA7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBmb250LXNpemU6IDAuNjk0NDRyZW07IH1cblxuLmJyZWFkY3J1bWJzX19pdGVtcyB7XG4gIHBhZGRpbmc6IDEwcHggMHB4IDEwcHggMHB4O1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbi5icmVhZGNydW1ic19faXRlbSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcGFkZGluZzogMHB4IDJweCAwcHggMnB4OyB9XG5cbi5icmVhZGNydW1ic19fbGluayB7XG4gIGNvbG9yOiAjNGQ0ZDRkOyB9XG5cbi5icmVhZGNydW1ic19fY29udGVudC1hcmVhIHtcbiAgcGFkZGluZzogMHB4IDE1cHggMHB4IDE1cHg7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDIwZW0pIGFuZCAobWF4LXdpZHRoOiA2MC42MTVlbSkge1xuICAgIC5icmVhZGNydW1ic19fY29udGVudC1hcmVhIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmJyZWFkY3J1bWJzX19kZWxpbWV0ZXIge1xuICBwYWRkaW5nOiAwcHggMnB4IDBweCAycHg7IH1cblxuLnJpYmJvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxNXB4O1xuICBsZWZ0OiAtMTJweDtcbiAgcGFkZGluZzogM3B4IDEycHggMnB4IDIzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6IHdoaXRlO1xuICB0cmFuc2Zvcm06IHNrZXdYKC0yNWRlZyk7XG4gIHotaW5kZXg6IDUwO1xuICBib3gtc2hhZG93OiAwcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpOyB9XG5cbi5yaWJib25fX2NvbnRlbnQge1xuICBmb250LXdlaWdodDogNjAwO1xuICB0cmFuc2Zvcm06IHNrZXdYKDI1ZGVnKTtcbiAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC03MDBcIjsgfVxuXG4ucmliYm9uX2dyZWVuIHtcbiAgY29sb3I6ICMxYzFjMWM7XG4gIGJhY2tncm91bmQ6ICMwMGU4NzE7IH1cblxuLmhlYWRlci10b3Age1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogNzhweDtcbiAgYmFja2dyb3VuZDogd2hpdGU7IH1cbiAgLmhlYWRlci10b3AgLmNvbnRlbnQtYXJlYSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG5cbi5oZWFkZXItdG9wX19sb2dvIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTcwcHg7XG4gIGNvbG9yOiAjMWMxYzFjO1xuICBmb250LXNpemU6IDEuNzI4cmVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGxpbmUtaGVpZ2h0OiA3OHB4O1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTcwMFwiOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkge1xuICAgIC5oZWFkZXItdG9wX19sb2dvIHtcbiAgICAgIHdpZHRoOiAyMzVweDtcbiAgICAgIGZvbnQtc2l6ZTogMzRweDsgfSB9XG5cbi5oZWFkZXItdG9wX19uYXYge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiA1MDVweDtcbiAgcGFkZGluZzogMzJweCAxNXB4IDIycHggMTVweDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gIGZvbnQtc2l6ZTogMC44MzMzM3JlbTsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAuNjI1ZW0pIHtcbiAgICAuaGVhZGVyLXRvcF9fbmF2IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzMuMTI1ZW0pIHtcbiAgICAuaGVhZGVyLXRvcF9fbmF2IHtcbiAgICAgIHdpZHRoOiA2ODBweDsgfSB9XG5cbi5oZWFkZXItdG9wX19uYXYtaXRlbSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7IH1cblxuLmhlYWRlci10b3BfX2NvbnRyb2xzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgcmlnaHQ6IDE1cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMjRweDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAuNjI1ZW0pIHtcbiAgICAuaGVhZGVyLXRvcF9fY29udHJvbHMge1xuICAgICAgZGlzcGxheTogbm9uZTsgfSB9XG5cbi5oZWFkZXItdG9wX19jb250cm9sIHtcbiAgaGVpZ2h0OiA0NHB4O1xuICB3aWR0aDogNDRweDtcbiAgYm9yZGVyLXJhZGl1czogMjJweDtcbiAgY29sb3I6ICMxYzFjMWM7IH1cbiAgLmhlYWRlci10b3BfX2NvbnRyb2w6OmJlZm9yZSwgLmhlYWRlci10b3BfX2NvbnRyb2w6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgb3BhY2l0eTogMDsgfVxuICAuaGVhZGVyLXRvcF9fY29udHJvbDpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmhvdmVyOjpiZWZvcmUsIC5oZWFkZXItdG9wX19jb250cm9sOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXM6OmJlZm9yZSwgLmhlYWRlci10b3BfX2NvbnRyb2w6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTphY3RpdmU6OmFmdGVyIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiA4NW1zO1xuICAgIG9wYWNpdHk6IC42OyB9XG4gIC5oZWFkZXItdG9wX19jb250cm9sLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlIHtcbiAgICBvcGFjaXR5OiAuOTk5OTk7IH1cbiAgLmhlYWRlci10b3BfX2NvbnRyb2wubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1hY3RpdmUtZmlsbDo6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxMjBtcztcbiAgICBvcGFjaXR5OiAxOyB9XG4gIC5oZWFkZXItdG9wX19jb250cm9sLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmFmdGVyIHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIC5oZWFkZXItdG9wX19jb250cm9sLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogMzAwbXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gZm9yd2FyZHMsIDgzbXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIGZvcndhcmRzOyB9XG4gIC5oZWFkZXItdG9wX19jb250cm9sLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiA4M21zIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQ7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpOyB9XG5cbi5oZWFkZXItdG9wX19waG9uZXMge1xuICBkaXNwbGF5OiBub25lO1xuICB3aWR0aDogMjAwcHg7XG4gIHBhZGRpbmc6IDE1cHggMHB4IDE1cHggMTVweDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtNzAwXCI7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSB7XG4gICAgLmhlYWRlci10b3BfX3Bob25lcyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfSB9XG5cbi5oZWFkZXItdG9wX19waG9uZS1jYXB0aW9uIHtcbiAgZm9udC1zaXplOiAwLjgzMzMzcmVtOyB9XG5cbi5oZWFkZXItdG9wX19waG9uZSB7XG4gIGZvbnQtc2l6ZTogMS40NHJlbTsgfVxuXG4ubWFpbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuXG4ucGFnZS13cmFwcGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlOyB9XG5cbi5oZWFkZXItYm90dG9tIHtcbiAgaGVpZ2h0OiA0OHB4O1xuICB3aWR0aDogMTAwJTtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyMTIxO1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTcwMFwiO1xuICBib3gtc2hhZG93OiAwcHggMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDRweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogMjBlbSkgYW5kIChtYXgtd2lkdGg6IDYwLjYxNWVtKSB7XG4gICAgLmhlYWRlci1ib3R0b20gLmNvbnRlbnQtYXJlYV9mbGV4IHtcbiAgICAgIHBhZGRpbmc6IDBweDsgfSB9XG5cbi5oZWFkZXItYm90dG9tX19zZWFyY2gtYm94IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiA3cHg7XG4gIHdpZHRoOiAxMDAlOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MC42MjVlbSkgYW5kIChtYXgtd2lkdGg6IDczLjExNWVtKSB7XG4gICAgLmhlYWRlci1ib3R0b21fX3NlYXJjaC1ib3gge1xuICAgICAgd2lkdGg6IDQ2MHB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDczLjEyNWVtKSB7XG4gICAgLmhlYWRlci1ib3R0b21fX3NlYXJjaC1ib3gge1xuICAgICAgd2lkdGg6IDY2MHB4OyB9IH1cblxuLmhlYWRlci1ib3R0b21fX2Ryb3Bkb3duIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgd2lkdGg6IDI0MHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgbGluZS1oZWlnaHQ6IDQ4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogMC4yczsgfVxuICAuaGVhZGVyLWJvdHRvbV9fZHJvcGRvd246aG92ZXIge1xuICAgIGJhY2tncm91bmQ6ICMzMDMxMzE7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSB7XG4gICAgLmhlYWRlci1ib3R0b21fX2Ryb3Bkb3duIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9IH1cblxuLmhlYWRlci1ib3R0b21fX2NhcnQge1xuICBkaXNwbGF5OiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAyNDBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBsaW5lLWhlaWdodDogNDhweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiAwLjJzOyB9XG4gIC5oZWFkZXItYm90dG9tX19jYXJ0OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjMzAzMTMxOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MC42MjVlbSkge1xuICAgIC5oZWFkZXItYm90dG9tX19jYXJ0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9IH1cblxuLmhlYWRlci1ib3R0b21fX2NhcnQtaWNvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIGxlZnQ6IDI1cHg7XG4gIGZvbnQtc2l6ZTogMjBweDsgfVxuXG4uaGVhZGVyLWJvdHRvbV9fc2VhcmNoLWljb24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTJweDtcbiAgcmlnaHQ6IDI1cHg7XG4gIGNvbG9yOiAjMWMxYzFjO1xuICBmb250LXNpemU6IDE4cHg7IH1cblxuLmhlYWRlci1ib3R0b21fX2NhcnQtY291bnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA5cHg7XG4gIHJpZ2h0OiAyNXB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgaGVpZ2h0OiAzMHB4O1xuICB3aWR0aDogMzBweDtcbiAgYm9yZGVyOiAycHggc29saWQgIzQ4ZGFhMTtcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMHB4IDIwcHggMHB4ICM0OGRhYTE7XG4gIC1tb3otYm94LXNoYWRvdzogMHB4IDBweCAyMHB4IDBweCAjNDhkYWExO1xuICBib3gtc2hhZG93OiAwcHggMHB4IDIwcHggMHB4ICM0OGRhYTE7IH1cblxuLmZvb3Rlci1taWRkbGUge1xuICBoZWlnaHQ6IDMyMHB4O1xuICBmb250LXNpemU6IDIuMDczNnJlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5mb290ZXItYm90dG9tIHtcbiAgaGVpZ2h0OiA1NHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbGluZS1oZWlnaHQ6IDU0cHg7XG4gIGZvbnQtc2l6ZTogMC44MzMzM3JlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFjMWMxYzsgfVxuXG4uc2lkZS1tZW51IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgcmlnaHQ6IDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogMTAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHotaW5kZXg6IDEwMDA7IH1cblxuLnNpZGVNZW51X19oaWRkZW4ge1xuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBtcyBlYXNlLW91dCAzMDBtczsgfVxuXG4ubmF2TWVudV92aXNpYmxlIHtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50OyB9XG5cbi5zaWRlLW1lbnVfX292ZXJsYXkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDgwJTtcbiAgbGVmdDogMDtcbiAgaGVpZ2h0OiAxMDAlOyB9XG5cbi5zaWRlLW1lbnVfX2NvbnRlbnQge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tbGVmdDogMTAwJTtcbiAgcGFkZGluZy1yaWdodDogMjAlO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZTVlNWU1O1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZS1vdXQ7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07IH1cblxuLnNpZGUtbWVudV9fYXV0aC1hcmVhIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDc0cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAyMnB4OyB9XG5cbi5zaWRlLW1lbnVfX2Nsb3NlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDE2cHg7XG4gIHJpZ2h0OiAxNnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLnNpZGUtbWVudV9fZGVsaW1ldGVyIHtcbiAgbWFyZ2luOiA0cHggMHB4IDRweCAwcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7IH1cblxuLnNpZGUtbWVudV9faXRlbSB7XG4gIGhlaWdodDogNDhweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcbiAgYm9yZGVyLXJhZGl1czogMHB4ICFpbXBvcnRhbnQ7XG4gIGNvbG9yOiAjMWMxYzFjICFpbXBvcnRhbnQ7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgbGluZS1oZWlnaHQ6IDQ4cHg7XG4gIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtNTAwXCI7IH1cblxuLm5hdi1tZW51IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDEwMCU7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG1heC1oZWlnaHQ6IDEwMCU7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLW91dDtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG4gIHotaW5kZXg6IDIwMDAwOyB9XG5cbi5uYXYtbWVudV9faGVhZGVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGhlaWdodDogNzRweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDEycHggMTZweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5uYXYtbWVudV9fY29udHJvbCB7XG4gIGRpc3BsYXk6IGZsZXg7IH1cblxuLm5hdi1tZW51X19jb250ZW50IHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLm5hdi1tZW51X190aXRsZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbWFyZ2luLXRvcDogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgZm9udC1zaXplOiAxLjJyZW07XG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICBmbGV4LWdyb3c6IDE7IH1cblxuLmNhdGFsb2cge1xuICBkaXNwbGF5OiBmbGV4OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MC42MjVlbSkge1xuICAgIC5jYXRhbG9nIHtcbiAgICAgIHBhZGRpbmc6IDBweCAxNXB4IDBweCAxNXB4OyB9IH1cblxuLmNhdGFsb2dfX2xlZnQtY29udGVudCB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSB7XG4gICAgLmNhdGFsb2dfX2xlZnQtY29udGVudCB7XG4gICAgICBkaXNwbGF5OiBibG9jazsgfSB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MC42MjVlbSkgYW5kIChtYXgtd2lkdGg6IDczLjExNWVtKSB7XG4gICAgLmNhdGFsb2dfX2xlZnQtY29udGVudCB7XG4gICAgICB3aWR0aDogMjEycHg7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzMuMTI1ZW0pIHtcbiAgICAuY2F0YWxvZ19fbGVmdC1jb250ZW50IHtcbiAgICAgIHdpZHRoOiAyNjNweDsgfSB9XG5cbi5jYXRhbG9nX19yaWdodC1jb250ZW50IHtcbiAgd2lkdGg6IDEwMCU7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ2Ljg3NWVtKSB7XG4gICAgLmNhdGFsb2dfX3JpZ2h0LWNvbnRlbnQge1xuICAgICAgcGFkZGluZzogMHB4IDE1cHggMHB4IDE1cHg7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAuNjI1ZW0pIHtcbiAgICAuY2F0YWxvZ19fcmlnaHQtY29udGVudCB7XG4gICAgICB3aWR0aDogNzI4cHg7XG4gICAgICBwYWRkaW5nOiAwcHggMHB4IDBweCAzMHB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDczLjEyNWVtKSB7XG4gICAgLmNhdGFsb2dfX3JpZ2h0LWNvbnRlbnQge1xuICAgICAgd2lkdGg6IDg3NnB4OyB9IH1cblxuLmNhdGFsb2dfX25hdiB7XG4gIHBhZGRpbmc6IDBweCA0cHggMHB4IDRweDtcbiAgbWF4LWhlaWdodDogMzM2cHg7XG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgYmFja2dyb3VuZDogd2hpdGU7IH1cblxuLmNhdGFsb2dfX25hdi1pdGVtIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogNDhweDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZvbnQtc2l6ZTogMC44MzMzM3JlbTtcbiAgY29sb3I6ICMxYzFjMWMgIWltcG9ydGFudDtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIGxpbmUtaGVpZ2h0OiA0OHB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTUwMFwiOyB9XG4gIC5jYXRhbG9nX19uYXYtaXRlbTo6YmVmb3JlLCAuY2F0YWxvZ19fbmF2LWl0ZW06OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDcyLCAyMTgsIDE2MSwgMC4xKTtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIC5jYXRhbG9nX19uYXYtaXRlbTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmhvdmVyOjpiZWZvcmUsIC5jYXRhbG9nX19uYXYtaXRlbTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzOjpiZWZvcmUsIC5jYXRhbG9nX19uYXYtaXRlbTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZTo6YWZ0ZXIge1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDg1bXM7XG4gICAgb3BhY2l0eTogLjY7IH1cbiAgLmNhdGFsb2dfX25hdi1pdGVtLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZDo6YmVmb3JlIHtcbiAgICBvcGFjaXR5OiAuOTk5OTk7IH1cbiAgLmNhdGFsb2dfX25hdi1pdGVtLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtYWN0aXZlLWZpbGw6OmJlZm9yZSB7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMTIwbXM7XG4gICAgb3BhY2l0eTogMTsgfVxuICAuY2F0YWxvZ19fbmF2LWl0ZW0ubWRjLXJpcHBsZS11cGdyYWRlZDo6YWZ0ZXIge1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgLmNhdGFsb2dfX25hdi1pdGVtLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogMzAwbXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gZm9yd2FyZHMsIDgzbXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIGZvcndhcmRzOyB9XG4gIC5jYXRhbG9nX19uYXYtaXRlbS5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbjo6YWZ0ZXIge1xuICAgIGFuaW1hdGlvbjogODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTsgfVxuXG4uZ3JlZW5fc2Nyb2xsYmFyIHtcbiAgb3ZlcmZsb3cteTogc2Nyb2xsOyB9XG4gIC5ncmVlbl9zY3JvbGxiYXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJmMmY3OyB9XG4gIC5ncmVlbl9zY3JvbGxiYXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICB3aWR0aDogMTVweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJmMmY3OyB9XG4gIC5ncmVlbl9zY3JvbGxiYXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICB3aWR0aDogMTVweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDhkYWExOyB9XG5cbi5nYWxsZXJ5X19pdGVtcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9XG5cbi5nYWxsZXJ5X19pdGVtIHtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDsgfVxuXG4uZ2FsbGVyeV9fdG9wIHtcbiAgaGVpZ2h0OiA0NXB4O1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogd2hpdGU7IH1cblxuLmdhbGxlcnlfX3NvcnRpbmcge1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7IH1cblxuLmdhbGxlcnlfX3NvcnRpbmctY2FwdGlvbiB7XG4gIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtNzAwXCI7IH1cblxuLmdhbGxlcnlfX3NvcnRpbmctYnV0dG9uIHtcbiAgbWFyZ2luLWxlZnQ6IDE1cHg7XG4gIGNvbG9yOiAjNGQ0ZDRkO1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLmNhcmQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTUycHg7XG4gIGhlaWdodDogMzIwcHg7XG4gIGNvbG9yOiAjMWMxYzFjO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGJveC1zaGFkb3c7XG4gIGJveC1zaGFkb3c6IDBweCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwcHggMnB4IDJweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7IH1cbiAgLmNhcmQ6aG92ZXIge1xuICAgIHotaW5kZXg6IDUwMDtcbiAgICBib3gtc2hhZG93OiAwcHggM3B4IDVweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDZweCAxMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDE4cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7IH1cbiAgICAuY2FyZDpob3ZlciAuY2FyZF9fcHVyY2hhc2Uge1xuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTsgfVxuICAgIC5jYXJkOmhvdmVyIC5jYXJkX19pbWctb3ZlcmxheS13cmFwcGVyIHtcbiAgICAgIG9wYWNpdHk6IDE7IH1cbiAgICAuY2FyZDpob3ZlciAuY2FyZF9fcmliYm9uIHtcbiAgICAgIG9wYWNpdHk6IDA7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ2Ljg3NWVtKSBhbmQgKG1heC13aWR0aDogNjAuNjE1ZW0pIHtcbiAgICAuY2FyZCB7XG4gICAgICBoZWlnaHQ6IDQyMHB4O1xuICAgICAgd2lkdGg6IDIyNXB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSBhbmQgKG1heC13aWR0aDogNzMuMTE1ZW0pIHtcbiAgICAuY2FyZCB7XG4gICAgICBoZWlnaHQ6IDQyMHB4O1xuICAgICAgd2lkdGg6IDIyMnB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDczLjEyNWVtKSB7XG4gICAgLmNhcmQge1xuICAgICAgaGVpZ2h0OiA0MjBweDtcbiAgICAgIHdpZHRoOiAyNzJweDsgfSB9XG5cbi5jYXJkX19pbWctd3JhcCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTUycHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNDYuODc1ZW0pIGFuZCAobWF4LXdpZHRoOiA2MC42MTVlbSkge1xuICAgIC5jYXJkX19pbWctd3JhcCB7XG4gICAgICBoZWlnaHQ6IDIyNXB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSBhbmQgKG1heC13aWR0aDogNzMuMTE1ZW0pIHtcbiAgICAuY2FyZF9faW1nLXdyYXAge1xuICAgICAgaGVpZ2h0OiAyMjJweDsgfSB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3My4xMjVlbSkge1xuICAgIC5jYXJkX19pbWctd3JhcCB7XG4gICAgICBoZWlnaHQ6IDI3MnB4OyB9IH1cblxuLmNhcmRfX2ltZy1vdmVybGF5LXdyYXBwZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG9wYWNpdHk6IDA7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XG4gIHdpbGwtY2hhbmdlOiBvcGFjaXR5OyB9XG5cbi5jYXJkX19pbWctb3ZlcmxheSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdG9wOiAwcHg7XG4gIGxlZnQ6IDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogIzQ4ZGFhMTtcbiAgb3BhY2l0eTogMC43O1xuICB6LWluZGV4OiA0MDAwOyB9XG5cbi5jYXJkX19pbWcge1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAxMDAlOyB9XG5cbi5jYXJkX19kZXRhaWxzLXdyYXAge1xuICB3aWR0aDogMTAwJTsgfVxuXG4uY2FyZF9fZGV0YWlscyB7XG4gIGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xuICBib3JkZXItY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XG4gIHotaW5kZXg6IDUwMDA7XG4gIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtNzAwXCI7IH1cblxuLmNhcmRfX2NvbnRlbnQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTY4cHg7XG4gIHBhZGRpbmc6IDhweDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNDYuODc1ZW0pIHtcbiAgICAuY2FyZF9fY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAxNHB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ2Ljg3NWVtKSBhbmQgKG1heC13aWR0aDogNjAuNjE1ZW0pIHtcbiAgICAuY2FyZF9fY29udGVudCB7XG4gICAgICBoZWlnaHQ6IDE4NXB4OyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwLjYyNWVtKSBhbmQgKG1heC13aWR0aDogNzMuMTE1ZW0pIHtcbiAgICAuY2FyZF9fY29udGVudCB7XG4gICAgICBoZWlnaHQ6IDE4NXB4OyB9IH1cblxuLmNhcmRfX3ByaWNlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDI0cHg7XG4gIGxlZnQ6IDhweDtcbiAgZm9udC1zaXplOiAxcmVtOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkge1xuICAgIC5jYXJkX19wcmljZSB7XG4gICAgICBsZWZ0OiAxNHB4O1xuICAgICAgZm9udC1zaXplOiAxLjQ0cmVtOyB9IH1cblxuLnByaWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC03MDBcIjsgfVxuICAucHJpY2U6YWZ0ZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmb250LWZhbWlseTogXCJpY29uc1wiO1xuICAgIGNvbnRlbnQ6IFwi74WYXCI7XG4gICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgICBmb250LXNpemU6IDE1cHg7IH1cblxuLmNhcmRfX3RpdGxlIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMC44MzMzM3JlbTtcbiAgdHJhbnNpdGlvbjogMC4yczsgfVxuICAuY2FyZF9fdGl0bGU6aG92ZXIge1xuICAgIGNvbG9yOiAjMzc1N2M1OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0Ni44NzVlbSkge1xuICAgIC5jYXJkX190aXRsZSB7XG4gICAgICBmb250LXNpemU6IDFyZW07IH0gfVxuXG4uY2FyZF9fcHVyY2hhc2Uge1xuICBkaXNwbGF5OiBibG9jaztcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBiYWNrZ3JvdW5kOiAjMDBlODcxO1xuICBib3R0b206IDE2cHg7XG4gIHJpZ2h0OiAxMnB4O1xuICBjb2xvcjogIzFjMWMxYzsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogMjBlbSkgYW5kIChtYXgtd2lkdGg6IDQ2Ljg2NWVtKSB7XG4gICAgLmNhcmRfX3B1cmNoYXNlIHtcbiAgICAgIGhlaWdodDogNDBweDtcbiAgICAgIHdpZHRoOiA0MHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMjBweDsgfSB9XG5cbi5jYXJkX19yaWJib24ge1xuICBvcGFjaXR5OiAxO1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBvcGFjaXR5OyB9XG5cbi5yb3dfX3RpdGxlIHtcbiAgcGFkZGluZzogMjBweCAwcHggMTBweCAwcHg7XG4gIGZvbnQtc2l6ZTogMS40NHJlbTsgfVxuXG4ucm93IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOyB9XG5cbi5jb250ZW50LWFyZWFfY29tcG9uZW50cyB7XG4gIHBhZGRpbmc6IDUwcHggMTVweCA1MHB4IDE1cHg7IH1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXNcIjtcblxuJG1kYy1lbGV2YXRpb24tdW1icmEtY29sb3I6IHJnYmEoYmxhY2ssIC4yKTtcbiRtZGMtZWxldmF0aW9uLXBlbnVtYnJhLWNvbG9yOiByZ2JhKGJsYWNrLCAuMTQpO1xuJG1kYy1lbGV2YXRpb24tYW1iaWVudC1jb2xvcjogcmdiYShibGFjaywgLjEyKTtcblxuJG1kYy1lbGV2YXRpb24tdW1icmEtbWFwOiAoXG4gIDA6IFwiMHB4IDBweCAwcHggMHB4XCIsXG4gIDE6IFwiMHB4IDJweCAxcHggLTFweFwiLFxuICAyOiBcIjBweCAzcHggMXB4IC0ycHhcIixcbiAgMzogXCIwcHggM3B4IDNweCAtMnB4XCIsXG4gIDQ6IFwiMHB4IDJweCA0cHggLTFweFwiLFxuICA1OiBcIjBweCAzcHggNXB4IC0xcHhcIixcbiAgNjogXCIwcHggM3B4IDVweCAtMXB4XCIsXG4gIDc6IFwiMHB4IDRweCA1cHggLTJweFwiLFxuICA4OiBcIjBweCA1cHggNXB4IC0zcHhcIixcbiAgOTogXCIwcHggNXB4IDZweCAtM3B4XCIsXG4gIDEwOiBcIjBweCA2cHggNnB4IC0zcHhcIixcbiAgMTE6IFwiMHB4IDZweCA3cHggLTRweFwiLFxuICAxMjogXCIwcHggN3B4IDhweCAtNHB4XCIsXG4gIDEzOiBcIjBweCA3cHggOHB4IC00cHhcIixcbiAgMTQ6IFwiMHB4IDdweCA5cHggLTRweFwiLFxuICAxNTogXCIwcHggOHB4IDlweCAtNXB4XCIsXG4gIDE2OiBcIjBweCA4cHggMTBweCAtNXB4XCIsXG4gIDE3OiBcIjBweCA4cHggMTFweCAtNXB4XCIsXG4gIDE4OiBcIjBweCA5cHggMTFweCAtNXB4XCIsXG4gIDE5OiBcIjBweCA5cHggMTJweCAtNnB4XCIsXG4gIDIwOiBcIjBweCAxMHB4IDEzcHggLTZweFwiLFxuICAyMTogXCIwcHggMTBweCAxM3B4IC02cHhcIixcbiAgMjI6IFwiMHB4IDEwcHggMTRweCAtNnB4XCIsXG4gIDIzOiBcIjBweCAxMXB4IDE0cHggLTdweFwiLFxuICAyNDogXCIwcHggMTFweCAxNXB4IC03cHhcIlxuKTtcblxuJG1kYy1lbGV2YXRpb24tcGVudW1icmEtbWFwOiAoXG4gIDA6IFwiMHB4IDBweCAwcHggMHB4XCIsXG4gIDE6IFwiMHB4IDFweCAxcHggMHB4XCIsXG4gIDI6IFwiMHB4IDJweCAycHggMHB4XCIsXG4gIDM6IFwiMHB4IDNweCA0cHggMHB4XCIsXG4gIDQ6IFwiMHB4IDRweCA1cHggMHB4XCIsXG4gIDU6IFwiMHB4IDVweCA4cHggMHB4XCIsXG4gIDY6IFwiMHB4IDZweCAxMHB4IDBweFwiLFxuICA3OiBcIjBweCA3cHggMTBweCAxcHhcIixcbiAgODogXCIwcHggOHB4IDEwcHggMXB4XCIsXG4gIDk6IFwiMHB4IDlweCAxMnB4IDFweFwiLFxuICAxMDogXCIwcHggMTBweCAxNHB4IDFweFwiLFxuICAxMTogXCIwcHggMTFweCAxNXB4IDFweFwiLFxuICAxMjogXCIwcHggMTJweCAxN3B4IDJweFwiLFxuICAxMzogXCIwcHggMTNweCAxOXB4IDJweFwiLFxuICAxNDogXCIwcHggMTRweCAyMXB4IDJweFwiLFxuICAxNTogXCIwcHggMTVweCAyMnB4IDJweFwiLFxuICAxNjogXCIwcHggMTZweCAyNHB4IDJweFwiLFxuICAxNzogXCIwcHggMTdweCAyNnB4IDJweFwiLFxuICAxODogXCIwcHggMThweCAyOHB4IDJweFwiLFxuICAxOTogXCIwcHggMTlweCAyOXB4IDJweFwiLFxuICAyMDogXCIwcHggMjBweCAzMXB4IDNweFwiLFxuICAyMTogXCIwcHggMjFweCAzM3B4IDNweFwiLFxuICAyMjogXCIwcHggMjJweCAzNXB4IDNweFwiLFxuICAyMzogXCIwcHggMjNweCAzNnB4IDNweFwiLFxuICAyNDogXCIwcHggMjRweCAzOHB4IDNweFwiXG4pO1xuXG4kbWRjLWVsZXZhdGlvbi1hbWJpZW50LW1hcDogKFxuICAwOiBcIjBweCAwcHggMHB4IDBweFwiLFxuICAxOiBcIjBweCAxcHggM3B4IDBweFwiLFxuICAyOiBcIjBweCAxcHggNXB4IDBweFwiLFxuICAzOiBcIjBweCAxcHggOHB4IDBweFwiLFxuICA0OiBcIjBweCAxcHggMTBweCAwcHhcIixcbiAgNTogXCIwcHggMXB4IDE0cHggMHB4XCIsXG4gIDY6IFwiMHB4IDFweCAxOHB4IDBweFwiLFxuICA3OiBcIjBweCAycHggMTZweCAxcHhcIixcbiAgODogXCIwcHggM3B4IDE0cHggMnB4XCIsXG4gIDk6IFwiMHB4IDNweCAxNnB4IDJweFwiLFxuICAxMDogXCIwcHggNHB4IDE4cHggM3B4XCIsXG4gIDExOiBcIjBweCA0cHggMjBweCAzcHhcIixcbiAgMTI6IFwiMHB4IDVweCAyMnB4IDRweFwiLFxuICAxMzogXCIwcHggNXB4IDI0cHggNHB4XCIsXG4gIDE0OiBcIjBweCA1cHggMjZweCA0cHhcIixcbiAgMTU6IFwiMHB4IDZweCAyOHB4IDVweFwiLFxuICAxNjogXCIwcHggNnB4IDMwcHggNXB4XCIsXG4gIDE3OiBcIjBweCA2cHggMzJweCA1cHhcIixcbiAgMTg6IFwiMHB4IDdweCAzNHB4IDZweFwiLFxuICAxOTogXCIwcHggN3B4IDM2cHggNnB4XCIsXG4gIDIwOiBcIjBweCA4cHggMzhweCA3cHhcIixcbiAgMjE6IFwiMHB4IDhweCA0MHB4IDdweFwiLFxuICAyMjogXCIwcHggOHB4IDQycHggN3B4XCIsXG4gIDIzOiBcIjBweCA5cHggNDRweCA4cHhcIixcbiAgMjQ6IFwiMHB4IDlweCA0NnB4IDhweFwiXG4pO1xuXG4vKipcbiAqIFRoZSBjc3MgcHJvcGVydHkgdXNlZCBmb3IgZWxldmF0aW9uLiBJbiBtb3N0IGNhc2VzIHRoaXMgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLiBJdCBpcyBleHBvc2VkXG4gKiBhcyBhIHZhcmlhYmxlIGZvciBhYnN0cmFjdGlvbiAvIGVhc3kgdXNlIHdoZW4gbmVlZGluZyB0byByZWZlcmVuY2UgdGhlIHByb3BlcnR5IGRpcmVjdGx5LCBmb3JcbiAqIGV4YW1wbGUgaW4gYSBgd2lsbC1jaGFuZ2VgIHJ1bGUuXG4gKi9cbiRtZGMtZWxldmF0aW9uLXByb3BlcnR5OiBib3gtc2hhZG93ICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGR1cmF0aW9uIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4gKi9cbiRtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb246IDI4MG1zICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGVhc2luZyB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuICovXG4kbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogJG1kYy1hbmltYXRpb24tc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbkBpbXBvcnQgXCIuL3ZhcmlhYmxlc1wiO1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGNvcnJlY3QgY3NzIHJ1bGVzIHRvIGFuIGVsZW1lbnQgdG8gZ2l2ZSBpdCB0aGUgZWxldmF0aW9uIHNwZWNpZmllZCBieSAkei12YWx1ZS5cbiAqIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4gKi9cbkBtaXhpbiBtZGMtZWxldmF0aW9uKCR6LXZhbHVlKSB7XG4gIEBpZiB0eXBlLW9mKCR6LXZhbHVlKSAhPSBudW1iZXIgb3Igbm90IHVuaXRsZXNzKCR6LXZhbHVlKSB7XG4gICAgQGVycm9yIFwiJHotdmFsdWUgbXVzdCBiZSBhIHVuaXRsZXNzIG51bWJlclwiO1xuICB9XG5cbiAgQGlmICR6LXZhbHVlIDwgMCBvciAkei12YWx1ZSA+IDI0IHtcbiAgICBAZXJyb3IgXCIkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjRcIjtcbiAgfVxuXG4gICN7JG1kYy1lbGV2YXRpb24tcHJvcGVydHl9OlxuICAgICN7XCIje21hcC1nZXQoJG1kYy1lbGV2YXRpb24tdW1icmEtbWFwLCAkei12YWx1ZSl9ICN7JG1kYy1lbGV2YXRpb24tdW1icmEtY29sb3J9XCJ9LFxuICAgICN7XCIje21hcC1nZXQoJG1kYy1lbGV2YXRpb24tcGVudW1icmEtbWFwLCAkei12YWx1ZSl9ICN7JG1kYy1lbGV2YXRpb24tcGVudW1icmEtY29sb3J9XCJ9LFxuICAgICN7bWFwLWdldCgkbWRjLWVsZXZhdGlvbi1hbWJpZW50LW1hcCwgJHotdmFsdWUpfSAkbWRjLWVsZXZhdGlvbi1hbWJpZW50LWNvbG9yO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgdmFsdWUgZm9yIGEgYHRyYW5zaXRpb25gIHByb3BlcnR5IGZvciBlbGV2YXRpb24uXG4gKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gZGlyZWN0bHkgaXMgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgYSBjb21wb25lbnQgbmVlZHMgdG8gdHJhbnNpdGlvblxuICogbW9yZSB0aGFuIG9uZSBwcm9wZXJ0eS5cbiAqXG4gKiBgYGBzY3NzXG4gKiAuZm9vIHtcbiAqICAgdHJhbnNpdGlvbjogbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXJ1bGUoKSwgb3BhY2l0eSAxMDBtcyBlYXNlO1xuICogICB3aWxsLWNoYW5nZTogJG1kYy1lbGV2YXRpb24tcHJvcGVydHksIG9wYWNpdHk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuQGZ1bmN0aW9uIG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1ydWxlKFxuICAkZHVyYXRpb246ICRtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb24sXG4gICRlYXNpbmc6ICRtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uKSB7XG4gIEByZXR1cm4gI3skbWRjLWVsZXZhdGlvbi1wcm9wZXJ0eX0gI3skZHVyYXRpb259ICN7JGVhc2luZ307XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgbmVlZGVkIHRvIGhhdmUgYW4gZWxlbWVudCB0cmFuc2l0aW9uIGJldHdlZW4gZWxldmF0aW9ucy5cbiAqIFRoaXMgbWl4aW4gc2hvdWxkIGJlIGFwcGxpZWQgdG8gZWxlbWVudHMgd2hvc2UgZWxldmF0aW9uIHZhbHVlcyB3aWxsIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlaXJcbiAqIGNvbnRleHQgKGUuZy4gd2hlbiBhY3RpdmUgb3IgZGlzYWJsZWQpLlxuICovXG4vLyBOT1RFKHRyYXZpc2thdWZtYW4pOiBCb3RoIHRoaXMgbWl4aW4gYW5kIHRoZSBhYm92ZSBmdW5jdGlvbiB1c2UgZGVmYXVsdCBwYXJhbWV0ZXJzIHNvIHRoZXkgY2FuXG4vLyBiZSB1c2VkIGluIHRoZSBzYW1lIHdheSBieSBjbGllbnRzLlxuQG1peGluIG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbihcbiAgJGR1cmF0aW9uOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAkZWFzaW5nOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbikge1xuICB0cmFuc2l0aW9uOiBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tcnVsZSgkZHVyYXRpb24sICRlYXNpbmcpO1xuICB3aWxsLWNoYW5nZTogJG1kYy1lbGV2YXRpb24tcHJvcGVydHk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuLy8gTURDIFJpcHBsZSBrZXlmcmFtZXMgYXJlIHNwbGl0IGludG8gdGhlaXIgb3duIGZpbGUgc28gdGhhdCBfbWl4aW5zLnNjc3MgY2FuIHJlbHkgb24gdGhlbS5cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXCI7XG5cbkBtaXhpbiBtZGMtcmlwcGxlLWtleWZyYW1lc18ge1xuICBAa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIHtcbiAgICBmcm9tIHtcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICRtZGMtYW5pbWF0aW9uLXN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbiAgICAgIC8vIE5PVEU6IEZvciB0aGVzZSBrZXlmcmFtZXMsIHdlIGRvIG5vdCBuZWVkIGN1c3RvbSBwcm9wZXJ0eSBmYWxsYmFja3MgYmVjYXVzZSB0aGV5IGFyZSBvbmx5XG4gICAgICAvLyB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYC5tZGMtcmlwcGxlLXVwZ3JhZGVkYC4gU2luY2UgTURDUmlwcGxlRm91bmRhdGlvbiBjaGVja3MgdG8gZW5zdXJlXG4gICAgICAvLyB0aGF0IGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQgd2l0aGluIHRoZSBicm93c2VyIGJlZm9yZSBhZGRpbmcgdGhpcyBjbGFzcywgd2UgY2FuXG4gICAgICAvLyBzYWZlbHkgdXNlIHRoZW0gd2l0aG91dCBhIGZhbGxiYWNrLlxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQsIDApKSBzY2FsZSgxKTtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XG4gICAgfVxuICB9XG5cbiAgQGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4ge1xuICAgIGZyb20ge1xuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCB7XG4gICAgZnJvbSB7XG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuJG1kYy1hbmltYXRpb24tZGVjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIC4yLCAxKSAhZGVmYXVsdDtcbiRtZGMtYW5pbWF0aW9uLXN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKC40LCAwLCAuMiwgMSkgIWRlZmF1bHQ7XG4kbWRjLWFuaW1hdGlvbi1hY2NlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoLjQsIDAsIDEsIDEpICFkZWZhdWx0O1xuJG1kYy1hbmltYXRpb24tc2hhcnAtY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoLjQsIDAsIC42LCAxKSAhZGVmYXVsdDtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvdGhlbWUvdmFyaWFibGVzXCI7XG5AaW1wb3J0IFwiLi9rZXlmcmFtZXNcIjtcblxuLy8gRW5zdXJlIHRoYXQgc3R5bGVzIG5lZWRlZCBieSBhbnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgYXJlIGVtaXR0ZWQsIGJ1dCBvbmx5IG9uY2UuXG4vLyAoRXZlcnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgaW1wb3J0cyB0aGVzZSBtaXhpbnMsIGJ1dCBkb2Vzbid0IG5lY2Vzc2FyaWx5IGltcG9ydCBtZGMtcmlwcGxlLnNjc3MuKVxuXG4vLyBUaGlzIHZhcmlhYmxlIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuIGV4dGVybmFsbHk7IGl0IHVzZXMgIWRlZmF1bHQgdG8gYXZvaWQgYmVpbmcgcmVzZXRcbi8vIGV2ZXJ5IHRpbWUgdGhpcyBmaWxlIGlzIGltcG9ydGVkLlxuJG1kYy1yaXBwbGUtY29tbW9uLXN0eWxlcy1lbWl0dGVkXzogZmFsc2UgIWRlZmF1bHQ7XG5cbkBpZiBub3QgJG1kYy1yaXBwbGUtY29tbW9uLXN0eWxlcy1lbWl0dGVkXyB7XG4gICRtZGMtcmlwcGxlLWNvbW1vbi1zdHlsZXMtZW1pdHRlZF86IHRydWU7XG5cbiAgQGluY2x1ZGUgbWRjLXJpcHBsZS1rZXlmcmFtZXNfO1xuXG4gIC8vIFN0eWxlcyB1c2VkIHRvIGRldGVjdCBidWdneSBiZWhhdmlvciBvZiBDU1MgY3VzdG9tIHByb3BlcnRpZXMgaW4gRWRnZS5cbiAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMTQ5NTQ0OC9cbiAgLy8gVGhpcyBpcyBpbmNsdWRlZCBpbiBfbWl4aW5zLnNjc3MgcmF0aGVyIHRoYW4gbWRjLXJpcHBsZS5zY3NzIHNvIHRoYXQgaXQgd2lsbCBiZVxuICAvLyBwcmVzZW50IGZvciBvdGhlciBjb21wb25lbnRzIHdoaWNoIHJlbHkgb24gcmlwcGxlIGFzIHdlbGwgYXMgbWRjLXJpcHBsZSBpdHNlbGYuXG4gIC5tZGMtcmlwcGxlLXN1cmZhY2UtLXRlc3QtZWRnZS12YXItYnVnIHtcbiAgICAtLW1kYy1yaXBwbGUtc3VyZmFjZS10ZXN0LWVkZ2UtdmFyOiAxcHggc29saWQgIzAwMDtcblxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgICY6OmJlZm9yZSB7XG4gICAgICBib3JkZXI6IHZhcigtLW1kYy1yaXBwbGUtc3VyZmFjZS10ZXN0LWVkZ2UtdmFyKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1kYy1yaXBwbGUtc3VyZmFjZSgpIHtcbiAgLS1tZGMtcmlwcGxlLWZnLXNpemU6IDA7XG4gIC0tbWRjLXJpcHBsZS1sZWZ0OiAwO1xuICAtLW1kYy1yaXBwbGUtdG9wOiAwO1xuICAtLW1kYy1yaXBwbGUtZmctc2NhbGU6IDE7XG4gIC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kOiAwO1xuICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0OiAwO1xuXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcblxuICAmOjpiZWZvcmUsXG4gICY6OmFmdGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBsaW5lYXI7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gIH1cbn1cblxuQG1peGluIG1kYy1yaXBwbGUtY29sb3IoJGNvbG9yOiBibGFjaywgJG9wYWNpdHk6IC4wNikge1xuICAvLyBPcGFjaXR5IHN0eWxlcyBhcmUgaGVyZSAocmF0aGVyIHRoYW4gaW4gbWRjLXJpcHBsZS1zdXJmYWNlKSB0byBlbnN1cmUgdGhhdCBvcGFjaXR5IGlzIHJlLWluaXRpYWxpemVkIGZvclxuICAvLyBjYXNlcyB3aGVyZSB0aGlzIG1peGluIGlzIHVzZWQgdG8gb3ZlcnJpZGUgYW5vdGhlciBpbmhlcml0ZWQgdXNlIG9mIGl0c2VsZixcbiAgLy8gd2l0aG91dCBuZWVkaW5nIHRvIHJlLWluY2x1ZGUgbWRjLXJpcHBsZS1zdXJmYWNlLlxuICAmOjpiZWZvcmUsXG4gICY6OmFmdGVyIHtcbiAgICBAaW5jbHVkZSBtZGMtcmlwcGxlLWNvbG9yXygkY29sb3IsICRvcGFjaXR5KTtcblxuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICAvLyBOb3RlOiB3aGVuIDphY3RpdmUgaXMgYXBwbGllZCwgOmZvY3VzIGlzIGFscmVhZHkgYXBwbGllZCwgd2hpY2ggd2lsbCBlZmZlY3RpdmVseSBkb3VibGUgdGhlIGVmZmVjdC5cbiAgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpIHtcbiAgICAmOmhvdmVyOjpiZWZvcmUsXG4gICAgJjpmb2N1czo6YmVmb3JlLFxuICAgICY6YWN0aXZlOjphZnRlciB7XG4gICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiA4NW1zO1xuICAgICAgb3BhY2l0eTogLjY7XG4gICAgfVxuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQ6OmJlZm9yZSB7XG4gICAgb3BhY2l0eTogLjk5OTk5O1xuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWFjdGl2ZS1maWxsOjpiZWZvcmUge1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDEyMG1zO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAvLyBGb3JlZ3JvdW5kIHJpcHBsZSBzdHlsZXNcblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmFmdGVyIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb246OmFmdGVyIHtcbiAgICBhbmltYXRpb246IDMwMG1zIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIGZvcndhcmRzLCA4M21zIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiBmb3J3YXJkcztcbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1kZWFjdGl2YXRpb246OmFmdGVyIHtcbiAgICBhbmltYXRpb246IDgzbXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dDtcbiAgICAvLyBSZXRhaW4gdHJhbnNmb3JtIGZyb20gbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gYWN0aXZhdGlvblxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLXJpcHBsZS1yYWRpdXMoJHJhZGl1czogMTAwJSkge1xuICAmOjpiZWZvcmUsXG4gICY6OmFmdGVyIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gI3skcmFkaXVzfSk7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcbiAgICB3aWR0aDogJHJhZGl1cyAqIDI7XG4gICAgaGVpZ2h0OiAkcmFkaXVzICogMjtcbiAgfVxuXG4gIC8vIEJhY2tncm91bmQgcmlwcGxlIHN0eWxlc1xuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IGNhbGMoNTAlIC0gI3skcmFkaXVzfSk7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcbiAgICB3aWR0aDogJHJhZGl1cyAqIDI7XG4gICAgaGVpZ2h0OiAkcmFkaXVzICogMjtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDApKTtcbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkOjpiZWZvcmUge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIGNhbGMoNTAlIC0gI3skcmFkaXVzIC8gMn0pKTtcbiAgICBsZWZ0OiB2YXIoLS1tZGMtcmlwcGxlLWxlZnQsIGNhbGMoNTAlIC0gI3skcmFkaXVzIC8gMn0pKTtcbiAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcbiAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7XG4gIH1cblxuICAvLyBGb3JlZ3JvdW5kIHJpcHBsZSBzdHlsZXNcbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjtcbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkOjphZnRlciB7XG4gICAgdG9wOiB2YXIoLS1tZGMtcmlwcGxlLXRvcCwgMCk7XG4gICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCAwKTtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLXJpcHBsZS1jb2xvcl8oJGNvbG9yLCAkb3BhY2l0eSkge1xuICAvLyBzdHlsZWxpbnQtZGlzYWJsZSBhdC1ydWxlLWVtcHR5LWxpbmUtYmVmb3JlLCBibG9jay1jbG9zaW5nLWJyYWNlLW5ld2xpbmUtYWZ0ZXJcbiAgQGlmIHR5cGUtb2YoJGNvbG9yKSA9PSBcImNvbG9yXCIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJGNvbG9yLCAkb3BhY2l0eSk7XG4gIH0gQGVsc2Uge1xuICAgIC8vIEFzc3VtZSAkY29sb3IgaXMgYSB0aGVtZSBwcm9wZXJ0eSBuYW1lXG4gICAgJHRoZW1lLXZhbHVlOiBtYXAtZ2V0KCRtZGMtdGhlbWUtcHJvcGVydHktdmFsdWVzLCAkY29sb3IpO1xuICAgICRjc3MtdmFyOiB2YXIoLS1tZGMtdGhlbWUtI3skY29sb3J9LCAkdGhlbWUtdmFsdWUpO1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgkdGhlbWUtdmFsdWUsICRvcGFjaXR5KTtcblxuICAgIC8vIFNlZTogaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1jb2xvci8jbW9kaWZ5aW5nLWNvbG9yc1xuICAgIC8vIFdoaWxlIHRoaXMgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkIGFzIG9mIG5vdywgaXQgd2lsbCBiZWdpbiB0byB3b3JrIGJ5IGRlZmF1bHQgYXMgYnJvd3NlcnNcbiAgICAvLyBiZWdpbiB0byBpbXBsZW1lbnQgdGhlIENTUyA0IGNvbG9yIHNwZWMuXG4gICAgQHN1cHBvcnRzIChiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcihncmVlbiBhKDEwJSkpKSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb2xvcigjeyRjc3MtdmFyfSBhKCN7cGVyY2VudGFnZSgkb3BhY2l0eSl9KSk7XG4gICAgfVxuICB9XG4gIC8vIHN0eWxlbGludC1lbmFibGUgYXQtcnVsZS1lbXB0eS1saW5lLWJlZm9yZSwgYmxvY2stY2xvc2luZy1icmFjZS1uZXdsaW5lLWFmdGVyXG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXCI7XG5cbiRtZGMtZWxldmF0aW9uLWJhc2VsaW5lLWNvbG9yOiBibGFjaztcbiRtZGMtZWxldmF0aW9uLXVtYnJhLW9wYWNpdHk6IC4yO1xuJG1kYy1lbGV2YXRpb24tcGVudW1icmEtb3BhY2l0eTogLjE0O1xuJG1kYy1lbGV2YXRpb24tYW1iaWVudC1vcGFjaXR5OiAuMTI7XG5cbiRtZGMtZWxldmF0aW9uLXVtYnJhLW1hcDogKFxuICAwOiBcIjBweCAwcHggMHB4IDBweFwiLFxuICAxOiBcIjBweCAycHggMXB4IC0xcHhcIixcbiAgMjogXCIwcHggM3B4IDFweCAtMnB4XCIsXG4gIDM6IFwiMHB4IDNweCAzcHggLTJweFwiLFxuICA0OiBcIjBweCAycHggNHB4IC0xcHhcIixcbiAgNTogXCIwcHggM3B4IDVweCAtMXB4XCIsXG4gIDY6IFwiMHB4IDNweCA1cHggLTFweFwiLFxuICA3OiBcIjBweCA0cHggNXB4IC0ycHhcIixcbiAgODogXCIwcHggNXB4IDVweCAtM3B4XCIsXG4gIDk6IFwiMHB4IDVweCA2cHggLTNweFwiLFxuICAxMDogXCIwcHggNnB4IDZweCAtM3B4XCIsXG4gIDExOiBcIjBweCA2cHggN3B4IC00cHhcIixcbiAgMTI6IFwiMHB4IDdweCA4cHggLTRweFwiLFxuICAxMzogXCIwcHggN3B4IDhweCAtNHB4XCIsXG4gIDE0OiBcIjBweCA3cHggOXB4IC00cHhcIixcbiAgMTU6IFwiMHB4IDhweCA5cHggLTVweFwiLFxuICAxNjogXCIwcHggOHB4IDEwcHggLTVweFwiLFxuICAxNzogXCIwcHggOHB4IDExcHggLTVweFwiLFxuICAxODogXCIwcHggOXB4IDExcHggLTVweFwiLFxuICAxOTogXCIwcHggOXB4IDEycHggLTZweFwiLFxuICAyMDogXCIwcHggMTBweCAxM3B4IC02cHhcIixcbiAgMjE6IFwiMHB4IDEwcHggMTNweCAtNnB4XCIsXG4gIDIyOiBcIjBweCAxMHB4IDE0cHggLTZweFwiLFxuICAyMzogXCIwcHggMTFweCAxNHB4IC03cHhcIixcbiAgMjQ6IFwiMHB4IDExcHggMTVweCAtN3B4XCJcbik7XG5cbiRtZGMtZWxldmF0aW9uLXBlbnVtYnJhLW1hcDogKFxuICAwOiBcIjBweCAwcHggMHB4IDBweFwiLFxuICAxOiBcIjBweCAxcHggMXB4IDBweFwiLFxuICAyOiBcIjBweCAycHggMnB4IDBweFwiLFxuICAzOiBcIjBweCAzcHggNHB4IDBweFwiLFxuICA0OiBcIjBweCA0cHggNXB4IDBweFwiLFxuICA1OiBcIjBweCA1cHggOHB4IDBweFwiLFxuICA2OiBcIjBweCA2cHggMTBweCAwcHhcIixcbiAgNzogXCIwcHggN3B4IDEwcHggMXB4XCIsXG4gIDg6IFwiMHB4IDhweCAxMHB4IDFweFwiLFxuICA5OiBcIjBweCA5cHggMTJweCAxcHhcIixcbiAgMTA6IFwiMHB4IDEwcHggMTRweCAxcHhcIixcbiAgMTE6IFwiMHB4IDExcHggMTVweCAxcHhcIixcbiAgMTI6IFwiMHB4IDEycHggMTdweCAycHhcIixcbiAgMTM6IFwiMHB4IDEzcHggMTlweCAycHhcIixcbiAgMTQ6IFwiMHB4IDE0cHggMjFweCAycHhcIixcbiAgMTU6IFwiMHB4IDE1cHggMjJweCAycHhcIixcbiAgMTY6IFwiMHB4IDE2cHggMjRweCAycHhcIixcbiAgMTc6IFwiMHB4IDE3cHggMjZweCAycHhcIixcbiAgMTg6IFwiMHB4IDE4cHggMjhweCAycHhcIixcbiAgMTk6IFwiMHB4IDE5cHggMjlweCAycHhcIixcbiAgMjA6IFwiMHB4IDIwcHggMzFweCAzcHhcIixcbiAgMjE6IFwiMHB4IDIxcHggMzNweCAzcHhcIixcbiAgMjI6IFwiMHB4IDIycHggMzVweCAzcHhcIixcbiAgMjM6IFwiMHB4IDIzcHggMzZweCAzcHhcIixcbiAgMjQ6IFwiMHB4IDI0cHggMzhweCAzcHhcIlxuKTtcblxuJG1kYy1lbGV2YXRpb24tYW1iaWVudC1tYXA6IChcbiAgMDogXCIwcHggMHB4IDBweCAwcHhcIixcbiAgMTogXCIwcHggMXB4IDNweCAwcHhcIixcbiAgMjogXCIwcHggMXB4IDVweCAwcHhcIixcbiAgMzogXCIwcHggMXB4IDhweCAwcHhcIixcbiAgNDogXCIwcHggMXB4IDEwcHggMHB4XCIsXG4gIDU6IFwiMHB4IDFweCAxNHB4IDBweFwiLFxuICA2OiBcIjBweCAxcHggMThweCAwcHhcIixcbiAgNzogXCIwcHggMnB4IDE2cHggMXB4XCIsXG4gIDg6IFwiMHB4IDNweCAxNHB4IDJweFwiLFxuICA5OiBcIjBweCAzcHggMTZweCAycHhcIixcbiAgMTA6IFwiMHB4IDRweCAxOHB4IDNweFwiLFxuICAxMTogXCIwcHggNHB4IDIwcHggM3B4XCIsXG4gIDEyOiBcIjBweCA1cHggMjJweCA0cHhcIixcbiAgMTM6IFwiMHB4IDVweCAyNHB4IDRweFwiLFxuICAxNDogXCIwcHggNXB4IDI2cHggNHB4XCIsXG4gIDE1OiBcIjBweCA2cHggMjhweCA1cHhcIixcbiAgMTY6IFwiMHB4IDZweCAzMHB4IDVweFwiLFxuICAxNzogXCIwcHggNnB4IDMycHggNXB4XCIsXG4gIDE4OiBcIjBweCA3cHggMzRweCA2cHhcIixcbiAgMTk6IFwiMHB4IDdweCAzNnB4IDZweFwiLFxuICAyMDogXCIwcHggOHB4IDM4cHggN3B4XCIsXG4gIDIxOiBcIjBweCA4cHggNDBweCA3cHhcIixcbiAgMjI6IFwiMHB4IDhweCA0MnB4IDdweFwiLFxuICAyMzogXCIwcHggOXB4IDQ0cHggOHB4XCIsXG4gIDI0OiBcIjBweCA5cHggNDZweCA4cHhcIlxuKTtcblxuLyoqXG4gKiBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuICogYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4gKiBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuICovXG4kbWRjLWVsZXZhdGlvbi1wcm9wZXJ0eTogYm94LXNoYWRvdyAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBkdXJhdGlvbiB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuICovXG4kbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uOiAyODBtcyAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiAqL1xuJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICRtZGMtYW5pbWF0aW9uLXN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbiAhZGVmYXVsdDtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL3RoZW1lL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIi4vdmFyaWFibGVzXCI7XG5cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBDU1MgcnVsZXMgdG8gYW4gZWxlbWVudCB0byBnaXZlIGl0IHRoZSBlbGV2YXRpb24gc3BlY2lmaWVkIGJ5ICR6LXZhbHVlLlxuICogVGhlICR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNC5cbiAqIElmICRjb2xvciBoYXMgYW4gYWxwaGEgY2hhbm5lbCwgaXQgd2lsbCBiZSBpZ25vcmVkIGFuZCBvdmVycmlkZGVuLiBUbyBpbmNyZWFzZSB0aGUgb3BhY2l0eSBvZiB0aGUgc2hhZG93LCB1c2VcbiAqICRvcGFjaXR5LWJvb3N0LlxuICovXG5AbWl4aW4gbWRjLWVsZXZhdGlvbigkei12YWx1ZSwgJGNvbG9yOiAkbWRjLWVsZXZhdGlvbi1iYXNlbGluZS1jb2xvciwgJG9wYWNpdHktYm9vc3Q6IDApIHtcbiAgQGlmIHR5cGUtb2YoJHotdmFsdWUpICE9IG51bWJlciBvciBub3QgdW5pdGxlc3MoJHotdmFsdWUpIHtcbiAgICBAZXJyb3IgXCIkei12YWx1ZSBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyLCBidXQgcmVjZWl2ZWQgJyN7JHotdmFsdWV9J1wiO1xuICB9XG5cbiAgQGlmICR6LXZhbHVlIDwgMCBvciAkei12YWx1ZSA+IDI0IHtcbiAgICBAZXJyb3IgXCIkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQsIGJ1dCByZWNlaXZlZCAnI3skei12YWx1ZX0nXCI7XG4gIH1cblxuICBAaWYgbWFwLWhhcy1rZXkoJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMsICRjb2xvcikge1xuICAgICRjb2xvcjogbWFwLWdldCgkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcywgJGNvbG9yKTtcbiAgfVxuXG4gIEBpZiB0eXBlLW9mKCRjb2xvcikgIT0gY29sb3Ige1xuICAgIEBlcnJvciBcIiRjb2xvciBtdXN0IGJlIGEgdmFsaWQgY29sb3IsIGJ1dCAnI3skY29sb3J9JyBpcyBvZiB0eXBlICN7dHlwZS1vZigkY29sb3IpfVwiO1xuICB9XG5cbiAgJHVtYnJhLXotdmFsdWU6IG1hcC1nZXQoJG1kYy1lbGV2YXRpb24tdW1icmEtbWFwLCAkei12YWx1ZSk7XG4gICRwZW51bWJyYS16LXZhbHVlOiBtYXAtZ2V0KCRtZGMtZWxldmF0aW9uLXBlbnVtYnJhLW1hcCwgJHotdmFsdWUpO1xuICAkYW1iaWVudC16LXZhbHVlOiBtYXAtZ2V0KCRtZGMtZWxldmF0aW9uLWFtYmllbnQtbWFwLCAkei12YWx1ZSk7XG5cbiAgJHVtYnJhLWNvbG9yOiByZ2JhKCRjb2xvciwgJG1kYy1lbGV2YXRpb24tdW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJHBlbnVtYnJhLWNvbG9yOiByZ2JhKCRjb2xvciwgJG1kYy1lbGV2YXRpb24tcGVudW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJGFtYmllbnQtY29sb3I6IHJnYmEoJGNvbG9yLCAkbWRjLWVsZXZhdGlvbi1hbWJpZW50LW9wYWNpdHkgKyAkb3BhY2l0eS1ib29zdCk7XG5cbiAgYm94LXNoYWRvdzpcbiAgICAje1wiI3skdW1icmEtei12YWx1ZX0gI3skdW1icmEtY29sb3J9XCJ9LFxuICAgICN7XCIjeyRwZW51bWJyYS16LXZhbHVlfSAjeyRwZW51bWJyYS1jb2xvcn1cIn0sXG4gICAgI3skYW1iaWVudC16LXZhbHVlfSAkYW1iaWVudC1jb2xvcjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvciBhIGB0cmFuc2l0aW9uYCBwcm9wZXJ0eSBmb3IgZWxldmF0aW9uLlxuICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIGEgY29tcG9uZW50IG5lZWRzIHRvIHRyYW5zaXRpb25cbiAqIG1vcmUgdGhhbiBvbmUgcHJvcGVydHkuXG4gKlxuICogYGBgc2Nzc1xuICogLmZvbyB7XG4gKiAgIHRyYW5zaXRpb246IG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1ydWxlKCksIG9wYWNpdHkgMTAwbXMgZWFzZTtcbiAqICAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5LCBvcGFjaXR5O1xuICogfVxuICogYGBgXG4gKi9cbkBmdW5jdGlvbiBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tcnVsZShcbiAgJGR1cmF0aW9uOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAkZWFzaW5nOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbikge1xuICBAcmV0dXJuICN7JG1kYy1lbGV2YXRpb24tcHJvcGVydHl9ICN7JGR1cmF0aW9ufSAjeyRlYXNpbmd9O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGNvcnJlY3QgY3NzIHJ1bGVzIG5lZWRlZCB0byBoYXZlIGFuIGVsZW1lbnQgdHJhbnNpdGlvbiBiZXR3ZWVuIGVsZXZhdGlvbnMuXG4gKiBUaGlzIG1peGluIHNob3VsZCBiZSBhcHBsaWVkIHRvIGVsZW1lbnRzIHdob3NlIGVsZXZhdGlvbiB2YWx1ZXMgd2lsbCBjaGFuZ2UgZGVwZW5kaW5nIG9uIHRoZWlyXG4gKiBjb250ZXh0IChlLmcuIHdoZW4gYWN0aXZlIG9yIGRpc2FibGVkKS5cbiAqL1xuLy8gTk9URSh0cmF2aXNrYXVmbWFuKTogQm90aCB0aGlzIG1peGluIGFuZCB0aGUgYWJvdmUgZnVuY3Rpb24gdXNlIGRlZmF1bHQgcGFyYW1ldGVycyBzbyB0aGV5IGNhblxuLy8gYmUgdXNlZCBpbiB0aGUgc2FtZSB3YXkgYnkgY2xpZW50cy5cbkBtaXhpbiBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24oXG4gICRkdXJhdGlvbjogJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1kdXJhdGlvbixcbiAgJGVhc2luZzogJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24pIHtcbiAgdHJhbnNpdGlvbjogbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXJ1bGUoJGR1cmF0aW9uLCAkZWFzaW5nKTtcbiAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5O1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbiRtZGMtdHlwb2dyYXBoeS1mb250LWZhbWlseTogUm9ib3RvLCBzYW5zLXNlcmlmICFkZWZhdWx0O1xuXG4kbWRjLXR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzOiAoXG4gIHRoaW46IDEwMCxcbiAgbGlnaHQ6IDMwMCxcbiAgcmVndWxhcjogNDAwLFxuICBtZWRpdW06IDUwMCxcbiAgYm9sZDogNzAwLFxuICBibGFjazogOTAwXG4pICFkZWZhdWx0O1xuXG4vKiBUT0RPKHNnb21lcyk6IEZpZ3VyZSBvdXQgd2hhdCB0byBkbyBhYm91dCBkZXNrdG9wIGZvbnQgc2l6ZXMuICovXG5cbi8qIFRPRE8oc2dvbWVzKTogRmlndXJlIG91dCB3aGF0IHRvIGRvIGFib3V0IGkxOG4gYW5kIGkxOG4gZm9udCBzaXplcy4gKi9cblxuJG1kYy10eXBvZ3JhcGh5LXN0eWxlczogKFxuICBkaXNwbGF5NDogKFxuICAgIGZvbnQtc2l6ZTogN3JlbSwgLyogMTEyc3AgKi9cbiAgICBsaW5lLWhlaWdodDogN3JlbSwgLyogMTEyc3AgKi9cbiAgICBmb250LXdlaWdodDogbWFwLWdldCgkbWRjLXR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCBsaWdodCksXG4gICAgbGV0dGVyLXNwYWNpbmc6IC0uMDRlbSxcbiAgICBtYXJnaW46IC0xcmVtIDAgMy41cmVtIC0uMDg1ZW0gLyogLTE2c3AgMCA1NnNwIC0uMDg1ZW0gKi8sXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0XG4gICksXG4gIGRpc3BsYXkzOiAoXG4gICAgZm9udC1zaXplOiAzLjVyZW0sIC8qIDU2cHggKi9cbiAgICBsaW5lLWhlaWdodDogMy41cmVtLCAvKiA1NnB4ICovXG4gICAgZm9udC13ZWlnaHQ6IG1hcC1nZXQoJG1kYy10eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgbGV0dGVyLXNwYWNpbmc6IC0uMDJlbSxcbiAgICBtYXJnaW46IC04cHggMCA2NHB4IC0uMDdlbSxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgZGlzcGxheTI6IChcbiAgICBmb250LXNpemU6IDIuODEzcmVtLCAvKiA0NXB4ICovXG4gICAgbGluZS1oZWlnaHQ6IDNyZW0sIC8qIDQ4cHggKi9cbiAgICBmb250LXdlaWdodDogbWFwLWdldCgkbWRjLXR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsLFxuICAgIG1hcmdpbjogLS41cmVtIDAgNHJlbSAtLjA3ZW0gLyogLThzcCAwIDY0c3AgLS4wN2VtICovLFxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdFxuICApLFxuICBkaXNwbGF5MTogKFxuICAgIGZvbnQtc2l6ZTogMi4xMjVyZW0sIC8qIDM0c3AgKi9cbiAgICBsaW5lLWhlaWdodDogMi41cmVtLCAvKiA0MHNwICovXG4gICAgZm9udC13ZWlnaHQ6IG1hcC1nZXQoJG1kYy10eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbCxcbiAgICBtYXJnaW46IC0uNXJlbSAwIDRyZW0gLS4wN2VtIC8qIC04c3AgMCA2NHNwIC0uMDdlbSAqLyxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgaGVhZGxpbmU6IChcbiAgICBmb250LXNpemU6IDEuNXJlbSwgLyogMjRzcCAqL1xuICAgIGxpbmUtaGVpZ2h0OiAycmVtLCAvKiAzMnNwICovXG4gICAgZm9udC13ZWlnaHQ6IG1hcC1nZXQoJG1kYy10eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbCxcbiAgICBtYXJnaW46IC0uNXJlbSAwIDFyZW0gLS4wNmVtIC8qIC04c3AgMCAxNnNwIC0uMDZlbSAqLyxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgdGl0bGU6IChcbiAgICBmb250LXNpemU6IDEuMjVyZW0sIC8qIDIwc3AgKi9cbiAgICBsaW5lLWhlaWdodDogMnJlbSwgLyogMzJzcCAqL1xuICAgIGZvbnQtd2VpZ2h0OiBtYXAtZ2V0KCRtZGMtdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIG1lZGl1bSksXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMmVtLFxuICAgIG1hcmdpbjogLS41cmVtIDAgMXJlbSAtLjA1ZW0gLyogLThzcCAwIDE2c3AgLS4wNWVtICovLFxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdFxuICApLFxuICBzdWJoZWFkaW5nMjogKFxuICAgIGZvbnQtc2l6ZTogMXJlbSwgLyogMTZzcCAqL1xuICAgIGxpbmUtaGVpZ2h0OiAxLjc1cmVtLCAvKiAyOHNwICovXG4gICAgZm9udC13ZWlnaHQ6IG1hcC1nZXQoJG1kYy10eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wNGVtLFxuICAgIG1hcmdpbjogLS41cmVtIDAgMXJlbSAtLjA2ZW0gLyogLThzcCAwIDE2c3AgLS4wNmVtICovLFxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdFxuICApLFxuICBzdWJoZWFkaW5nMTogKFxuICAgIGZvbnQtc2l6ZTogLjkzOHJlbSwgLyogMTVzcCAqL1xuICAgIGxpbmUtaGVpZ2h0OiAxLjVyZW0sIC8qIDI0c3AgKi9cbiAgICBmb250LXdlaWdodDogbWFwLWdldCgkbWRjLXR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW0sXG4gICAgbWFyZ2luOiAtLjMxM3JlbSAwIC44MTNyZW0gLS4wNmVtIC8qIC01c3AgMCAxM3NwIC0uMDZlbSAqLyxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgYm9keTI6IChcbiAgICBmb250LXNpemU6IC44NzVyZW0sIC8qIDE0c3AgKi9cbiAgICBsaW5lLWhlaWdodDogMS41cmVtLCAvKiAyNHNwICovXG4gICAgZm9udC13ZWlnaHQ6IG1hcC1nZXQoJG1kYy10eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKSxcbiAgICBsZXR0ZXItc3BhY2luZzogLjA0ZW0sXG4gICAgbWFyZ2luOiAtLjI1cmVtIDAgLjc1cmVtIDAgLyogLTRzcCAwIDEyc3AgMCAqLyxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgYm9keTE6IChcbiAgICBmb250LXNpemU6IC44NzVyZW0sIC8qIDE0c3AgKi9cbiAgICBsaW5lLWhlaWdodDogMS4yNXJlbSwgLyogMjBzcCAqL1xuICAgIGZvbnQtd2VpZ2h0OiBtYXAtZ2V0KCRtZGMtdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbSxcbiAgICBtYXJnaW46IC0uMjVyZW0gMCAuNzVyZW0gMCAvKiAtNHNwIDAgMTJzcCAwICovLFxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdFxuICApLFxuICBjYXB0aW9uOiAoXG4gICAgZm9udC1zaXplOiAuNzVyZW0sIC8qIDEyc3AgKi9cbiAgICBsaW5lLWhlaWdodDogMS4yNXJlbSwgLyogMjBzcCAqL1xuICAgIGZvbnQtd2VpZ2h0OiBtYXAtZ2V0KCRtZGMtdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDhlbSxcbiAgICBtYXJnaW46IC0uNXJlbSAwIDFyZW0gLS4wNGVtIC8qIC04c3AgMCAxNnNwIC0uMDRlbSAqLyxcbiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXRcbiAgKSxcbiAgYnV0dG9uOiAoXG4gICAgZm9udC1zaXplOiAuODc1cmVtLCAvKiAxNHNwICovXG4gICAgbGluZS1oZWlnaHQ6IDIuMjVyZW0sIC8qIDM2c3AgKi9cbiAgICBmb250LXdlaWdodDogbWFwLWdldCgkbWRjLXR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pLFxuICAgIGxldHRlci1zcGFjaW5nOiAuMDRlbSxcbiAgICBtYXJnaW46IGluaGVyaXQgLyogV2UgZG8gbm90IGhhdmUgYWRqdXN0IG1hcmdpbiBmb3IgYnV0dG9uICovLFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZSxcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlXG4gIClcbikgIWRlZmF1bHQ7XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXCI7XG5cbiRtZGMtZWxldmF0aW9uLWJhc2VsaW5lLWNvbG9yOiBibGFjaztcbiRtZGMtZWxldmF0aW9uLXVtYnJhLW9wYWNpdHk6IC4yO1xuJG1kYy1lbGV2YXRpb24tcGVudW1icmEtb3BhY2l0eTogLjE0O1xuJG1kYy1lbGV2YXRpb24tYW1iaWVudC1vcGFjaXR5OiAuMTI7XG5cbiRtZGMtZWxldmF0aW9uLXVtYnJhLW1hcDogKFxuICAwOiBcIjBweCAwcHggMHB4IDBweFwiLFxuICAxOiBcIjBweCAycHggMXB4IC0xcHhcIixcbiAgMjogXCIwcHggM3B4IDFweCAtMnB4XCIsXG4gIDM6IFwiMHB4IDNweCAzcHggLTJweFwiLFxuICA0OiBcIjBweCAycHggNHB4IC0xcHhcIixcbiAgNTogXCIwcHggM3B4IDVweCAtMXB4XCIsXG4gIDY6IFwiMHB4IDNweCA1cHggLTFweFwiLFxuICA3OiBcIjBweCA0cHggNXB4IC0ycHhcIixcbiAgODogXCIwcHggNXB4IDVweCAtM3B4XCIsXG4gIDk6IFwiMHB4IDVweCA2cHggLTNweFwiLFxuICAxMDogXCIwcHggNnB4IDZweCAtM3B4XCIsXG4gIDExOiBcIjBweCA2cHggN3B4IC00cHhcIixcbiAgMTI6IFwiMHB4IDdweCA4cHggLTRweFwiLFxuICAxMzogXCIwcHggN3B4IDhweCAtNHB4XCIsXG4gIDE0OiBcIjBweCA3cHggOXB4IC00cHhcIixcbiAgMTU6IFwiMHB4IDhweCA5cHggLTVweFwiLFxuICAxNjogXCIwcHggOHB4IDEwcHggLTVweFwiLFxuICAxNzogXCIwcHggOHB4IDExcHggLTVweFwiLFxuICAxODogXCIwcHggOXB4IDExcHggLTVweFwiLFxuICAxOTogXCIwcHggOXB4IDEycHggLTZweFwiLFxuICAyMDogXCIwcHggMTBweCAxM3B4IC02cHhcIixcbiAgMjE6IFwiMHB4IDEwcHggMTNweCAtNnB4XCIsXG4gIDIyOiBcIjBweCAxMHB4IDE0cHggLTZweFwiLFxuICAyMzogXCIwcHggMTFweCAxNHB4IC03cHhcIixcbiAgMjQ6IFwiMHB4IDExcHggMTVweCAtN3B4XCJcbik7XG5cbiRtZGMtZWxldmF0aW9uLXBlbnVtYnJhLW1hcDogKFxuICAwOiBcIjBweCAwcHggMHB4IDBweFwiLFxuICAxOiBcIjBweCAxcHggMXB4IDBweFwiLFxuICAyOiBcIjBweCAycHggMnB4IDBweFwiLFxuICAzOiBcIjBweCAzcHggNHB4IDBweFwiLFxuICA0OiBcIjBweCA0cHggNXB4IDBweFwiLFxuICA1OiBcIjBweCA1cHggOHB4IDBweFwiLFxuICA2OiBcIjBweCA2cHggMTBweCAwcHhcIixcbiAgNzogXCIwcHggN3B4IDEwcHggMXB4XCIsXG4gIDg6IFwiMHB4IDhweCAxMHB4IDFweFwiLFxuICA5OiBcIjBweCA5cHggMTJweCAxcHhcIixcbiAgMTA6IFwiMHB4IDEwcHggMTRweCAxcHhcIixcbiAgMTE6IFwiMHB4IDExcHggMTVweCAxcHhcIixcbiAgMTI6IFwiMHB4IDEycHggMTdweCAycHhcIixcbiAgMTM6IFwiMHB4IDEzcHggMTlweCAycHhcIixcbiAgMTQ6IFwiMHB4IDE0cHggMjFweCAycHhcIixcbiAgMTU6IFwiMHB4IDE1cHggMjJweCAycHhcIixcbiAgMTY6IFwiMHB4IDE2cHggMjRweCAycHhcIixcbiAgMTc6IFwiMHB4IDE3cHggMjZweCAycHhcIixcbiAgMTg6IFwiMHB4IDE4cHggMjhweCAycHhcIixcbiAgMTk6IFwiMHB4IDE5cHggMjlweCAycHhcIixcbiAgMjA6IFwiMHB4IDIwcHggMzFweCAzcHhcIixcbiAgMjE6IFwiMHB4IDIxcHggMzNweCAzcHhcIixcbiAgMjI6IFwiMHB4IDIycHggMzVweCAzcHhcIixcbiAgMjM6IFwiMHB4IDIzcHggMzZweCAzcHhcIixcbiAgMjQ6IFwiMHB4IDI0cHggMzhweCAzcHhcIlxuKTtcblxuJG1kYy1lbGV2YXRpb24tYW1iaWVudC1tYXA6IChcbiAgMDogXCIwcHggMHB4IDBweCAwcHhcIixcbiAgMTogXCIwcHggMXB4IDNweCAwcHhcIixcbiAgMjogXCIwcHggMXB4IDVweCAwcHhcIixcbiAgMzogXCIwcHggMXB4IDhweCAwcHhcIixcbiAgNDogXCIwcHggMXB4IDEwcHggMHB4XCIsXG4gIDU6IFwiMHB4IDFweCAxNHB4IDBweFwiLFxuICA2OiBcIjBweCAxcHggMThweCAwcHhcIixcbiAgNzogXCIwcHggMnB4IDE2cHggMXB4XCIsXG4gIDg6IFwiMHB4IDNweCAxNHB4IDJweFwiLFxuICA5OiBcIjBweCAzcHggMTZweCAycHhcIixcbiAgMTA6IFwiMHB4IDRweCAxOHB4IDNweFwiLFxuICAxMTogXCIwcHggNHB4IDIwcHggM3B4XCIsXG4gIDEyOiBcIjBweCA1cHggMjJweCA0cHhcIixcbiAgMTM6IFwiMHB4IDVweCAyNHB4IDRweFwiLFxuICAxNDogXCIwcHggNXB4IDI2cHggNHB4XCIsXG4gIDE1OiBcIjBweCA2cHggMjhweCA1cHhcIixcbiAgMTY6IFwiMHB4IDZweCAzMHB4IDVweFwiLFxuICAxNzogXCIwcHggNnB4IDMycHggNXB4XCIsXG4gIDE4OiBcIjBweCA3cHggMzRweCA2cHhcIixcbiAgMTk6IFwiMHB4IDdweCAzNnB4IDZweFwiLFxuICAyMDogXCIwcHggOHB4IDM4cHggN3B4XCIsXG4gIDIxOiBcIjBweCA4cHggNDBweCA3cHhcIixcbiAgMjI6IFwiMHB4IDhweCA0MnB4IDdweFwiLFxuICAyMzogXCIwcHggOXB4IDQ0cHggOHB4XCIsXG4gIDI0OiBcIjBweCA5cHggNDZweCA4cHhcIlxuKTtcblxuLyoqXG4gKiBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuICogYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4gKiBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuICovXG4kbWRjLWVsZXZhdGlvbi1wcm9wZXJ0eTogYm94LXNoYWRvdyAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBkdXJhdGlvbiB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuICovXG4kbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uOiAyODBtcyAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiAqL1xuJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICRtZGMtYW5pbWF0aW9uLXN0YW5kYXJkLWN1cnZlLXRpbWluZy1mdW5jdGlvbiAhZGVmYXVsdDtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL3RoZW1lL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIi4vdmFyaWFibGVzXCI7XG5cbi8qKlxuICogQXBwbGllcyB0aGUgY29ycmVjdCBDU1MgcnVsZXMgdG8gYW4gZWxlbWVudCB0byBnaXZlIGl0IHRoZSBlbGV2YXRpb24gc3BlY2lmaWVkIGJ5ICR6LXZhbHVlLlxuICogVGhlICR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNC5cbiAqIElmICRjb2xvciBoYXMgYW4gYWxwaGEgY2hhbm5lbCwgaXQgd2lsbCBiZSBpZ25vcmVkIGFuZCBvdmVycmlkZGVuLiBUbyBpbmNyZWFzZSB0aGUgb3BhY2l0eSBvZiB0aGUgc2hhZG93LCB1c2VcbiAqICRvcGFjaXR5LWJvb3N0LlxuICovXG5AbWl4aW4gbWRjLWVsZXZhdGlvbigkei12YWx1ZSwgJGNvbG9yOiAkbWRjLWVsZXZhdGlvbi1iYXNlbGluZS1jb2xvciwgJG9wYWNpdHktYm9vc3Q6IDApIHtcbiAgQGlmIHR5cGUtb2YoJHotdmFsdWUpICE9IG51bWJlciBvciBub3QgdW5pdGxlc3MoJHotdmFsdWUpIHtcbiAgICBAZXJyb3IgXCIkei12YWx1ZSBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyLCBidXQgcmVjZWl2ZWQgJyN7JHotdmFsdWV9J1wiO1xuICB9XG5cbiAgQGlmICR6LXZhbHVlIDwgMCBvciAkei12YWx1ZSA+IDI0IHtcbiAgICBAZXJyb3IgXCIkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQsIGJ1dCByZWNlaXZlZCAnI3skei12YWx1ZX0nXCI7XG4gIH1cblxuICBAaWYgbWFwLWhhcy1rZXkoJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMsICRjb2xvcikge1xuICAgICRjb2xvcjogbWFwLWdldCgkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcywgJGNvbG9yKTtcbiAgfVxuXG4gIEBpZiB0eXBlLW9mKCRjb2xvcikgIT0gY29sb3Ige1xuICAgIEBlcnJvciBcIiRjb2xvciBtdXN0IGJlIGEgdmFsaWQgY29sb3IsIGJ1dCAnI3skY29sb3J9JyBpcyBvZiB0eXBlICN7dHlwZS1vZigkY29sb3IpfVwiO1xuICB9XG5cbiAgJHVtYnJhLXotdmFsdWU6IG1hcC1nZXQoJG1kYy1lbGV2YXRpb24tdW1icmEtbWFwLCAkei12YWx1ZSk7XG4gICRwZW51bWJyYS16LXZhbHVlOiBtYXAtZ2V0KCRtZGMtZWxldmF0aW9uLXBlbnVtYnJhLW1hcCwgJHotdmFsdWUpO1xuICAkYW1iaWVudC16LXZhbHVlOiBtYXAtZ2V0KCRtZGMtZWxldmF0aW9uLWFtYmllbnQtbWFwLCAkei12YWx1ZSk7XG5cbiAgJHVtYnJhLWNvbG9yOiByZ2JhKCRjb2xvciwgJG1kYy1lbGV2YXRpb24tdW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJHBlbnVtYnJhLWNvbG9yOiByZ2JhKCRjb2xvciwgJG1kYy1lbGV2YXRpb24tcGVudW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJGFtYmllbnQtY29sb3I6IHJnYmEoJGNvbG9yLCAkbWRjLWVsZXZhdGlvbi1hbWJpZW50LW9wYWNpdHkgKyAkb3BhY2l0eS1ib29zdCk7XG5cbiAgYm94LXNoYWRvdzpcbiAgICAje1wiI3skdW1icmEtei12YWx1ZX0gI3skdW1icmEtY29sb3J9XCJ9LFxuICAgICN7XCIjeyRwZW51bWJyYS16LXZhbHVlfSAjeyRwZW51bWJyYS1jb2xvcn1cIn0sXG4gICAgI3skYW1iaWVudC16LXZhbHVlfSAkYW1iaWVudC1jb2xvcjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvciBhIGB0cmFuc2l0aW9uYCBwcm9wZXJ0eSBmb3IgZWxldmF0aW9uLlxuICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIGEgY29tcG9uZW50IG5lZWRzIHRvIHRyYW5zaXRpb25cbiAqIG1vcmUgdGhhbiBvbmUgcHJvcGVydHkuXG4gKlxuICogYGBgc2Nzc1xuICogLmZvbyB7XG4gKiAgIHRyYW5zaXRpb246IG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1ydWxlKCksIG9wYWNpdHkgMTAwbXMgZWFzZTtcbiAqICAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5LCBvcGFjaXR5O1xuICogfVxuICogYGBgXG4gKi9cbkBmdW5jdGlvbiBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tcnVsZShcbiAgJGR1cmF0aW9uOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAkZWFzaW5nOiAkbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbikge1xuICBAcmV0dXJuICN7JG1kYy1lbGV2YXRpb24tcHJvcGVydHl9ICN7JGR1cmF0aW9ufSAjeyRlYXNpbmd9O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGNvcnJlY3QgY3NzIHJ1bGVzIG5lZWRlZCB0byBoYXZlIGFuIGVsZW1lbnQgdHJhbnNpdGlvbiBiZXR3ZWVuIGVsZXZhdGlvbnMuXG4gKiBUaGlzIG1peGluIHNob3VsZCBiZSBhcHBsaWVkIHRvIGVsZW1lbnRzIHdob3NlIGVsZXZhdGlvbiB2YWx1ZXMgd2lsbCBjaGFuZ2UgZGVwZW5kaW5nIG9uIHRoZWlyXG4gKiBjb250ZXh0IChlLmcuIHdoZW4gYWN0aXZlIG9yIGRpc2FibGVkKS5cbiAqL1xuLy8gTk9URSh0cmF2aXNrYXVmbWFuKTogQm90aCB0aGlzIG1peGluIGFuZCB0aGUgYWJvdmUgZnVuY3Rpb24gdXNlIGRlZmF1bHQgcGFyYW1ldGVycyBzbyB0aGV5IGNhblxuLy8gYmUgdXNlZCBpbiB0aGUgc2FtZSB3YXkgYnkgY2xpZW50cy5cbkBtaXhpbiBtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24oXG4gICRkdXJhdGlvbjogJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi1kdXJhdGlvbixcbiAgJGVhc2luZzogJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24pIHtcbiAgdHJhbnNpdGlvbjogbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uLXJ1bGUoJGR1cmF0aW9uLCAkZWFzaW5nKTtcbiAgd2lsbC1jaGFuZ2U6ICRtZGMtZWxldmF0aW9uLXByb3BlcnR5O1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJ1bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgd2hlbiBhbiBNREMtV2ViIGNvbXBvbmVudCBpcyB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYW4gUlRMIGxheW91dC5cbiAqXG4gKiBVc2FnZSBFeGFtcGxlOlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIGxlZnQ6IDA7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBsZWZ0OiBhdXRvO1xuICogICAgIHJpZ2h0OiAwO1xuICogICB9XG4gKlxuICogICAmX19iYXIge1xuICogICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gKiAgICAgQGluY2x1ZGUgbWRjLXJ0bChcIi5tZGMtZm9vXCIpIHtcbiAqICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICogICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKlxuICogLm1kYy1mb28tLW1vZCB7XG4gKiAgIHBhZGRpbmctbGVmdDogNHB4O1xuICpcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgcGFkZGluZy1sZWZ0OiBhdXRvO1xuICogICAgIHBhZGRpbmctcmlnaHQ6IDRweDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgd29ya3MgYnkgY2hlY2tpbmcgZm9yIFtkaXI9XCJydGxcIl0gb24gYW4gYW5jZXN0b3IgZWxlbWVudC4gV2hpbGUgdGhpcyB3aWxsIHdvcmtcbiAqIGluIG1vc3QgY2FzZXMsIGl0IHdpbGwgaW4gc29tZSBjYXNlcyBsZWFkIHRvIGZhbHNlIG5lZ2F0aXZlcywgZS5nLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxodG1sIGRpcj1cInJ0bFwiPlxuICogICA8IS0tIC4uLiAtLT5cbiAqICAgPGRpdiBkaXI9XCJsdHJcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwibWRjLWZvb1wiPlN0eWxlZCBpbmNvcnJlY3RseSBhcyBSVEwhPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9odG1sPlxuICogYGBgXG4gKlxuICogSW4gdGhlIGZ1dHVyZSwgc2VsZWN0b3JzIHN1Y2ggYXMgOmRpciAoaHR0cDovL21kbi5pby86ZGlyKSB3aWxsIGhlbHAgdXMgbWl0aWdhdGUgdGhpcy5cbiAqL1xuQG1peGluIG1kYy1ydGwoJHJvb3Qtc2VsZWN0b3I6IG51bGwpIHtcbiAgQGlmICgkcm9vdC1zZWxlY3Rvcikge1xuICAgIEBhdC1yb290IHtcbiAgICAgIFtkaXI9XCJydGxcIl0gI3skcm9vdC1zZWxlY3Rvcn0gJixcbiAgICAgICN7JHJvb3Qtc2VsZWN0b3J9W2Rpcj1cInJ0bFwiXSAmIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBbZGlyPVwicnRsXCJdICYsXG4gICAgJltkaXI9XCJydGxcIl0ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGFrZXMgYSBiYXNlIGJveC1tb2RlbCBwcm9wZXJ0eSAtIGUuZy4gbWFyZ2luIC8gYm9yZGVyIC8gcGFkZGluZyAtIGFsb25nIHdpdGggYSBkZWZhdWx0XG4gKiBkaXJlY3Rpb24gYW5kIHZhbHVlLCBhbmQgZW1pdHMgcnVsZXMgd2hpY2ggYXBwbHkgdGhlIHZhbHVlIHRvIHRoZVxuICogXCI8YmFzZS1wcm9wZXJ0eT4tPGRlZmF1bHQtZGlyZWN0aW9uPlwiIHByb3BlcnR5IGJ5IGRlZmF1bHQsIGJ1dCBmbGlwcyB0aGUgZGlyZWN0aW9uXG4gKiB3aGVuIHdpdGhpbiBhbiBSVEwgY29udGV4dC5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCk7XG4gKiB9XG4gKiBgYGBcbiAqIGlzIGVxdWl2YWxlbnQgdG86XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBtYXJnaW4tbGVmdDogOHB4O1xuICpcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gKiAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICogd2hlcmVhczpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIEBpbmNsdWRlIG1kYy1ydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIHJpZ2h0LCA4cHgpO1xuICogfVxuICogYGBgXG4gKiBpcyBlcXVpdmFsZW50IHRvOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gKiAgICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogWW91IGNhbiBhbHNvIHBhc3MgYSA0dGggb3B0aW9uYWwgJHJvb3Qtc2VsZWN0b3IgYXJndW1lbnQgd2hpY2ggd2lsbCBiZSBmb3J3YXJkZWQgdG8gYG1kYy1ydGxgLFxuICogZS5nLiBgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtYm94KG1hcmdpbiwgbGVmdCwgOHB4LCBcIi5tZGMtY29tcG9uZW50XCIpYC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIGFsd2F5cyB6ZXJvIG91dCB0aGUgb3JpZ2luYWwgdmFsdWUgaW4gYW4gUlRMIGNvbnRleHQuIElmIHlvdSdyZVxuICogdHJ5aW5nIHRvIGZsaXAgdGhlIHZhbHVlcywgdXNlIG1kYy1ydGwtcmVmbGV4aXZlLXByb3BlcnR5KCkuXG4gKi9cbkBtaXhpbiBtZGMtcnRsLXJlZmxleGl2ZS1ib3goJGJhc2UtcHJvcGVydHksICRkZWZhdWx0LWRpcmVjdGlvbiwgJHZhbHVlLCAkcm9vdC1zZWxlY3RvcjogbnVsbCkge1xuICBAaWYgKGluZGV4KChyaWdodCwgbGVmdCksICRkZWZhdWx0LWRpcmVjdGlvbikgPT0gbnVsbCkge1xuICAgIEBlcnJvciBcIkludmFsaWQgZGVmYXVsdCBkaXJlY3Rpb24gI3tkZWZhdWx0LWRpcmVjdGlvbn0uIFBsZWFzZSBzcGVjaWZpeSBlaXRoZXIgcmlnaHQgb3IgbGVmdFwiO1xuICB9XG5cbiAgJGxlZnQtdmFsdWU6ICR2YWx1ZTtcbiAgJHJpZ2h0LXZhbHVlOiAwO1xuXG4gIEBpZiAoJGRlZmF1bHQtZGlyZWN0aW9uID09IHJpZ2h0KSB7XG4gICAgJGxlZnQtdmFsdWU6IDA7XG4gICAgJHJpZ2h0LXZhbHVlOiAkdmFsdWU7XG4gIH1cblxuICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eSgkYmFzZS1wcm9wZXJ0eSwgJGxlZnQtdmFsdWUsICRyaWdodC12YWx1ZSwgJHJvb3Qtc2VsZWN0b3IpO1xufVxuXG4vKipcbiAqIFRha2VzIGEgYmFzZSBwcm9wZXJ0eSBhbmQgZW1pdHMgcnVsZXMgdGhhdCBhc3NpZ24gPGJhc2UtcHJvcGVydHk+LWxlZnQgdG8gPGxlZnQtdmFsdWU+IGFuZFxuICogPGJhc2UtcHJvcGVydHk+LXJpZ2h0IHRvIDxyaWdodC12YWx1ZT4gaW4gYSBMVFIgY29udGV4dCwgYW5kIHZpY2UgdmVyc2EgaW4gYSBSVEwgY29udGV4dC5cbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYHNjc3NcbiAqIC5tZGMtZm9vIHtcbiAqICAgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtcHJvcGVydHkobWFyZ2luLCBhdXRvLCAxMnB4KTtcbiAqIH1cbiAqIGBgYFxuICogaXMgZXF1aXZhbGVudCB0bzpcbiAqXG4gKiBgYGBzY3NzXG4gKiAubWRjLWZvbyB7XG4gKiAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICogICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gKlxuICogICBAaW5jbHVkZSBtZGMtcnRsIHtcbiAqICAgICBtYXJnaW4tbGVmdDogMTJweDtcbiAqICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEEgNHRoIG9wdGlvbmFsICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IGNhbiBiZSBnaXZlbiwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYG1kYy1ydGxgLlxuICovXG5AbWl4aW4gbWRjLXJ0bC1yZWZsZXhpdmUtcHJvcGVydHkoJGJhc2UtcHJvcGVydHksICRsZWZ0LXZhbHVlLCAkcmlnaHQtdmFsdWUsICRyb290LXNlbGVjdG9yOiBudWxsKSB7XG4gICRwcm9wLWxlZnQ6ICN7JGJhc2UtcHJvcGVydHl9LWxlZnQ7XG4gICRwcm9wLXJpZ2h0OiAjeyRiYXNlLXByb3BlcnR5fS1yaWdodDtcblxuICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZV8oJHByb3AtbGVmdCwgJGxlZnQtdmFsdWUsICRwcm9wLXJpZ2h0LCAkcmlnaHQtdmFsdWUsICRyb290LXNlbGVjdG9yKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhbiBhcmd1bWVudCBzcGVjaWZ5aW5nIGEgaG9yaXpvbnRhbCBwb3NpdGlvbiBwcm9wZXJ0eSAoZWl0aGVyIFwibGVmdFwiIG9yIFwicmlnaHRcIikgYXMgd2VsbFxuICogYXMgYSB2YWx1ZSwgYW5kIGFwcGxpZXMgdGhhdCB2YWx1ZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIGEgTFRSIGNvbnRleHQsIGFuZCBmbGlwcyBpdCBpbiBhXG4gKiBSVEwgY29udGV4dC4gRm9yIGV4YW1wbGU6XG4gKlxuICogYGBgc2Nzc1xuICogLm1kYy1mb28ge1xuICogICBAaW5jbHVkZSBtZGMtcnRsLXJlZmxleGl2ZS1wb3NpdGlvbihsZWZ0LCAwKTtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogfVxuICogYGBgXG4gKiBpcyBlcXVpdmFsZW50IHRvOlxuICpcbiAqIGBgYHNjc3NcbiAqICAubWRjLWZvbyB7XG4gKiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgICBsZWZ0OiAwO1xuICogICAgcmlnaHQ6IGluaXRpYWw7XG4gKlxuICogICAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gKiAgICAgIHJpZ2h0OiAwO1xuICogICAgICBsZWZ0OiBpbml0aWFsO1xuICogICAgfVxuICogIH1cbiAqIGBgYFxuICogQW4gb3B0aW9uYWwgdGhpcmQgJHJvb3Qtc2VsZWN0b3IgYXJndW1lbnQgbWF5IGFsc28gYmUgZ2l2ZW4sIHdoaWNoIGlzIHBhc3NlZCB0byBgbWRjLXJ0bGAuXG4gKi9cbkBtaXhpbiBtZGMtcnRsLXJlZmxleGl2ZS1wb3NpdGlvbigkcG9zaXRpb24tcHJvcGVydHksICR2YWx1ZSwgJHJvb3Qtc2VsZWN0b3I6IG51bGwpIHtcbiAgQGlmIChpbmRleCgocmlnaHQsIGxlZnQpLCAkcG9zaXRpb24tcHJvcGVydHkpID09IG51bGwpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHBvc2l0aW9uICN7cG9zaXRpb24tcHJvcGVydHl9LiBQbGVhc2Ugc3BlY2lmaXkgZWl0aGVyIHJpZ2h0IG9yIGxlZnRcIjtcbiAgfVxuXG4gICRsZWZ0LXZhbHVlOiAkdmFsdWU7XG4gICRyaWdodC12YWx1ZTogaW5pdGlhbDtcblxuICBAaWYgKCRwb3NpdGlvbi1wcm9wZXJ0eSA9PSByaWdodCkge1xuICAgICRyaWdodC12YWx1ZTogJHZhbHVlO1xuICAgICRsZWZ0LXZhbHVlOiBpbml0aWFsO1xuICB9XG5cbiAgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmVfKGxlZnQsICRsZWZ0LXZhbHVlLCByaWdodCwgJHJpZ2h0LXZhbHVlLCAkcm9vdC1zZWxlY3Rvcik7XG59XG5cbkBtaXhpbiBtZGMtcnRsLXJlZmxleGl2ZV8oXG4gICRsZWZ0LXByb3BlcnR5LFxuICAkbGVmdC12YWx1ZSxcbiAgJHJpZ2h0LXByb3BlcnR5LFxuICAkcmlnaHQtdmFsdWUsXG4gICRyb290LXNlbGVjdG9yOiBudWxsXG4pIHtcbiAgI3skbGVmdC1wcm9wZXJ0eX06ICRsZWZ0LXZhbHVlO1xuICAjeyRyaWdodC1wcm9wZXJ0eX06ICRyaWdodC12YWx1ZTtcblxuICBAaW5jbHVkZSBtZGMtcnRsKCRyb290LXNlbGVjdG9yKSB7XG4gICAgI3skbGVmdC1wcm9wZXJ0eX06ICRyaWdodC12YWx1ZTtcbiAgICAjeyRyaWdodC1wcm9wZXJ0eX06ICRsZWZ0LXZhbHVlO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXCI7XG5AaW1wb3J0IFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1wiO1xuQGltcG9ydCBcIi4vdmFyaWFibGVzXCI7XG5cbkBtaXhpbiBtZGMtY2hlY2tib3gtY29udGFpbmVyLWtleWZyYW1lc18oXG4gICRmcm9tLXN0cm9rZS1jb2xvcixcbiAgJHRvLXN0cm9rZS1jb2xvcixcbiAgJGZyb20tZmlsbC1jb2xvcixcbiAgJHRvLWZpbGwtY29sb3IsXG4gICR1aWQpIHtcbiAgQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtZmFkZS1pbi1iYWNrZ3JvdW5kLSN7JHVpZH0ge1xuICAgIDAlIHtcbiAgICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJvcmRlci1jb2xvciwgJGZyb20tc3Ryb2tlLWNvbG9yKTtcbiAgICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJhY2tncm91bmQtY29sb3IsICRmcm9tLWZpbGwtY29sb3IpO1xuICAgIH1cblxuICAgIDUwJSB7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsICR0by1zdHJva2UtY29sb3IpO1xuICAgICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoYmFja2dyb3VuZC1jb2xvciwgJHRvLWZpbGwtY29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIEBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWZhZGUtb3V0LWJhY2tncm91bmQtI3skdWlkfSB7XG4gICAgMCUsXG4gICAgODAlIHtcbiAgICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJvcmRlci1jb2xvciwgJHRvLXN0cm9rZS1jb2xvcik7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkdG8tZmlsbC1jb2xvcik7XG4gICAgfVxuXG4gICAgMTAwJSB7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsICRmcm9tLXN0cm9rZS1jb2xvcik7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkZnJvbS1maWxsLWNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtdW5jaGVja2VkLWNoZWNrZWQtY2hlY2ttYXJrLXBhdGgge1xuICAwJSxcbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogJG1kYy1jaGVja2JveC1tYXJrLXBhdGgtbGVuZ3RoXztcbiAgfVxuXG4gIDUwJSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJG1kYy1hbmltYXRpb24tZGVjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICB9XG59XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LXVuY2hlY2tlZC1pbmRldGVybWluYXRlLW1peGVkbWFyayB7XG4gIDAlLFxuICA2OC4yJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gIH1cblxuICA2OC4yJSB7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDAsIDEpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtY2hlY2tlZC11bmNoZWNrZWQtY2hlY2ttYXJrLXBhdGgge1xuICBmcm9tIHtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkbWRjLWFuaW1hdGlvbi1hY2NlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuICAgIG9wYWNpdHk6IDE7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7XG4gIH1cblxuICB0byB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogJG1kYy1jaGVja2JveC1tYXJrLXBhdGgtbGVuZ3RoXyAqIC0xO1xuICB9XG59XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWNoZWNrZWQtaW5kZXRlcm1pbmF0ZS1jaGVja21hcmsge1xuICBmcm9tIHtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkbWRjLWFuaW1hdGlvbi1kZWNlbGVyYXRpb24tY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWNoZWNrbWFyayB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICRtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWVhc2luZy1mdW5jdGlvbl87XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5cbkBrZXlmcmFtZXMgbWRjLWNoZWNrYm94LWNoZWNrZWQtaW5kZXRlcm1pbmF0ZS1taXhlZG1hcmsge1xuICBmcm9tIHtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBtZGMtYW5pbWF0aW9uLWRlY2VsZXJhdGlvbi1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLW1peGVkbWFyayB7XG4gIGZyb20ge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICRtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWVhc2luZy1mdW5jdGlvbl87XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzMTVkZWcpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS11bmNoZWNrZWQtbWl4ZWRtYXJrIHtcbiAgMCUge1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgxKTtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG5cbiAgMzIuOCUsXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG4kbWRjLWNoZWNrYm94LW1hcmstY29sb3I6IHdoaXRlICFkZWZhdWx0O1xuJG1kYy1jaGVja2JveC1ib3JkZXItY29sb3I6IHJnYmEoYmxhY2ssIC41NCkgIWRlZmF1bHQ7XG4kbWRjLWNoZWNrYm94LWJvcmRlci1jb2xvci1kYXJrOiB3aGl0ZSAhZGVmYXVsdDtcbiRtZGMtY2hlY2tib3gtZGlzYWJsZWQtY29sb3I6IHJnYmEoYmxhY2ssIC4yNikgIWRlZmF1bHQ7XG4kbWRjLWNoZWNrYm94LWRpc2FibGVkLWNvbG9yLWRhcms6IHJnYmEod2hpdGUsIC4zKSAhZGVmYXVsdDtcbiRtZGMtY2hlY2tib3gtYmFzZWxpbmUtdGhlbWUtY29sb3I6IHNlY29uZGFyeSAhZGVmYXVsdDtcblxuJG1kYy1jaGVja2JveC10b3VjaC1hcmVhOiA0MHB4O1xuJG1kYy1jaGVja2JveC1zaXplOiAxOHB4O1xuJG1kYy1jaGVja2JveC11aS1wY3Q6IHBlcmNlbnRhZ2UoJG1kYy1jaGVja2JveC1zaXplIC8gJG1kYy1jaGVja2JveC10b3VjaC1hcmVhKTtcbiRtZGMtY2hlY2tib3gtbWFyay1zdHJva2Utc2l6ZTogMi8xNSAqICRtZGMtY2hlY2tib3gtc2l6ZTtcbiRtZGMtY2hlY2tib3gtYm9yZGVyLXdpZHRoOiAycHg7XG4kbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZHVyYXRpb246IDkwbXM7XG4kbWRjLWNoZWNrYm94LWl0ZW0tc3BhY2luZzogNHB4O1xuJG1kYy1jaGVja2JveC1yaXBwbGUtb3BhY2l0eTogLjE0O1xuJG1kYy1jaGVja2JveC1yaXBwbGUtcmFkaXVzOiA1MCU7XG4kbWRjLWNoZWNrYm94LWZvY3VzLWluZGljYXRvci1vcGFjaXR5OiAuMjY7XG5cbi8vIE1hbnVhbCBjYWxjdWxhdGlvbiBkb25lIG9uIFNWR1xuJG1kYy1jaGVja2JveC1tYXJrLXBhdGgtbGVuZ3RoXzogMjkuNzgzMzM4NTtcbiRtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLWVhc2luZy1mdW5jdGlvbl86IGN1YmljLWJlemllciguMTQsIDAsIDAsIDEpO1xuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbkBpbXBvcnQgXCJAbWF0ZXJpYWwvcmlwcGxlL21peGluc1wiO1xuQGltcG9ydCBcIkBtYXRlcmlhbC90aGVtZS9taXhpbnNcIjtcbkBpbXBvcnQgXCIuL21peGluc1wiO1xuQGltcG9ydCBcIi4vdmFyaWFibGVzXCI7XG5cbi8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIGNoZWNrYm94XG5cbi5tZGMtY2hlY2tib3gge1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3gtYmFzZV87XG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveC1pbmstY29sb3IoJG1kYy1jaGVja2JveC1tYXJrLWNvbG9yKTtcbiAgQGluY2x1ZGUgbWRjLWNoZWNrYm94LWZvY3VzLWluZGljYXRvci1jb2xvcigkbWRjLWNoZWNrYm94LWJhc2VsaW5lLXRoZW1lLWNvbG9yKTtcbiAgQGluY2x1ZGUgbWRjLXJpcHBsZS1zdXJmYWNlO1xuICBAaW5jbHVkZSBtZGMtcmlwcGxlLWNvbG9yKCRtZGMtY2hlY2tib3gtYmFzZWxpbmUtdGhlbWUtY29sb3IsICRtZGMtY2hlY2tib3gtcmlwcGxlLW9wYWNpdHkpO1xuICBAaW5jbHVkZSBtZGMtcmlwcGxlLXJhZGl1cygkbWRjLWNoZWNrYm94LXJpcHBsZS1yYWRpdXMpO1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3gtY29udGFpbmVyLWNvbG9ycygpO1xuXG4gIEBpbmNsdWRlIG1kYy10aGVtZS1kYXJrIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3gtY29udGFpbmVyLWNvbG9ycygkdW5tYXJrZWQtc3Ryb2tlLWNvbG9yOiAkbWRjLWNoZWNrYm94LWJvcmRlci1jb2xvci1kYXJrKTtcbiAgfVxufVxuXG4vLyBOZWVkZWQgdG8gZGlzYWJsZSBob3ZlciBlZmZlY3RzIG9uIENTUy1vbmx5IChub24tSlMpIGNoZWNrYm94ZXNcbi5tZGMtY2hlY2tib3gtLWRpc2FibGVkIHtcbiAgQGluY2x1ZGUgbWRjLWNoZWNrYm94LS1kaXNhYmxlZF87XG59XG5cbi8vIEpTIGNoZWNrYm94XG4ubWRjLWNoZWNrYm94LS11cGdyYWRlZCB7XG4gIC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQsXG4gIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayxcbiAgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoLFxuICAubWRjLWNoZWNrYm94X19taXhlZG1hcmsge1xuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fY2hpbGQtLXVwZ3JhZGVkXztcbiAgfVxufVxuXG4ubWRjLWNoZWNrYm94LS1hbmltIHtcbiAgQGluY2x1ZGUgbWRjLWNoZWNrYm94LS1hbmltXztcbn1cblxuLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fYmFja2dyb3VuZF87XG5cbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDpjaGVja2VkIH4gJixcbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDppbmRldGVybWluYXRlIH4gJiB7XG4gICAgQGluY2x1ZGUgbWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kLS1tYXJrZWRfO1xuICB9XG59XG5cbi8vIFRoZSBmcmFtZSdzIDo6YmVmb3JlIGVsZW1lbnQgaXMgdXNlZCBhcyBhIGZvY3VzIGluZGljYXRvciBmb3IgdGhlIGNoZWNrYm94XG4ubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kOjpiZWZvcmUge1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2ZvY3VzLWluZGljYXRvcl87XG5cbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6Zm9jdXMgfiAmIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2ZvY3VzLWluZGljYXRvci0tZm9jdXNlZF87XG4gIH1cblxuICAubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkICYge1xuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fZm9jdXMtaW5kaWNhdG9yLS1yaXBwbGUtdXBncmFkZWQtdW5ib3VuZGVkXztcbiAgfVxufVxuXG4ubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbCB7XG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2xfO1xuXG4gICY6ZGlzYWJsZWQge1xuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveC0tZGlzYWJsZWRfO1xuICB9XG59XG5cbi5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayB7XG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fY2hlY2ttYXJrXztcblxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCAmIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2NoZWNrbWFyay0tY2hlY2tlZF87XG4gIH1cblxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCAmIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2NoZWNrbWFyay0taW5kZXRlcm1pbmF0ZV87XG4gIH1cbn1cblxuLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoIHtcbiAgQGluY2x1ZGUgbWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGhfO1xuXG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmNoZWNrZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kICYsXG4gIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmluZGV0ZXJtaW5hdGUgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kICYge1xuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoLS1tYXJrZWRfO1xuICB9XG59XG5cbi5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveF9fbWl4ZWRtYXJrXztcblxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCAmIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX21peGVkbWFyay0tY2hlY2tlZF87XG4gIH1cblxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCAmIHtcbiAgICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX21peGVkbWFyay0taW5kZXRlcm1pbmF0ZV87XG4gIH1cbn1cblxuLy8gcG9zdGNzcy1iZW0tbGludGVyOiBlbmRcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL2FuaW1hdGlvbi9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvcnRsL21peGluc1wiO1xuQGltcG9ydCBcIi4vZnVuY3Rpb25zXCI7XG5AaW1wb3J0IFwiLi9rZXlmcmFtZXNcIjtcbkBpbXBvcnQgXCIuL3ZhcmlhYmxlc1wiO1xuXG4vL1xuLy8gUHVibGljXG4vL1xuXG5AbWl4aW4gbWRjLWNoZWNrYm94LWNvbnRhaW5lci1jb2xvcnMoXG4gICR1bm1hcmtlZC1zdHJva2UtY29sb3I6ICRtZGMtY2hlY2tib3gtYm9yZGVyLWNvbG9yLFxuICAkdW5tYXJrZWQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQsXG4gICRtYXJrZWQtZmlsbC1jb2xvcjogJG1kYy1jaGVja2JveC1iYXNlbGluZS10aGVtZS1jb2xvcixcbiAgJGdlbmVyYXRlLWtleWZyYW1lczogdHJ1ZSkge1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3gtdW5tYXJrZWQtYmFja2dyb3VuZC1zZWxlY3Rvci1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoYm9yZGVyLWNvbG9yLCAkdW5tYXJrZWQtc3Ryb2tlLWNvbG9yKTtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkdW5tYXJrZWQtZmlsbC1jb2xvcik7XG4gIH1cblxuICBAaW5jbHVkZSBtZGMtY2hlY2tib3gtbWFya2VkLWJhY2tncm91bmQtc2VsZWN0b3ItZW5hYmxlZF8ge1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJvcmRlci1jb2xvciwgJG1hcmtlZC1maWxsLWNvbG9yKTtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkbWFya2VkLWZpbGwtY29sb3IpO1xuICB9XG5cbiAgQGlmICRnZW5lcmF0ZS1rZXlmcmFtZXMge1xuICAgICR1aWQ6IG1kYy1jaGVja2JveC1jb250YWluZXIta2V5ZnJhbWVzLXVpZF8oKTtcblxuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveC1jb250YWluZXIta2V5ZnJhbWVzXyhcbiAgICAgICRmcm9tLXN0cm9rZS1jb2xvcjogJHVubWFya2VkLXN0cm9rZS1jb2xvcixcbiAgICAgICR0by1zdHJva2UtY29sb3I6ICRtYXJrZWQtZmlsbC1jb2xvcixcbiAgICAgICRmcm9tLWZpbGwtY29sb3I6ICR1bm1hcmtlZC1maWxsLWNvbG9yLFxuICAgICAgJHRvLWZpbGwtY29sb3I6ICRtYXJrZWQtZmlsbC1jb2xvcixcbiAgICAgICR1aWQ6ICR1aWQpO1xuXG4gICAgJi5tZGMtY2hlY2tib3gtLWFuaW0ge1xuICAgICAgJi11bmNoZWNrZWQtY2hlY2tlZCxcbiAgICAgICYtdW5jaGVja2VkLWluZGV0ZXJtaW5hdGUge1xuICAgICAgICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDplbmFibGVkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IG1kYy1jaGVja2JveC1mYWRlLWluLWJhY2tncm91bmQtI3skdWlkfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmLWNoZWNrZWQtdW5jaGVja2VkLFxuICAgICAgJi1pbmRldGVybWluYXRlLXVuY2hlY2tlZCB7XG4gICAgICAgIC5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sOmVuYWJsZWQgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogbWRjLWNoZWNrYm94LWZhZGUtb3V0LWJhY2tncm91bmQtI3skdWlkfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94LWluay1jb2xvcigkY29sb3IpIHtcbiAgLm1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoIHtcbiAgICAvLyAhaW1wb3J0YW50IGlzIG5lZWRlZCBoZXJlIGJlY2F1c2UgYSBzdHJva2UgbXVzdCBiZSBzZXQgYXMgYW4gYXR0cmlidXRlIG9uIHRoZSBTVkcgaW4gb3JkZXJcbiAgICAvLyBmb3IgbGluZSBhbmltYXRpb24gdG8gd29yayBwcm9wZXJseS5cbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChzdHJva2UsICRjb2xvciwgJGltcG9ydGFudDogdHJ1ZSk7XG4gIH1cblxuICAubWRjLWNoZWNrYm94X19taXhlZG1hcmsge1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJhY2tncm91bmQtY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuQG1peGluIG1kYy1jaGVja2JveC1mb2N1cy1pbmRpY2F0b3ItY29sb3IoJGNvbG9yKSB7XG4gIC8vIFRoZSA6OmJlZm9yZSBlbGVtZW50IGlzIHVzZWQgYXMgYSBmb2N1cyBpbmRpY2F0b3IgZm9yIHRoZSBjaGVja2JveFxuICAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kOjpiZWZvcmUge1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJhY2tncm91bmQtY29sb3IsICRjb2xvciwgJGVkZ2VPcHRPdXQ6IHRydWUpO1xuICB9XG59XG5cbi8vXG4vLyBQcml2YXRlXG4vL1xuXG5AbWl4aW4gbWRjLWNoZWNrYm94LWJhc2VfIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZsZXg6IDAgMCAkbWRjLWNoZWNrYm94LXNpemU7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICB3aWR0aDogJG1kYy1jaGVja2JveC1zaXplO1xuICBoZWlnaHQ6ICRtZGMtY2hlY2tib3gtc2l6ZTtcbiAgcGFkZGluZzogKCRtZGMtY2hlY2tib3gtdG91Y2gtYXJlYSAtICRtZGMtY2hlY2tib3gtc2l6ZSkgLyAyO1xuICBsaW5lLWhlaWdodDogMDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xuXG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveC11bm1hcmtlZC1iYWNrZ3JvdW5kLXNlbGVjdG9yLWRpc2FibGVkXyB7XG4gICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoYm9yZGVyLWNvbG9yLCAkbWRjLWNoZWNrYm94LWRpc2FibGVkLWNvbG9yKTtcbiAgfVxuXG4gIEBpbmNsdWRlIG1kYy1jaGVja2JveC1tYXJrZWQtYmFja2dyb3VuZC1zZWxlY3Rvci1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJvcmRlci1jb2xvciwgdHJhbnNwYXJlbnQpO1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJhY2tncm91bmQtY29sb3IsICRtZGMtY2hlY2tib3gtZGlzYWJsZWQtY29sb3IpO1xuICB9XG5cbiAgQGluY2x1ZGUgbWRjLXRoZW1lLWRhcmsge1xuICAgIEBpbmNsdWRlIG1kYy1jaGVja2JveC11bm1hcmtlZC1iYWNrZ3JvdW5kLXNlbGVjdG9yLWRpc2FibGVkXyB7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsICRtZGMtY2hlY2tib3gtZGlzYWJsZWQtY29sb3ItZGFyayk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgbWRjLWNoZWNrYm94LW1hcmtlZC1iYWNrZ3JvdW5kLXNlbGVjdG9yLWRpc2FibGVkXyB7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkbWRjLWNoZWNrYm94LWRpc2FibGVkLWNvbG9yLWRhcmspO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94LS1kaXNhYmxlZF8ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94X19jaGlsZC0tY292ZXItcGFyZW50XyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94X19jaGlsZC0tdXBncmFkZWRfIHtcbiAgLy8gRHVlIHRvIHRoZSBteXJpYWQgb2Ygc2VsZWN0b3IgY29tYm9zIHVzZWQgdG8gcHJvcGVybHkgc3R5bGUgYSBDU1Mtb25seSBjaGVja2JveCwgYWxsIG9mXG4gIC8vIHdoaWNoIGhhdmUgdmFyeWluZyBzZWxlY3RvciBwcmVjZWRlbmNlIGFuZCBtYWtlIHVzZSBvZiB0cmFuc2l0aW9ucywgaXQgaXMgY2xlYW5lciBhbmQgbW9yZVxuICAvLyBlZmZpY2llbnQgaGVyZSB0byBzaW1wbHkgdXNlICFpbXBvcnRhbnQsIHNpbmNlIHRoZSBtZGMtY2hlY2tib3gtLWFuaW0tKiBjbGFzc2VzIHdpbGwgdGFrZVxuICAvLyBvdmVyIGZyb20gaGVyZS5cbiAgdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xufVxuXG4vLyBBbmltYXRpb25cblxuQG1peGluIG1kYy1jaGVja2JveC0tYW5pbV8ge1xuICAkbWRjLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUtY2hhbmdlLWR1cmF0aW9uXzogNTAwbXM7XG5cbiAgLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItbWF4LXR5cGVcblxuICAmLXVuY2hlY2tlZC1jaGVja2VkLFxuICAmLXVuY2hlY2tlZC1pbmRldGVybWluYXRlLFxuICAmLWNoZWNrZWQtdW5jaGVja2VkLFxuICAmLWluZGV0ZXJtaW5hdGUtdW5jaGVja2VkIHtcbiAgICAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWR1cmF0aW9uICogMjtcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgICB9XG4gIH1cblxuICAmLXVuY2hlY2tlZC1jaGVja2VkIHtcbiAgICAubWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGgge1xuICAgICAgLy8gSW5zdGVhZCBvZiBkZWxheWluZyB0aGUgYW5pbWF0aW9uLCB3ZSBzaW1wbHkgbXVsdGlwbHkgaXRzIGxlbmd0aCBieSAyIGFuZCBiZWdpbiB0aGVcbiAgICAgIC8vIGFuaW1hdGlvbiBhdCA1MCUgaW4gb3JkZXIgdG8gcHJldmVudCBhIGZsYXNoIG9mIHN0eWxlcyBhcHBsaWVkIHRvIGEgY2hlY2tlZCBjaGVja21hcmtcbiAgICAgIC8vIGFzIHRoZSBiYWNrZ3JvdW5kIGlzIGZhZGluZyBpbiBiZWZvcmUgdGhlIGFuaW1hdGlvbiBiZWdpbnMuXG4gICAgICBhbmltYXRpb246ICRtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1kdXJhdGlvbiAqIDIgbGluZWFyIDBzIG1kYy1jaGVja2JveC11bmNoZWNrZWQtY2hlY2tlZC1jaGVja21hcmstcGF0aDtcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgJi11bmNoZWNrZWQtaW5kZXRlcm1pbmF0ZSB7XG4gICAgLm1kYy1jaGVja2JveF9fbWl4ZWRtYXJrIHtcbiAgICAgIGFuaW1hdGlvbjogJG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWR1cmF0aW9uIGxpbmVhciAwcyBtZGMtY2hlY2tib3gtdW5jaGVja2VkLWluZGV0ZXJtaW5hdGUtbWl4ZWRtYXJrO1xuICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICB9XG4gIH1cblxuICAmLWNoZWNrZWQtdW5jaGVja2VkIHtcbiAgICAubWRjLWNoZWNrYm94X19jaGVja21hcmtfX3BhdGgge1xuICAgICAgYW5pbWF0aW9uOiAkbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZHVyYXRpb24gbGluZWFyIDBzIG1kYy1jaGVja2JveC1jaGVja2VkLXVuY2hlY2tlZC1jaGVja21hcmstcGF0aDtcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgJi1jaGVja2VkLWluZGV0ZXJtaW5hdGUge1xuICAgIC5tZGMtY2hlY2tib3hfX2NoZWNrbWFyayB7XG4gICAgICBhbmltYXRpb246ICRtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1kdXJhdGlvbiBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWNoZWNrZWQtaW5kZXRlcm1pbmF0ZS1jaGVja21hcms7XG4gICAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgIH1cblxuICAgIC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gICAgICBhbmltYXRpb246ICRtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1kdXJhdGlvbiBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWNoZWNrZWQtaW5kZXRlcm1pbmF0ZS1taXhlZG1hcms7XG4gICAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgIH1cbiAgfVxuXG4gICYtaW5kZXRlcm1pbmF0ZS1jaGVja2VkIHtcbiAgICAubWRjLWNoZWNrYm94X19jaGVja21hcmsge1xuICAgICAgYW5pbWF0aW9uOiAkbWRjLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUtY2hhbmdlLWR1cmF0aW9uXyBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUtY2hlY2tlZC1jaGVja21hcms7XG4gICAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgIH1cblxuICAgIC5tZGMtY2hlY2tib3hfX21peGVkbWFyayB7XG4gICAgICBhbmltYXRpb246ICRtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGFuZ2UtZHVyYXRpb25fIGxpbmVhciAwcyBtZGMtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZS1jaGVja2VkLW1peGVkbWFyaztcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgJi1pbmRldGVybWluYXRlLXVuY2hlY2tlZCB7XG4gICAgLm1kYy1jaGVja2JveF9fbWl4ZWRtYXJrIHtcbiAgICAgIGFuaW1hdGlvbjogJG1kYy1jaGVja2JveC1pbmRldGVybWluYXRlLWNoYW5nZS1kdXJhdGlvbl8gKiAuNiBsaW5lYXIgMHMgbWRjLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUtdW5jaGVja2VkLW1peGVkbWFyaztcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLy8gc3R5bGVsaW50LWVuYWJsZSBzZWxlY3Rvci1tYXgtdHlwZVxufVxuXG4vLyBCYWNrZ3JvdW5kXG5cbkBtaXhpbiBtZGMtY2hlY2tib3gtdW5tYXJrZWQtYmFja2dyb3VuZC1zZWxlY3Rvci1lbmFibGVkXyB7XG4gIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWxlY3Rvci1tYXgtc3BlY2lmaWNpdHlcbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDpub3QoOmNoZWNrZWQpOm5vdCg6aW5kZXRlcm1pbmF0ZSkgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94LXVubWFya2VkLWJhY2tncm91bmQtc2VsZWN0b3ItZGlzYWJsZWRfIHtcbiAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlbGVjdG9yLW1heC1zcGVjaWZpY2l0eVxuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDpub3QoOmNoZWNrZWQpOm5vdCg6aW5kZXRlcm1pbmF0ZSkgfiAubWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94LW1hcmtlZC1iYWNrZ3JvdW5kLXNlbGVjdG9yLWVuYWJsZWRfIHtcbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZW5hYmxlZDppbmRldGVybWluYXRlIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIG1kYy1jaGVja2JveC1tYXJrZWQtYmFja2dyb3VuZC1zZWxlY3Rvci1kaXNhYmxlZF8ge1xuICAubWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbDpkaXNhYmxlZDpjaGVja2VkIH4gLm1kYy1jaGVja2JveF9fYmFja2dyb3VuZCxcbiAgLm1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2w6ZGlzYWJsZWQ6aW5kZXRlcm1pbmF0ZSB+IC5tZGMtY2hlY2tib3hfX2JhY2tncm91bmQge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBtZGMtY2hlY2tib3hfX2JhY2tncm91bmRfIHtcbiAgQGluY2x1ZGUgbWRjLWNoZWNrYm94X19jaGlsZC0tY292ZXItcGFyZW50XztcbiAgQGluY2x1ZGUgbWRjLXJ0bC1yZWZsZXhpdmUtcG9zaXRpb24oXG4gICAgbGVmdCwgKCRtZGMtY2hlY2tib3gtdG91Y2gtYXJlYSAtICRtZGMtY2hlY2tib3gtc2l6ZSkgLyAyLCBcIi5tZGMtY2hlY2tib3hcIik7XG5cbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIHRvcDogKCRtZGMtY2hlY2tib3gtdG91Y2gtYXJlYSAtICRtZGMtY2hlY2tib3gtc2l6ZSkgLyAyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6ICRtZGMtY2hlY2tib3gtdWktcGN0O1xuICBoZWlnaHQ6ICRtZGMtY2hlY2tib3gtdWktcGN0O1xuICB0cmFuc2l0aW9uOlxuICAgIG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWV4aXQoYmFja2dyb3VuZC1jb2xvciksXG4gICAgbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZXhpdChib3JkZXItY29sb3IpO1xuICAvLyBib3JkZXItY29sb3IgaXMgb3ZlcnJpZGRlbiBieSB0aGUgbWRjLWNoZWNrYm94LXVubWFya2VkLXN0cm9rZS1jb2xvcigpIG1peGluXG4gIGJvcmRlcjogJG1kYy1jaGVja2JveC1ib3JkZXItd2lkdGggc29saWQgY3VycmVudENvbG9yO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtY29sb3IsIGJvcmRlci1jb2xvcjtcbn1cblxuQG1peGluIG1kYy1jaGVja2JveF9fYmFja2dyb3VuZC0tbWFya2VkXyB7XG4gIHRyYW5zaXRpb246XG4gICAgbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZW50ZXIoYm9yZGVyLWNvbG9yKSxcbiAgICBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1lbnRlcihiYWNrZ3JvdW5kLWNvbG9yKTtcbn1cblxuLy8gRm9jdXMgaW5kaWNhdG9yXG5cbkBtaXhpbiBtZGMtY2hlY2tib3hfX2ZvY3VzLWluZGljYXRvcl8ge1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2NoaWxkLS1jb3Zlci1wYXJlbnRfO1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCwgMCk7XG4gIHRyYW5zaXRpb246IG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWV4aXQob3BhY2l0eSksIG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWV4aXQodHJhbnNmb3JtKTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBvcGFjaXR5OiAwO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgY29udGVudDogXCJcIjtcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHksIHRyYW5zZm9ybTtcbn1cblxuQG1peGluIG1kYy1jaGVja2JveF9fZm9jdXMtaW5kaWNhdG9yLS1mb2N1c2VkXyB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMi43NSwgMi43NSk7XG4gIHRyYW5zaXRpb246XG4gICAgbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZW50ZXIob3BhY2l0eSwgMG1zLCA4MG1zKSxcbiAgICBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1lbnRlcih0cmFuc2Zvcm0sIDBtcywgODBtcyk7XG4gIG9wYWNpdHk6ICRtZGMtY2hlY2tib3gtZm9jdXMtaW5kaWNhdG9yLW9wYWNpdHk7XG59XG5cbkBtaXhpbiBtZGMtY2hlY2tib3hfX2ZvY3VzLWluZGljYXRvci0tcmlwcGxlLXVwZ3JhZGVkLXVuYm91bmRlZF8ge1xuICBjb250ZW50OiBub25lO1xufVxuXG4vLyBOYXRpdmUgaW5wdXRcblxuQG1peGluIG1kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2xfIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgb3BhY2l0eTogMDtcbiAgY3Vyc29yOiBpbmhlcml0O1xufVxuXG4vLyBDaGVjayBtYXJrXG5cbkBtaXhpbiBtZGMtY2hlY2tib3hfX2NoZWNrbWFya18ge1xuICBAaW5jbHVkZSBtZGMtY2hlY2tib3hfX2NoaWxkLS1jb3Zlci1wYXJlbnRfO1xuXG4gIHdpZHRoOiAxMDAlO1xuICB0cmFuc2l0aW9uOiBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1leGl0KG9wYWNpdHksIDBtcywgJG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWR1cmF0aW9uICogMik7XG4gIG9wYWNpdHk6IDA7XG5cbiAgLm1kYy1jaGVja2JveC0tdXBncmFkZWQgJiB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94X19jaGVja21hcmstLWNoZWNrZWRfIHtcbiAgdHJhbnNpdGlvbjpcbiAgICBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1lbnRlcihvcGFjaXR5LCAwbXMsICRtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1kdXJhdGlvbiAqIDIpLFxuICAgIG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWVudGVyKHRyYW5zZm9ybSwgMG1zLCAkbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZHVyYXRpb24gKiAyKTtcbiAgb3BhY2l0eTogMTtcbn1cblxuQG1peGluIG1kYy1jaGVja2JveF9fY2hlY2ttYXJrLS1pbmRldGVybWluYXRlXyB7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgdHJhbnNpdGlvbjpcbiAgICBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1leGl0KG9wYWNpdHksIDBtcywgJG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWR1cmF0aW9uKSxcbiAgICBtZGMtY2hlY2tib3gtdHJhbnNpdGlvbi1leGl0KHRyYW5zZm9ybSwgMG1zLCAkbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZHVyYXRpb24pO1xuICBvcGFjaXR5OiAwO1xufVxuXG4vLyBDaGVjayBtYXJrIHBhdGhcblxuQG1peGluIG1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoXyB7XG4gIHRyYW5zaXRpb246XG4gICAgbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZXhpdChcbiAgICAgIHN0cm9rZS1kYXNob2Zmc2V0LFxuICAgICAgMG1zLFxuICAgICAgJG1kYy1jaGVja2JveC10cmFuc2l0aW9uLWR1cmF0aW9uICogMlxuICAgICk7XG4gIHN0cm9rZS13aWR0aDogJG1kYy1jaGVja2JveC1tYXJrLXN0cm9rZS1zaXplICogMS4zO1xuICBzdHJva2UtZGFzaG9mZnNldDogJG1kYy1jaGVja2JveC1tYXJrLXBhdGgtbGVuZ3RoXztcbiAgc3Ryb2tlLWRhc2hhcnJheTogJG1kYy1jaGVja2JveC1tYXJrLXBhdGgtbGVuZ3RoXztcbn1cblxuQG1peGluIG1kYy1jaGVja2JveF9fY2hlY2ttYXJrX19wYXRoLS1tYXJrZWRfIHtcbiAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7XG59XG5cbi8vIE1peGVkIG1hcmtcblxuQG1peGluIG1kYy1jaGVja2JveF9fbWl4ZWRtYXJrXyB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGZsb29yKCRtZGMtY2hlY2tib3gtbWFyay1zdHJva2Utc2l6ZSk7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDApIHJvdGF0ZSgwZGVnKTtcbiAgdHJhbnNpdGlvbjogbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZXhpdChvcGFjaXR5KSwgbWRjLWNoZWNrYm94LXRyYW5zaXRpb24tZXhpdCh0cmFuc2Zvcm0pO1xuICBvcGFjaXR5OiAwO1xufVxuXG5AbWl4aW4gbWRjLWNoZWNrYm94X19taXhlZG1hcmstLWNoZWNrZWRfIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMSkgcm90YXRlKC00NWRlZyk7XG59XG5cbkBtaXhpbiBtZGMtY2hlY2tib3hfX21peGVkbWFyay0taW5kZXRlcm1pbmF0ZV8ge1xuICB0cmFuc2Zvcm06IHNjYWxlWCgxKSByb3RhdGUoMGRlZyk7XG4gIG9wYWNpdHk6IDE7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9hbmltYXRpb24vdmFyaWFibGVzXCI7XG5AaW1wb3J0IFwiQG1hdGVyaWFsL3RoZW1lL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIi4va2V5ZnJhbWVzXCI7XG5cbi8vIEVuc3VyZSB0aGF0IHN0eWxlcyBuZWVkZWQgYnkgYW55IGNvbXBvbmVudCB1c2luZyBNREMgUmlwcGxlIGFyZSBlbWl0dGVkLCBidXQgb25seSBvbmNlLlxuLy8gKEV2ZXJ5IGNvbXBvbmVudCB1c2luZyBNREMgUmlwcGxlIGltcG9ydHMgdGhlc2UgbWl4aW5zLCBidXQgZG9lc24ndCBuZWNlc3NhcmlseSBpbXBvcnQgbWRjLXJpcHBsZS5zY3NzLilcblxuLy8gVGhpcyB2YXJpYWJsZSBpcyBub3QgaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBleHRlcm5hbGx5OyBpdCB1c2VzICFkZWZhdWx0IHRvIGF2b2lkIGJlaW5nIHJlc2V0XG4vLyBldmVyeSB0aW1lIHRoaXMgZmlsZSBpcyBpbXBvcnRlZC5cbiRtZGMtcmlwcGxlLWNvbW1vbi1zdHlsZXMtZW1pdHRlZF86IGZhbHNlICFkZWZhdWx0O1xuXG5AaWYgbm90ICRtZGMtcmlwcGxlLWNvbW1vbi1zdHlsZXMtZW1pdHRlZF8ge1xuICAkbWRjLXJpcHBsZS1jb21tb24tc3R5bGVzLWVtaXR0ZWRfOiB0cnVlO1xuXG4gIEBpbmNsdWRlIG1kYy1yaXBwbGUta2V5ZnJhbWVzXztcblxuICAvLyBTdHlsZXMgdXNlZCB0byBkZXRlY3QgYnVnZ3kgYmVoYXZpb3Igb2YgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzIGluIEVkZ2UuXG4gIC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTE0OTU0NDgvXG4gIC8vIFRoaXMgaXMgaW5jbHVkZWQgaW4gX21peGlucy5zY3NzIHJhdGhlciB0aGFuIG1kYy1yaXBwbGUuc2NzcyBzbyB0aGF0IGl0IHdpbGwgYmVcbiAgLy8gcHJlc2VudCBmb3Igb3RoZXIgY29tcG9uZW50cyB3aGljaCByZWx5IG9uIHJpcHBsZSBhcyB3ZWxsIGFzIG1kYy1yaXBwbGUgaXRzZWxmLlxuICAubWRjLXJpcHBsZS1zdXJmYWNlLS10ZXN0LWVkZ2UtdmFyLWJ1ZyB7XG4gICAgLS1tZGMtcmlwcGxlLXN1cmZhY2UtdGVzdC1lZGdlLXZhcjogMXB4IHNvbGlkICMwMDA7XG5cbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgYm9yZGVyOiB2YXIoLS1tZGMtcmlwcGxlLXN1cmZhY2UtdGVzdC1lZGdlLXZhcik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtZGMtcmlwcGxlLXN1cmZhY2UoKSB7XG4gIC0tbWRjLXJpcHBsZS1mZy1zaXplOiAwO1xuICAtLW1kYy1yaXBwbGUtbGVmdDogMDtcbiAgLS1tZGMtcmlwcGxlLXRvcDogMDtcbiAgLS1tZGMtcmlwcGxlLWZnLXNjYWxlOiAxO1xuICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZDogMDtcbiAgLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydDogMDtcblxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XG5cbiAgJjo6YmVmb3JlLFxuICAmOjphZnRlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjUwbXMgbGluZWFyO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBjb250ZW50OiBcIlwiO1xuICB9XG59XG5cbkBtaXhpbiBtZGMtcmlwcGxlLWNvbG9yKCRjb2xvcjogYmxhY2ssICRvcGFjaXR5OiAuMDYpIHtcbiAgLy8gT3BhY2l0eSBzdHlsZXMgYXJlIGhlcmUgKHJhdGhlciB0aGFuIGluIG1kYy1yaXBwbGUtc3VyZmFjZSkgdG8gZW5zdXJlIHRoYXQgb3BhY2l0eSBpcyByZS1pbml0aWFsaXplZCBmb3JcbiAgLy8gY2FzZXMgd2hlcmUgdGhpcyBtaXhpbiBpcyB1c2VkIHRvIG92ZXJyaWRlIGFub3RoZXIgaW5oZXJpdGVkIHVzZSBvZiBpdHNlbGYsXG4gIC8vIHdpdGhvdXQgbmVlZGluZyB0byByZS1pbmNsdWRlIG1kYy1yaXBwbGUtc3VyZmFjZS5cbiAgJjo6YmVmb3JlLFxuICAmOjphZnRlciB7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1jb2xvcl8oJGNvbG9yLCAkb3BhY2l0eSk7XG5cbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgLy8gTm90ZTogd2hlbiA6YWN0aXZlIGlzIGFwcGxpZWQsIDpmb2N1cyBpcyBhbHJlYWR5IGFwcGxpZWQsIHdoaWNoIHdpbGwgZWZmZWN0aXZlbHkgZG91YmxlIHRoZSBlZmZlY3QuXG4gICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKSB7XG4gICAgJjpob3Zlcjo6YmVmb3JlLFxuICAgICY6Zm9jdXM6OmJlZm9yZSxcbiAgICAmOmFjdGl2ZTo6YWZ0ZXIge1xuICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogODVtcztcbiAgICAgIG9wYWNpdHk6IC42O1xuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkOjpiZWZvcmUge1xuICAgIG9wYWNpdHk6IC45OTk5OTtcbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1hY3RpdmUtZmlsbDo6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxMjBtcztcbiAgICBvcGFjaXR5OiAxO1xuICB9XG5cbiAgLy8gRm9yZWdyb3VuZCByaXBwbGUgc3R5bGVzXG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkOjphZnRlciB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiAzMDBtcyBtZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiBmb3J3YXJkcywgODNtcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW4gZm9yd2FyZHM7XG4gIH1cblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uOjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiA4M21zIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQ7XG4gICAgLy8gUmV0YWluIHRyYW5zZm9ybSBmcm9tIG1kYy1yaXBwbGUtZmctcmFkaXVzLWluIGFjdGl2YXRpb25cbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XG4gIH1cbn1cblxuQG1peGluIG1kYy1yaXBwbGUtcmFkaXVzKCRyYWRpdXM6IDEwMCUpIHtcbiAgJjo6YmVmb3JlLFxuICAmOjphZnRlciB7XG4gICAgdG9wOiBjYWxjKDUwJSAtICN7JHJhZGl1c30pO1xuICAgIGxlZnQ6IGNhbGMoNTAlIC0gI3skcmFkaXVzfSk7XG4gICAgd2lkdGg6ICRyYWRpdXMgKiAyO1xuICAgIGhlaWdodDogJHJhZGl1cyAqIDI7XG4gIH1cblxuICAvLyBCYWNrZ3JvdW5kIHJpcHBsZSBzdHlsZXNcblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQ6OmJlZm9yZSB7XG4gICAgdG9wOiBjYWxjKDUwJSAtICN7JHJhZGl1c30pO1xuICAgIGxlZnQ6IGNhbGMoNTAlIC0gI3skcmFkaXVzfSk7XG4gICAgd2lkdGg6ICRyYWRpdXMgKiAyO1xuICAgIGhlaWdodDogJHJhZGl1cyAqIDI7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAwKSk7XG4gIH1cblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YmVmb3JlIHtcbiAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtICN7JHJhZGl1cyAvIDJ9KSk7XG4gICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCBjYWxjKDUwJSAtICN7JHJhZGl1cyAvIDJ9KSk7XG4gICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMCkpO1xuICB9XG5cbiAgLy8gRm9yZWdyb3VuZCByaXBwbGUgc3R5bGVzXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZDo6YWZ0ZXIge1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgIGhlaWdodDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG4gIH1cblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZDo6YWZ0ZXIge1xuICAgIHRvcDogdmFyKC0tbWRjLXJpcHBsZS10b3AsIDApO1xuICAgIGxlZnQ6IHZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCk7XG4gIH1cbn1cblxuQG1peGluIG1kYy1yaXBwbGUtY29sb3JfKCRjb2xvciwgJG9wYWNpdHkpIHtcbiAgLy8gc3R5bGVsaW50LWRpc2FibGUgYXQtcnVsZS1lbXB0eS1saW5lLWJlZm9yZSwgYmxvY2stY2xvc2luZy1icmFjZS1uZXdsaW5lLWFmdGVyXG4gIEBpZiB0eXBlLW9mKCRjb2xvcikgPT0gXCJjb2xvclwiIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRjb2xvciwgJG9wYWNpdHkpO1xuICB9IEBlbHNlIHtcbiAgICAvLyBBc3N1bWUgJGNvbG9yIGlzIGEgdGhlbWUgcHJvcGVydHkgbmFtZVxuICAgICR0aGVtZS12YWx1ZTogbWFwLWdldCgkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcywgJGNvbG9yKTtcbiAgICAkY3NzLXZhcjogdmFyKC0tbWRjLXRoZW1lLSN7JGNvbG9yfSwgJHRoZW1lLXZhbHVlKTtcblxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJHRoZW1lLXZhbHVlLCAkb3BhY2l0eSk7XG5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29sb3IvI21vZGlmeWluZy1jb2xvcnNcbiAgICAvLyBXaGlsZSB0aGlzIGlzIGN1cnJlbnRseSB1bnN1cHBvcnRlZCBhcyBvZiBub3csIGl0IHdpbGwgYmVnaW4gdG8gd29yayBieSBkZWZhdWx0IGFzIGJyb3dzZXJzXG4gICAgLy8gYmVnaW4gdG8gaW1wbGVtZW50IHRoZSBDU1MgNCBjb2xvciBzcGVjLlxuICAgIEBzdXBwb3J0cyAoYmFja2dyb3VuZC1jb2xvcjogY29sb3IoZ3JlZW4gYSgxMCUpKSkge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IoI3skY3NzLXZhcn0gYSgje3BlcmNlbnRhZ2UoJG9wYWNpdHkpfSkpO1xuICAgIH1cbiAgfVxuICAvLyBzdHlsZWxpbnQtZW5hYmxlIGF0LXJ1bGUtZW1wdHktbGluZS1iZWZvcmUsIGJsb2NrLWNsb3NpbmctYnJhY2UtbmV3bGluZS1hZnRlclxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbkBpbXBvcnQgXCIuL3ZhcmlhYmxlc1wiO1xuXG4vLyBBcHBsaWVzIHRoZSBjb3JyZWN0IHRoZW1lIGNvbG9yIHN0eWxlIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuXG4vLyAkcHJvcGVydHkgaXMgdHlwaWNhbGx5IGNvbG9yIG9yIGJhY2tncm91bmQtY29sb3IsIGJ1dCBjYW4gYmUgYW55IENTUyBwcm9wZXJ0eSB0aGF0IGFjY2VwdHMgY29sb3IgdmFsdWVzLlxuLy8gJHN0eWxlIHNob3VsZCBiZSBvbmUgb2YgdGhlIG1hcCBrZXlzIGluICRtZGMtdGhlbWUtcHJvcGVydHktdmFsdWVzIChfdmFyaWFibGVzLnNjc3MpLCBvciBhIGxpdGVyYWwgY29sb3IgdmFsdWUuXG4vLyAkZWRnZU9wdE91dCBjb250cm9scyB3aGV0aGVyIHRvIGZlYXR1cmUtZGV0ZWN0IGFyb3VuZCBFZGdlIHRvIGF2b2lkIGVtaXR0aW5nIENTUyB2YXJpYWJsZXMgZm9yIGl0LFxuLy8gaW50ZW5kZWQgZm9yIHVzZSBpbiBjYXNlcyB3aGVyZSBpbnRlcmFjdGlvbnMgd2l0aCBwc2V1ZG8tZWxlbWVudCBzdHlsZXMgY2F1c2UgcHJvYmxlbXMgZHVlIHRvIEVkZ2UgYnVncy5cbkBtaXhpbiBtZGMtdGhlbWUtcHJvcCgkcHJvcGVydHksICRzdHlsZSwgJGltcG9ydGFudDogZmFsc2UsICRlZGdlT3B0T3V0OiBmYWxzZSkge1xuICBAaWYgdHlwZS1vZigkc3R5bGUpID09IFwiY29sb3JcIiB7XG4gICAgQGlmICRpbXBvcnRhbnQge1xuICAgICAgI3skcHJvcGVydHl9OiAkc3R5bGUgIWltcG9ydGFudDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICN7JHByb3BlcnR5fTogJHN0eWxlO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmIG5vdCBtYXAtaGFzLWtleSgkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcywgJHN0eWxlKSB7XG4gICAgICBAZXJyb3IgXCJJbnZhbGlkIHN0eWxlOiAnI3skc3R5bGV9Jy4gQ2hvb3NlIG9uZSBvZjogI3ttYXAta2V5cygkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcyl9XCI7XG4gICAgfVxuXG4gICAgJHZhbHVlOiBtYXAtZ2V0KCRtZGMtdGhlbWUtcHJvcGVydHktdmFsdWVzLCAkc3R5bGUpO1xuXG4gICAgQGlmICRpbXBvcnRhbnQge1xuICAgICAgLyogQGFsdGVybmF0ZSAqL1xuICAgICAgI3skcHJvcGVydHl9OiAkdmFsdWUgIWltcG9ydGFudDtcblxuICAgICAgQGlmICRlZGdlT3B0T3V0IHtcbiAgICAgICAgLy8gc3R5bGVsaW50LWRpc2FibGUgbWF4LW5lc3RpbmctZGVwdGhcbiAgICAgICAgQGF0LXJvb3Qge1xuICAgICAgICAgIEBzdXBwb3J0cyBub3QgKC1tcy1pbWUtYWxpZ246YXV0bykge1xuICAgICAgICAgICAgLy8gc3R5bGVsaW50LWRpc2FibGUgc2Nzcy9zZWxlY3Rvci1uby1yZWR1bmRhbnQtbmVzdGluZy1zZWxlY3RvclxuICAgICAgICAgICAgJiB7XG4gICAgICAgICAgICAgICN7JHByb3BlcnR5fTogdmFyKC0tbWRjLXRoZW1lLSN7JHN0eWxlfSwgJHZhbHVlKSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3R5bGVsaW50LWVuYWJsZSBzY3NzL3NlbGVjdG9yLW5vLXJlZHVuZGFudC1uZXN0aW5nLXNlbGVjdG9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgbWF4LW5lc3RpbmctZGVwdGhcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAjeyRwcm9wZXJ0eX06IHZhcigtLW1kYy10aGVtZS0jeyRzdHlsZX0sICR2YWx1ZSkgIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICB9IEBlbHNlIHtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICAgICN7JHByb3BlcnR5fTogJHZhbHVlO1xuXG4gICAgICBAaWYgJGVkZ2VPcHRPdXQge1xuICAgICAgICAvLyBzdHlsZWxpbnQtZGlzYWJsZSBtYXgtbmVzdGluZy1kZXB0aFxuICAgICAgICBAYXQtcm9vdCB7XG4gICAgICAgICAgQHN1cHBvcnRzIG5vdCAoLW1zLWltZS1hbGlnbjphdXRvKSB7XG4gICAgICAgICAgICAvLyBzdHlsZWxpbnQtZGlzYWJsZSBzY3NzL3NlbGVjdG9yLW5vLXJlZHVuZGFudC1uZXN0aW5nLXNlbGVjdG9yXG4gICAgICAgICAgICAmIHtcbiAgICAgICAgICAgICAgI3skcHJvcGVydHl9OiB2YXIoLS1tZGMtdGhlbWUtI3skc3R5bGV9LCAkdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3R5bGVsaW50LWVuYWJsZSBzY3NzL3NlbGVjdG9yLW5vLXJlZHVuZGFudC1uZXN0aW5nLXNlbGVjdG9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgbWF4LW5lc3RpbmctZGVwdGhcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAjeyRwcm9wZXJ0eX06IHZhcigtLW1kYy10aGVtZS0jeyRzdHlsZX0sICR2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIENyZWF0ZXMgYSBydWxlIHRvIGJlIHVzZWQgaW4gTURDLVdlYiBjb21wb25lbnRzIGZvciBkYXJrIHRoZW1pbmcsIGFuZCBhcHBsaWVzIHRoZSBwcm92aWRlZCBjb250ZW50cy5cbi8vIFNob3VsZCBwcm92aWRlIHRoZSAkcm9vdC1zZWxlY3RvciBvcHRpb24gaWYgYXBwbGllZCB0byBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSByb290IHNlbGVjdG9yLlxuLy8gV2hlbiB1c2VkIHdpdGggYSBtb2RpZmllciBjbGFzcywgcHJvdmlkZSBhIHNlY29uZCBhcmd1bWVudCBvZiBgdHJ1ZWAgZm9yIHRoZSAkY29tcG91bmQgcGFyYW1ldGVyXG4vLyB0byBzcGVjaWZ5IHRoYXQgdGhpcyBzaG91bGQgYmUgYXR0YWNoZWQgYXMgYSBjb21wb3VuZCBjbGFzcy5cbi8vXG4vLyBVc2FnZSBleGFtcGxlOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgY29sb3I6IGJsYWNrO1xuLy9cbi8vICAgQGluY2x1ZGUgbWRjLXRoZW1lLWRhcmsge1xuLy8gICAgIGNvbG9yOiB3aGl0ZTtcbi8vICAgfVxuLy9cbi8vICAgJl9fYmFyIHtcbi8vICAgICBiYWNrZ3JvdW5kOiBibGFjaztcbi8vXG4vLyAgICAgQGluY2x1ZGUgbWRjLXRoZW1lLWRhcmsoXCIubWRjLWZvb1wiKSB7XG4vLyAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH1cbi8vXG4vLyAubWRjLWZvby0tZGlzYWJsZWQge1xuLy8gICBvcGFjaXR5OiAuMzg7XG4vL1xuLy8gICBAaW5jbHVkZSBtZGMtdGhlbWUtZGFyayhcIi5tZGMtZm9vXCIsIHRydWUpIHtcbi8vICAgICBvcGFjaXR5OiAuNTtcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG5AbWl4aW4gbWRjLXRoZW1lLWRhcmsoJHJvb3Qtc2VsZWN0b3I6IG51bGwsICRjb21wb3VuZDogZmFsc2UpIHtcbiAgQGlmICgkcm9vdC1zZWxlY3Rvcikge1xuICAgIEBhdC1yb290IHtcbiAgICAgIEBpZiAoJGNvbXBvdW5kKSB7XG4gICAgICAgICN7JHJvb3Qtc2VsZWN0b3J9LS10aGVtZS1kYXJrI3smfSxcbiAgICAgICAgLm1kYy10aGVtZS0tZGFyayAmIHtcbiAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfSBAZWxzZSB7XG4gICAgICAgICN7JHJvb3Qtc2VsZWN0b3J9LS10aGVtZS1kYXJrICYsXG4gICAgICAgIC5tZGMtdGhlbWUtLWRhcmsgJiB7XG4gICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICYtLXRoZW1lLWRhcmssXG4gICAgLm1kYy10aGVtZS0tZGFyayAmIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbkBpbXBvcnQgXCIuL2Z1bmN0aW9uc1wiO1xuXG4vL1xuLy8gTWFpbiB0aGVtZSBjb2xvcnMgZm9yIHlvdXIgYnJhbmQuXG4vL1xuLy8gSWYgeW91J3JlIGEgdXNlciBjdXN0b21pemluZyB5b3VyIGNvbG9yIHNjaGVtZSBpbiBTQVNTLCB0aGVzZSBhcmUgcHJvYmFibHkgdGhlIG9ubHkgdmFyaWFibGVzIHlvdSBuZWVkIHRvIGNoYW5nZS5cbi8vXG5cbiRtZGMtdGhlbWUtcHJpbWFyeTogIzNmNTFiNSAhZGVmYXVsdDsgLy8gSW5kaWdvIDUwMFxuJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0OiBtZGMtdGhlbWUtbGlnaHQtdmFyaWFudCgkbWRjLXRoZW1lLXByaW1hcnkpICFkZWZhdWx0O1xuJG1kYy10aGVtZS1wcmltYXJ5LWRhcms6IG1kYy10aGVtZS1kYXJrLXZhcmlhbnQoJG1kYy10aGVtZS1wcmltYXJ5KSAhZGVmYXVsdDtcblxuLy8gVGhlICRtZGMtdGhlbWUtYWNjZW50IHZhcmlhYmxlIGlzIERFUFJFQ0FURUQgLSBpdCBleGlzdHMgcHVyZWx5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuLy8gVGhlICRtZGMtdGhlbWUtc2Vjb25kYXJ5KiB2YXJpYWJsZXMgc2hvdWxkIGJlIHVzZWQgZm9yIGFsbCBuZXcgcHJvamVjdHMuXG4kbWRjLXRoZW1lLWFjY2VudDogI2ZmNDA4MSAhZGVmYXVsdDsgLy8gUGluayBBMjAwXG4kbWRjLXRoZW1lLXNlY29uZGFyeTogJG1kYy10aGVtZS1hY2NlbnQgIWRlZmF1bHQ7XG4kbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodDogbWRjLXRoZW1lLWxpZ2h0LXZhcmlhbnQoJG1kYy10aGVtZS1zZWNvbmRhcnkpICFkZWZhdWx0O1xuJG1kYy10aGVtZS1zZWNvbmRhcnktZGFyazogbWRjLXRoZW1lLWRhcmstdmFyaWFudCgkbWRjLXRoZW1lLXNlY29uZGFyeSkgIWRlZmF1bHQ7XG5cbiRtZGMtdGhlbWUtYmFja2dyb3VuZDogI2ZmZiAhZGVmYXVsdDsgLy8gV2hpdGVcblxuLy9cbi8vIFdoaWNoIHNldCBvZiB0ZXh0IGNvbG9ycyB0byB1c2UgZm9yIGVhY2ggbWFpbiB0aGVtZSBjb2xvciAobGlnaHQgb3IgZGFyaykuXG4vL1xuXG4kbWRjLXRoZW1lLXByaW1hcnktdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1wcmltYXJ5KTtcbiRtZGMtdGhlbWUtcHJpbWFyeS1saWdodC10b25lOiBtZGMtdGhlbWUtbGlnaHQtb3ItZGFyaygkbWRjLXRoZW1lLXByaW1hcnktbGlnaHQpO1xuJG1kYy10aGVtZS1wcmltYXJ5LWRhcmstdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1wcmltYXJ5LWRhcmspO1xuXG4kbWRjLXRoZW1lLXNlY29uZGFyeS10b25lOiBtZGMtdGhlbWUtbGlnaHQtb3ItZGFyaygkbWRjLXRoZW1lLXNlY29uZGFyeSk7XG4kbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodC10b25lOiBtZGMtdGhlbWUtbGlnaHQtb3ItZGFyaygkbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodCk7XG4kbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrLXRvbmU6IG1kYy10aGVtZS1saWdodC1vci1kYXJrKCRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmspO1xuXG4kbWRjLXRoZW1lLWJhY2tncm91bmQtdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1iYWNrZ3JvdW5kKTtcblxuLy9cbi8vIFRleHQgY29sb3JzIGFjY29yZGluZyB0byBsaWdodCB2cyBkYXJrIGFuZCB0ZXh0IHR5cGUuXG4vL1xuXG4kbWRjLXRoZW1lLXRleHQtY29sb3JzOiAoXG4gIGRhcms6IChcbiAgICBwcmltYXJ5OiByZ2JhKGJsYWNrLCAuODcpLFxuICAgIHNlY29uZGFyeTogcmdiYShibGFjaywgLjU0KSxcbiAgICBoaW50OiByZ2JhKGJsYWNrLCAuMzgpLFxuICAgIGRpc2FibGVkOiByZ2JhKGJsYWNrLCAuMzgpLFxuICAgIGljb246IHJnYmEoYmxhY2ssIC4zOClcbiAgKSxcbiAgbGlnaHQ6IChcbiAgICBwcmltYXJ5OiB3aGl0ZSxcbiAgICBzZWNvbmRhcnk6IHJnYmEod2hpdGUsIC43KSxcbiAgICBoaW50OiByZ2JhKHdoaXRlLCAuNSksXG4gICAgZGlzYWJsZWQ6IHJnYmEod2hpdGUsIC41KSxcbiAgICBpY29uOiByZ2JhKHdoaXRlLCAuNSlcbiAgKVxuKTtcblxuLy9cbi8vIFByaW1hcnkgdGV4dCBjb2xvcnMgZm9yIGVhY2ggb2YgdGhlIHRoZW1lIGNvbG9ycy5cbi8vXG5cbiRtZGMtdGhlbWUtcHJvcGVydHktdmFsdWVzOiAoXG4gIC8vIFByaW1hcnlcbiAgcHJpbWFyeTogJG1kYy10aGVtZS1wcmltYXJ5LFxuICBwcmltYXJ5LWxpZ2h0OiAkbWRjLXRoZW1lLXByaW1hcnktbGlnaHQsXG4gIHByaW1hcnktZGFyazogJG1kYy10aGVtZS1wcmltYXJ5LWRhcmssXG4gIC8vIFNlY29uZGFyeVxuICBzZWNvbmRhcnk6ICRtZGMtdGhlbWUtc2Vjb25kYXJ5LFxuICBzZWNvbmRhcnktbGlnaHQ6ICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWxpZ2h0LFxuICBzZWNvbmRhcnktZGFyazogJG1kYy10aGVtZS1zZWNvbmRhcnktZGFyayxcbiAgLy8gQmFja2dyb3VuZFxuICBiYWNrZ3JvdW5kOiAkbWRjLXRoZW1lLWJhY2tncm91bmQsXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcInByaW1hcnlcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1wcmltYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LXRvbmUpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tcHJpbWFyeTogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS10b25lKSwgc2Vjb25kYXJ5KSxcbiAgdGV4dC1oaW50LW9uLXByaW1hcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktdG9uZSksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLXByaW1hcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktdG9uZSksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLXByaW1hcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktdG9uZSksIGljb24pLFxuICAvLyBUZXh0LXByaW1hcnkgb24gXCJwcmltYXJ5LWxpZ2h0XCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tcHJpbWFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1saWdodC10b25lKSwgcHJpbWFyeSksXG4gIHRleHQtc2Vjb25kYXJ5LW9uLXByaW1hcnktbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktbGlnaHQtdG9uZSksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1wcmltYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0LXRvbmUpLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1wcmltYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0LXRvbmUpLCBkaXNhYmxlZCksXG4gIHRleHQtaWNvbi1vbi1wcmltYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0LXRvbmUpLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwicHJpbWFyeS1kYXJrXCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tcHJpbWFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWRhcmstdG9uZSksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1wcmltYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktZGFyay10b25lKSwgc2Vjb25kYXJ5KSxcbiAgdGV4dC1oaW50LW9uLXByaW1hcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrLXRvbmUpLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1wcmltYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktZGFyay10b25lKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tcHJpbWFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWRhcmstdG9uZSksIGljb24pLFxuICAvLyBUZXh0LXByaW1hcnkgb24gXCJzZWNvbmRhcnlcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1zZWNvbmRhcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS10b25lKSwgcHJpbWFyeSksXG4gIHRleHQtc2Vjb25kYXJ5LW9uLXNlY29uZGFyeTogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LXRvbmUpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tc2Vjb25kYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktdG9uZSksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLXNlY29uZGFyeTogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LXRvbmUpLCBkaXNhYmxlZCksXG4gIHRleHQtaWNvbi1vbi1zZWNvbmRhcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS10b25lKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcInNlY29uZGFyeS1saWdodFwiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLXNlY29uZGFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWxpZ2h0LXRvbmUpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tc2Vjb25kYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQtdG9uZSksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1zZWNvbmRhcnktbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodC10b25lKSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tc2Vjb25kYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQtdG9uZSksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLXNlY29uZGFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWxpZ2h0LXRvbmUpLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwic2Vjb25kYXJ5LWRhcmtcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1zZWNvbmRhcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmstdG9uZSksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1zZWNvbmRhcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmstdG9uZSksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1zZWNvbmRhcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmstdG9uZSksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLXNlY29uZGFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktZGFyay10b25lKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tc2Vjb25kYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrLXRvbmUpLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwiYmFja2dyb3VuZFwiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLWJhY2tncm91bmQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLWJhY2tncm91bmQtdG9uZSksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1iYWNrZ3JvdW5kOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1iYWNrZ3JvdW5kLXRvbmUpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tYmFja2dyb3VuZDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtYmFja2dyb3VuZC10b25lKSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tYmFja2dyb3VuZDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtYmFja2dyb3VuZC10b25lKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tYmFja2dyb3VuZDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtYmFja2dyb3VuZC10b25lKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcImxpZ2h0XCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBkYXJrKSwgcHJpbWFyeSksXG4gIHRleHQtc2Vjb25kYXJ5LW9uLWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgZGFyayksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGRhcmspLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGRhcmspLCBkaXNhYmxlZCksXG4gIHRleHQtaWNvbi1vbi1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGRhcmspLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwiZGFya1wiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBsaWdodCksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgbGlnaHQpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGxpZ2h0KSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGxpZ2h0KSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGxpZ2h0KSwgaWNvbilcbik7XG5cbi8vIElmIGAkcHJvcGVydHlgIGlzIGEgbGl0ZXJhbCBjb2xvciB2YWx1ZSAoZS5nLiwgYGJsdWVgLCBgI2ZmZmApLCBpdCBpcyByZXR1cm5lZCB2ZXJiYXRpbS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgb2YgdGhlXG4vLyBjb3JyZXNwb25kaW5nIHRoZW1lIHByb3BlcnR5IChmcm9tIGAkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlc2ApIGlzIHJldHVybmVkLiBJZiBgJHByb3BlcnR5YCBpcyBub3QgYSBjb2xvciBhbmQgbm9cbi8vIHN1Y2ggdGhlbWUgcHJvcGVydHkgZXhpc3RzLCBhbiBlcnJvciBpcyB0aHJvd24uXG4vL1xuLy8gVGhpcyBpcyBtYWlubHkgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgYG1kYy10aGVtZS1wcm9wYCBjYW5ub3QgYmUgdXNlZCBkaXJlY3RseSAoZS5nLiwgYGJveC1zaGFkb3dgKS5cbi8vXG4vLyBFeGFtcGxlczpcbi8vXG4vLyAxLiBtZGMtdGhlbWUtcHJvcC12YWx1ZShwcmltYXJ5KSA9PiBcIiMzZjUxYjVcIlxuLy8gMi4gbWRjLXRoZW1lLXByb3AtdmFsdWUoYmx1ZSkgICAgPT4gXCJibHVlXCJcbi8vXG4vLyBOT1RFOiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgZGVmaW5lZCBpbiBfdmFyaWFibGVzLnNjc3MgaW5zdGVhZCBvZiBfZnVuY3Rpb25zLnNjc3MgdG8gYXZvaWQgY2lyY3VsYXIgaW1wb3J0cy5cbkBmdW5jdGlvbiBtZGMtdGhlbWUtcHJvcC12YWx1ZSgkcHJvcGVydHkpIHtcbiAgQGlmIHR5cGUtb2YoJHByb3BlcnR5KSA9PSBjb2xvciB7XG4gICAgQHJldHVybiAkcHJvcGVydHk7XG4gIH1cblxuICBAaWYgbm90IG1hcC1oYXMta2V5KCRtZGMtdGhlbWUtcHJvcGVydHktdmFsdWVzLCAkcHJvcGVydHkpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHRoZW1lIHByb3BlcnR5OiAnI3skcHJvcGVydHl9Jy4gQ2hvb3NlIG9uZSBvZjogI3ttYXAta2V5cygkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcyl9XCI7XG4gIH1cblxuICBAcmV0dXJuIG1hcC1nZXQoJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMsICRwcm9wZXJ0eSk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIkBtYXRlcmlhbC9ydGwvbWl4aW5zXCI7XG5AaW1wb3J0IFwiQG1hdGVyaWFsL3RoZW1lL21peGluc1wiO1xuQGltcG9ydCBcIkBtYXRlcmlhbC90eXBvZ3JhcGh5L21peGluc1wiO1xuXG4kbWRjLWZvcm0tZmllbGQtaXRlbS1zcGFjaW5nOiA0cHg7XG5cbi8qIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLW1heC10eXBlICovXG4ubWRjLWZvcm0tZmllbGQge1xuICBAaW5jbHVkZSBtZGMtdHlwb2dyYXBoeShib2R5MSk7XG4gIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGNvbG9yLCB0ZXh0LXByaW1hcnktb24tbGlnaHQpO1xuXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuXG4gIEBpbmNsdWRlIG1kYy10aGVtZS1kYXJrIHtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChjb2xvciwgdGV4dC1wcmltYXJ5LW9uLWRhcmspO1xuICB9XG5cbiAgPiBsYWJlbCB7XG4gICAgb3JkZXI6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIHBhZGRpbmctbGVmdDogJG1kYy1mb3JtLWZpZWxkLWl0ZW0tc3BhY2luZztcbiAgfVxuXG4gIEBpbmNsdWRlIG1kYy1ydGwge1xuICAgID4gbGFiZWwge1xuICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAkbWRjLWZvcm0tZmllbGQtaXRlbS1zcGFjaW5nO1xuICAgIH1cbiAgfVxufVxuXG4ubWRjLWZvcm0tZmllbGQtLWFsaWduLWVuZCB7XG4gID4gbGFiZWwge1xuICAgIG9yZGVyOiAtMTtcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBwYWRkaW5nLXJpZ2h0OiAkbWRjLWZvcm0tZmllbGQtaXRlbS1zcGFjaW5nO1xuICB9XG5cbiAgQGluY2x1ZGUgbWRjLXJ0bCB7XG4gICAgPiBsYWJlbCB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6ICRtZGMtZm9ybS1maWVsZC1pdGVtLXNwYWNpbmc7XG4gICAgfVxuICB9XG59XG4vKiBzdHlsZWxpbnQtZW5hYmxlIHNlbGVjdG9yLW1heC10eXBlICovXG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy9cblxuQGltcG9ydCBcIi4vdmFyaWFibGVzXCI7XG5cbkBtaXhpbiBtZGMtdHlwb2dyYXBoeS1iYXNlIHtcbiAgZm9udC1mYW1pbHk6ICRtZGMtdHlwb2dyYXBoeS1mb250LWZhbWlseTtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG59XG5cbkBtaXhpbiBtZGMtdHlwb2dyYXBoeSgkc3R5bGUpIHtcbiAgJHN0eWxlLXByb3BzOiBtYXAtZ2V0KCRtZGMtdHlwb2dyYXBoeS1zdHlsZXMsICRzdHlsZSk7XG5cbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkbWRjLXR5cG9ncmFwaHktc3R5bGVzLCAkc3R5bGUpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHN0eWxlIHNwZWNpZmllZCEgQ2hvb3NlIG9uZSBvZiAje21hcC1rZXlzKCRtZGMtdHlwb2dyYXBoeS1zdHlsZXMpfVwiO1xuICB9XG5cbiAgQGluY2x1ZGUgbWRjLXR5cG9ncmFwaHktYmFzZTtcblxuICBmb250LXNpemU6IG1hcC1nZXQoJHN0eWxlLXByb3BzLCBmb250LXNpemUpO1xuICBmb250LXdlaWdodDogI3ttYXAtZ2V0KCRzdHlsZS1wcm9wcywgZm9udC13ZWlnaHQpfTtcbiAgbGV0dGVyLXNwYWNpbmc6IG1hcC1nZXQoJHN0eWxlLXByb3BzLCBsZXR0ZXItc3BhY2luZyk7XG4gIGxpbmUtaGVpZ2h0OiBtYXAtZ2V0KCRzdHlsZS1wcm9wcywgbGluZS1oZWlnaHQpO1xuICB0ZXh0LWRlY29yYXRpb246IG1hcC1nZXQoJHN0eWxlLXByb3BzLCB0ZXh0LWRlY29yYXRpb24pO1xuICB0ZXh0LXRyYW5zZm9ybTogbWFwLWdldCgkc3R5bGUtcHJvcHMsIHRleHQtdHJhbnNmb3JtKTtcbn1cblxuQG1peGluIG1kYy10eXBvZ3JhcGh5LWFkanVzdC1tYXJnaW4oJHN0eWxlKSB7XG4gIG1hcmdpbjogbWFwLWdldChtYXAtZ2V0KCRtZGMtdHlwb2dyYXBoeS1zdHlsZXMsICRzdHlsZSksIG1hcmdpbik7XG59XG5cbi8vIEVsZW1lbnQgbXVzdCBiZSBgZGlzcGxheTogYmxvY2tgIG9yIGBkaXNwbGF5OiBpbmxpbmUtYmxvY2tgIGZvciB0aGlzIHRvIHdvcmsuXG5AbWl4aW4gbWRjLXR5cG9ncmFwaHktb3ZlcmZsb3ctZWxsaXBzaXMge1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiLi92YXJpYWJsZXNcIjtcblxuLy8gQXBwbGllcyB0aGUgY29ycmVjdCB0aGVtZSBjb2xvciBzdHlsZSB0byB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LlxuLy8gJHByb3BlcnR5IGlzIHR5cGljYWxseSBjb2xvciBvciBiYWNrZ3JvdW5kLWNvbG9yLCBidXQgY2FuIGJlIGFueSBDU1MgcHJvcGVydHkgdGhhdCBhY2NlcHRzIGNvbG9yIHZhbHVlcy5cbi8vICRzdHlsZSBzaG91bGQgYmUgb25lIG9mIHRoZSBtYXAga2V5cyBpbiAkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcyAoX3ZhcmlhYmxlcy5zY3NzKSwgb3IgYSBsaXRlcmFsIGNvbG9yIHZhbHVlLlxuLy8gJGVkZ2VPcHRPdXQgY29udHJvbHMgd2hldGhlciB0byBmZWF0dXJlLWRldGVjdCBhcm91bmQgRWRnZSB0byBhdm9pZCBlbWl0dGluZyBDU1MgdmFyaWFibGVzIGZvciBpdCxcbi8vIGludGVuZGVkIGZvciB1c2UgaW4gY2FzZXMgd2hlcmUgaW50ZXJhY3Rpb25zIHdpdGggcHNldWRvLWVsZW1lbnQgc3R5bGVzIGNhdXNlIHByb2JsZW1zIGR1ZSB0byBFZGdlIGJ1Z3MuXG5AbWl4aW4gbWRjLXRoZW1lLXByb3AoJHByb3BlcnR5LCAkc3R5bGUsICRpbXBvcnRhbnQ6IGZhbHNlLCAkZWRnZU9wdE91dDogZmFsc2UpIHtcbiAgQGlmIHR5cGUtb2YoJHN0eWxlKSA9PSBcImNvbG9yXCIge1xuICAgIEBpZiAkaW1wb3J0YW50IHtcbiAgICAgICN7JHByb3BlcnR5fTogJHN0eWxlICFpbXBvcnRhbnQ7XG4gICAgfSBAZWxzZSB7XG4gICAgICAjeyRwcm9wZXJ0eX06ICRzdHlsZTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMsICRzdHlsZSkge1xuICAgICAgQGVycm9yIFwiSW52YWxpZCBzdHlsZTogJyN7JHN0eWxlfScuIENob29zZSBvbmUgb2Y6ICN7bWFwLWtleXMoJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMpfVwiO1xuICAgIH1cblxuICAgICR2YWx1ZTogbWFwLWdldCgkbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlcywgJHN0eWxlKTtcblxuICAgIEBpZiAkaW1wb3J0YW50IHtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICAgICN7JHByb3BlcnR5fTogJHZhbHVlICFpbXBvcnRhbnQ7XG5cbiAgICAgIEBpZiAkZWRnZU9wdE91dCB7XG4gICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIG1heC1uZXN0aW5nLWRlcHRoXG4gICAgICAgIEBhdC1yb290IHtcbiAgICAgICAgICBAc3VwcG9ydHMgbm90ICgtbXMtaW1lLWFsaWduOmF1dG8pIHtcbiAgICAgICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIHNjc3Mvc2VsZWN0b3Itbm8tcmVkdW5kYW50LW5lc3Rpbmctc2VsZWN0b3JcbiAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAjeyRwcm9wZXJ0eX06IHZhcigtLW1kYy10aGVtZS0jeyRzdHlsZX0sICR2YWx1ZSkgIWltcG9ydGFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgc2Nzcy9zZWxlY3Rvci1uby1yZWR1bmRhbnQtbmVzdGluZy1zZWxlY3RvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzdHlsZWxpbnQtZW5hYmxlIG1heC1uZXN0aW5nLWRlcHRoXG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgI3skcHJvcGVydHl9OiB2YXIoLS1tZGMtdGhlbWUtI3skc3R5bGV9LCAkdmFsdWUpICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgfSBAZWxzZSB7XG4gICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcblxuICAgICAgQGlmICRlZGdlT3B0T3V0IHtcbiAgICAgICAgLy8gc3R5bGVsaW50LWRpc2FibGUgbWF4LW5lc3RpbmctZGVwdGhcbiAgICAgICAgQGF0LXJvb3Qge1xuICAgICAgICAgIEBzdXBwb3J0cyBub3QgKC1tcy1pbWUtYWxpZ246YXV0bykge1xuICAgICAgICAgICAgLy8gc3R5bGVsaW50LWRpc2FibGUgc2Nzcy9zZWxlY3Rvci1uby1yZWR1bmRhbnQtbmVzdGluZy1zZWxlY3RvclxuICAgICAgICAgICAgJiB7XG4gICAgICAgICAgICAgICN7JHByb3BlcnR5fTogdmFyKC0tbWRjLXRoZW1lLSN7JHN0eWxlfSwgJHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgc2Nzcy9zZWxlY3Rvci1uby1yZWR1bmRhbnQtbmVzdGluZy1zZWxlY3RvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzdHlsZWxpbnQtZW5hYmxlIG1heC1uZXN0aW5nLWRlcHRoXG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgI3skcHJvcGVydHl9OiB2YXIoLS1tZGMtdGhlbWUtI3skc3R5bGV9LCAkdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBDcmVhdGVzIGEgcnVsZSB0byBiZSB1c2VkIGluIE1EQy1XZWIgY29tcG9uZW50cyBmb3IgZGFyayB0aGVtaW5nLCBhbmQgYXBwbGllcyB0aGUgcHJvdmlkZWQgY29udGVudHMuXG4vLyBTaG91bGQgcHJvdmlkZSB0aGUgJHJvb3Qtc2VsZWN0b3Igb3B0aW9uIGlmIGFwcGxpZWQgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiB0aGUgcm9vdCBzZWxlY3Rvci5cbi8vIFdoZW4gdXNlZCB3aXRoIGEgbW9kaWZpZXIgY2xhc3MsIHByb3ZpZGUgYSBzZWNvbmQgYXJndW1lbnQgb2YgYHRydWVgIGZvciB0aGUgJGNvbXBvdW5kIHBhcmFtZXRlclxuLy8gdG8gc3BlY2lmeSB0aGF0IHRoaXMgc2hvdWxkIGJlIGF0dGFjaGVkIGFzIGEgY29tcG91bmQgY2xhc3MuXG4vL1xuLy8gVXNhZ2UgZXhhbXBsZTpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIGNvbG9yOiBibGFjaztcbi8vXG4vLyAgIEBpbmNsdWRlIG1kYy10aGVtZS1kYXJrIHtcbi8vICAgICBjb2xvcjogd2hpdGU7XG4vLyAgIH1cbi8vXG4vLyAgICZfX2JhciB7XG4vLyAgICAgYmFja2dyb3VuZDogYmxhY2s7XG4vL1xuLy8gICAgIEBpbmNsdWRlIG1kYy10aGVtZS1kYXJrKFwiLm1kYy1mb29cIikge1xuLy8gICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4vLyAgICAgfVxuLy8gICB9XG4vLyB9XG4vL1xuLy8gLm1kYy1mb28tLWRpc2FibGVkIHtcbi8vICAgb3BhY2l0eTogLjM4O1xuLy9cbi8vICAgQGluY2x1ZGUgbWRjLXRoZW1lLWRhcmsoXCIubWRjLWZvb1wiLCB0cnVlKSB7XG4vLyAgICAgb3BhY2l0eTogLjU7XG4vLyAgIH1cbi8vIH1cbi8vIGBgYFxuQG1peGluIG1kYy10aGVtZS1kYXJrKCRyb290LXNlbGVjdG9yOiBudWxsLCAkY29tcG91bmQ6IGZhbHNlKSB7XG4gIEBpZiAoJHJvb3Qtc2VsZWN0b3IpIHtcbiAgICBAYXQtcm9vdCB7XG4gICAgICBAaWYgKCRjb21wb3VuZCkge1xuICAgICAgICAjeyRyb290LXNlbGVjdG9yfS0tdGhlbWUtZGFyayN7Jn0sXG4gICAgICAgIC5tZGMtdGhlbWUtLWRhcmsgJiB7XG4gICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAjeyRyb290LXNlbGVjdG9yfS0tdGhlbWUtZGFyayAmLFxuICAgICAgICAubWRjLXRoZW1lLS1kYXJrICYge1xuICAgICAgICAgIEBjb250ZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAmLS10aGVtZS1kYXJrLFxuICAgIC5tZGMtdGhlbWUtLWRhcmsgJiB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiLi9mdW5jdGlvbnNcIjtcblxuLy9cbi8vIE1haW4gdGhlbWUgY29sb3JzIGZvciB5b3VyIGJyYW5kLlxuLy9cbi8vIElmIHlvdSdyZSBhIHVzZXIgY3VzdG9taXppbmcgeW91ciBjb2xvciBzY2hlbWUgaW4gU0FTUywgdGhlc2UgYXJlIHByb2JhYmx5IHRoZSBvbmx5IHZhcmlhYmxlcyB5b3UgbmVlZCB0byBjaGFuZ2UuXG4vL1xuXG4kbWRjLXRoZW1lLXByaW1hcnk6ICMzZjUxYjUgIWRlZmF1bHQ7IC8vIEluZGlnbyA1MDBcbiRtZGMtdGhlbWUtcHJpbWFyeS1saWdodDogbWRjLXRoZW1lLWxpZ2h0LXZhcmlhbnQoJG1kYy10aGVtZS1wcmltYXJ5KSAhZGVmYXVsdDtcbiRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrOiBtZGMtdGhlbWUtZGFyay12YXJpYW50KCRtZGMtdGhlbWUtcHJpbWFyeSkgIWRlZmF1bHQ7XG5cbi8vIFRoZSAkbWRjLXRoZW1lLWFjY2VudCB2YXJpYWJsZSBpcyBERVBSRUNBVEVEIC0gaXQgZXhpc3RzIHB1cmVseSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbi8vIFRoZSAkbWRjLXRoZW1lLXNlY29uZGFyeSogdmFyaWFibGVzIHNob3VsZCBiZSB1c2VkIGZvciBhbGwgbmV3IHByb2plY3RzLlxuJG1kYy10aGVtZS1hY2NlbnQ6ICNmZjQwODEgIWRlZmF1bHQ7IC8vIFBpbmsgQTIwMFxuJG1kYy10aGVtZS1zZWNvbmRhcnk6ICRtZGMtdGhlbWUtYWNjZW50ICFkZWZhdWx0O1xuJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQ6IG1kYy10aGVtZS1saWdodC12YXJpYW50KCRtZGMtdGhlbWUtc2Vjb25kYXJ5KSAhZGVmYXVsdDtcbiRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcms6IG1kYy10aGVtZS1kYXJrLXZhcmlhbnQoJG1kYy10aGVtZS1zZWNvbmRhcnkpICFkZWZhdWx0O1xuXG4kbWRjLXRoZW1lLWJhY2tncm91bmQ6ICNmZmYgIWRlZmF1bHQ7IC8vIFdoaXRlXG5cbi8vXG4vLyBXaGljaCBzZXQgb2YgdGV4dCBjb2xvcnMgdG8gdXNlIGZvciBlYWNoIG1haW4gdGhlbWUgY29sb3IgKGxpZ2h0IG9yIGRhcmspLlxuLy9cblxuJG1kYy10aGVtZS1wcmltYXJ5LXRvbmU6IG1kYy10aGVtZS1saWdodC1vci1kYXJrKCRtZGMtdGhlbWUtcHJpbWFyeSk7XG4kbWRjLXRoZW1lLXByaW1hcnktbGlnaHQtdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0KTtcbiRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrLXRvbmU6IG1kYy10aGVtZS1saWdodC1vci1kYXJrKCRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrKTtcblxuJG1kYy10aGVtZS1zZWNvbmRhcnktdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1zZWNvbmRhcnkpO1xuJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQtdG9uZTogbWRjLXRoZW1lLWxpZ2h0LW9yLWRhcmsoJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQpO1xuJG1kYy10aGVtZS1zZWNvbmRhcnktZGFyay10b25lOiBtZGMtdGhlbWUtbGlnaHQtb3ItZGFyaygkbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrKTtcblxuJG1kYy10aGVtZS1iYWNrZ3JvdW5kLXRvbmU6IG1kYy10aGVtZS1saWdodC1vci1kYXJrKCRtZGMtdGhlbWUtYmFja2dyb3VuZCk7XG5cbi8vXG4vLyBUZXh0IGNvbG9ycyBhY2NvcmRpbmcgdG8gbGlnaHQgdnMgZGFyayBhbmQgdGV4dCB0eXBlLlxuLy9cblxuJG1kYy10aGVtZS10ZXh0LWNvbG9yczogKFxuICBkYXJrOiAoXG4gICAgcHJpbWFyeTogcmdiYShibGFjaywgLjg3KSxcbiAgICBzZWNvbmRhcnk6IHJnYmEoYmxhY2ssIC41NCksXG4gICAgaGludDogcmdiYShibGFjaywgLjM4KSxcbiAgICBkaXNhYmxlZDogcmdiYShibGFjaywgLjM4KSxcbiAgICBpY29uOiByZ2JhKGJsYWNrLCAuMzgpXG4gICksXG4gIGxpZ2h0OiAoXG4gICAgcHJpbWFyeTogd2hpdGUsXG4gICAgc2Vjb25kYXJ5OiByZ2JhKHdoaXRlLCAuNyksXG4gICAgaGludDogcmdiYSh3aGl0ZSwgLjUpLFxuICAgIGRpc2FibGVkOiByZ2JhKHdoaXRlLCAuNSksXG4gICAgaWNvbjogcmdiYSh3aGl0ZSwgLjUpXG4gIClcbik7XG5cbi8vXG4vLyBQcmltYXJ5IHRleHQgY29sb3JzIGZvciBlYWNoIG9mIHRoZSB0aGVtZSBjb2xvcnMuXG4vL1xuXG4kbWRjLXRoZW1lLXByb3BlcnR5LXZhbHVlczogKFxuICAvLyBQcmltYXJ5XG4gIHByaW1hcnk6ICRtZGMtdGhlbWUtcHJpbWFyeSxcbiAgcHJpbWFyeS1saWdodDogJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0LFxuICBwcmltYXJ5LWRhcms6ICRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrLFxuICAvLyBTZWNvbmRhcnlcbiAgc2Vjb25kYXJ5OiAkbWRjLXRoZW1lLXNlY29uZGFyeSxcbiAgc2Vjb25kYXJ5LWxpZ2h0OiAkbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodCxcbiAgc2Vjb25kYXJ5LWRhcms6ICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmssXG4gIC8vIEJhY2tncm91bmRcbiAgYmFja2dyb3VuZDogJG1kYy10aGVtZS1iYWNrZ3JvdW5kLFxuICAvLyBUZXh0LXByaW1hcnkgb24gXCJwcmltYXJ5XCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tcHJpbWFyeTogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS10b25lKSwgcHJpbWFyeSksXG4gIHRleHQtc2Vjb25kYXJ5LW9uLXByaW1hcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktdG9uZSksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1wcmltYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LXRvbmUpLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1wcmltYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LXRvbmUpLCBkaXNhYmxlZCksXG4gIHRleHQtaWNvbi1vbi1wcmltYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LXRvbmUpLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwicHJpbWFyeS1saWdodFwiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLXByaW1hcnktbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktbGlnaHQtdG9uZSksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1wcmltYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWxpZ2h0LXRvbmUpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tcHJpbWFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1saWdodC10b25lKSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tcHJpbWFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1saWdodC10b25lKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tcHJpbWFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1saWdodC10b25lKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcInByaW1hcnktZGFya1wiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLXByaW1hcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrLXRvbmUpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tcHJpbWFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWRhcmstdG9uZSksIHNlY29uZGFyeSksXG4gIHRleHQtaGludC1vbi1wcmltYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXByaW1hcnktZGFyay10b25lKSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tcHJpbWFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1wcmltYXJ5LWRhcmstdG9uZSksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLXByaW1hcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtcHJpbWFyeS1kYXJrLXRvbmUpLCBpY29uKSxcbiAgLy8gVGV4dC1wcmltYXJ5IG9uIFwic2Vjb25kYXJ5XCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tc2Vjb25kYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktdG9uZSksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1zZWNvbmRhcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS10b25lKSwgc2Vjb25kYXJ5KSxcbiAgdGV4dC1oaW50LW9uLXNlY29uZGFyeTogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LXRvbmUpLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1zZWNvbmRhcnk6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS10b25lKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tc2Vjb25kYXJ5OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktdG9uZSksIGljb24pLFxuICAvLyBUZXh0LXByaW1hcnkgb24gXCJzZWNvbmRhcnktbGlnaHRcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1zZWNvbmRhcnktbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodC10b25lKSwgcHJpbWFyeSksXG4gIHRleHQtc2Vjb25kYXJ5LW9uLXNlY29uZGFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWxpZ2h0LXRvbmUpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tc2Vjb25kYXJ5LWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktbGlnaHQtdG9uZSksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLXNlY29uZGFyeS1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWxpZ2h0LXRvbmUpLCBkaXNhYmxlZCksXG4gIHRleHQtaWNvbi1vbi1zZWNvbmRhcnktbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1saWdodC10b25lKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcInNlY29uZGFyeS1kYXJrXCIgYmFja2dyb3VuZFxuICB0ZXh0LXByaW1hcnktb24tc2Vjb25kYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrLXRvbmUpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tc2Vjb25kYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrLXRvbmUpLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tc2Vjb25kYXJ5LWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLXNlY29uZGFyeS1kYXJrLXRvbmUpLCBoaW50KSxcbiAgdGV4dC1kaXNhYmxlZC1vbi1zZWNvbmRhcnktZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtc2Vjb25kYXJ5LWRhcmstdG9uZSksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLXNlY29uZGFyeS1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1zZWNvbmRhcnktZGFyay10b25lKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcImJhY2tncm91bmRcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1iYWNrZ3JvdW5kOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgJG1kYy10aGVtZS1iYWNrZ3JvdW5kLXRvbmUpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tYmFja2dyb3VuZDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsICRtZGMtdGhlbWUtYmFja2dyb3VuZC10b25lKSwgc2Vjb25kYXJ5KSxcbiAgdGV4dC1oaW50LW9uLWJhY2tncm91bmQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLWJhY2tncm91bmQtdG9uZSksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLWJhY2tncm91bmQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLWJhY2tncm91bmQtdG9uZSksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLWJhY2tncm91bmQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCAkbWRjLXRoZW1lLWJhY2tncm91bmQtdG9uZSksIGljb24pLFxuICAvLyBUZXh0LXByaW1hcnkgb24gXCJsaWdodFwiIGJhY2tncm91bmRcbiAgdGV4dC1wcmltYXJ5LW9uLWxpZ2h0OiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgZGFyayksIHByaW1hcnkpLFxuICB0ZXh0LXNlY29uZGFyeS1vbi1saWdodDogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGRhcmspLCBzZWNvbmRhcnkpLFxuICB0ZXh0LWhpbnQtb24tbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBkYXJrKSwgaGludCksXG4gIHRleHQtZGlzYWJsZWQtb24tbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBkYXJrKSwgZGlzYWJsZWQpLFxuICB0ZXh0LWljb24tb24tbGlnaHQ6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBkYXJrKSwgaWNvbiksXG4gIC8vIFRleHQtcHJpbWFyeSBvbiBcImRhcmtcIiBiYWNrZ3JvdW5kXG4gIHRleHQtcHJpbWFyeS1vbi1kYXJrOiBtYXAtZ2V0KG1hcC1nZXQoJG1kYy10aGVtZS10ZXh0LWNvbG9ycywgbGlnaHQpLCBwcmltYXJ5KSxcbiAgdGV4dC1zZWNvbmRhcnktb24tZGFyazogbWFwLWdldChtYXAtZ2V0KCRtZGMtdGhlbWUtdGV4dC1jb2xvcnMsIGxpZ2h0KSwgc2Vjb25kYXJ5KSxcbiAgdGV4dC1oaW50LW9uLWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBsaWdodCksIGhpbnQpLFxuICB0ZXh0LWRpc2FibGVkLW9uLWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBsaWdodCksIGRpc2FibGVkKSxcbiAgdGV4dC1pY29uLW9uLWRhcms6IG1hcC1nZXQobWFwLWdldCgkbWRjLXRoZW1lLXRleHQtY29sb3JzLCBsaWdodCksIGljb24pXG4pO1xuIiwiQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC0xMDBcIjtcbiAgICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQuZW90XCIpO1xuICAgIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNMaWdodC9NdXNlb1NhbnNMaWdodC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNMaWdodC9NdXNlb1NhbnNMaWdodC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgICAgIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNMaWdodC9NdXNlb1NhbnNMaWdodC50dGZcIikgZm9ybWF0KFwidHRmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNMaWdodC9NdXNlb1NhbnNMaWdodC5zdmcjTXVzZW9TYW5zQ3lybC0xMDBcIikgZm9ybWF0KFwic3ZnXCIpO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogMzAwO1xufSIsIkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtMzAwXCI7XG4gICAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci5lb3RcIik7XG4gICAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNSZWd1bGFyL011c2VvU2Fuc1JlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhci50dGZcIikgZm9ybWF0KFwidHRmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNSZWd1bGFyL011c2VvU2Fuc1JlZ3VsYXIuc3ZnI011c2VvU2Fuc0N5cmwtMzAwXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbn0iLCJAZm9udC1mYWNlIHtcbiAgICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTUwMFwiO1xuICAgIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLmVvdFwiKTtcbiAgICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTWVkaXVtL011c2VvU2Fuc01lZGl1bS5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSxcbiAgICAgICAgIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTWVkaXVtL011c2VvU2Fuc01lZGl1bS50dGZcIikgZm9ybWF0KFwidHRmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNNZWRpdW0vTXVzZW9TYW5zTWVkaXVtLnN2ZyNNdXNlb1NhbnNDeXJsLTUwMFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG59IiwiQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC03MDBcIjtcbiAgICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkLmVvdFwiKTtcbiAgICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JvbGQvTXVzZW9TYW5zQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgICAgIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSxcbiAgICAgICAgIHVybChcIi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkLnR0ZlwiKSBmb3JtYXQoXCJ0dGZcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JvbGQvTXVzZW9TYW5zQm9sZC5zdmcjTXVzZW9TYW5zQ3lybC03MDBcIikgZm9ybWF0KFwic3ZnXCIpO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogZGVtaTtcbn0iLCJAZm9udC1mYWNlIHtcbiAgICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTkwMFwiO1xuICAgIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCbGFjay9NdXNlb1NhbnNCbGFjay5lb3RcIik7XG4gICAgc3JjOiB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCbGFjay9NdXNlb1NhbnNCbGFjay53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLnR0ZlwiKSBmb3JtYXQoXCJ0dGZcIiksXG4gICAgICAgICB1cmwoXCIvc3RhdGljL2ZvbnRzL011c2VvU2Fuc0JsYWNrL011c2VvU2Fuc0JsYWNrLnN2ZyNNdXNlb1NhbnNDeXJsLTkwMFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG59IiwiQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6IFwiaWNvbnNcIjtcbiAgICBzcmM6IHVybChcIi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMuZW90XCIpO1xuICAgIHNyYzogdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgICAgIHVybChcIi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy50dGZcIikgZm9ybWF0KFwidHRmXCIpLFxuICAgICAgICAgdXJsKFwiL3N0YXRpYy9mb250cy9pY29ucy9pY29ucy5zdmcjaWNvbnNcIikgZm9ybWF0KFwic3ZnXCIpO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogMzAwO1xufSIsIioge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmh0bWwsIGJvZHkge1xuICBoZWlnaHQ6IDEwMCU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuYnV0dG9uIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xufVxuXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmxpIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5pbnB1dCB7XG4gICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgYm9yZGVyOiBub25lO1xufVxuXG50ZXh0YXJlYSB7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgcmVzaXplOiBub25lO1xuICAgIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTtcbiAgICAtbW96LWJveC1zaGFkb3c6IG5vbmU7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbn0iLCIkdGV4dC1ibGFjazogIzFjMWMxYztcbiRhY2lkLWdyZWVuOiAjMDBlODcxO1xuJHdoaXRlOiB3aGl0ZTtcbiRncmV5OiAjY2NjY2NjO1xuJHRleHQtZ3JleTogIzkwOTA5MDtcbiRtaW50OiAjNmVjNDdmO1xuJG1hdGU6ICM0OGRhYTE7XG5cbiRmaWx0ZXItaXRlbS1ib3JkZXI6ICNmMmYyZjI7XG4kZmlsdGVyLWl0ZW0taG92ZXI6ICNmN2Y3Zjc7XG5cbiRib3JkZXI6ICNlN2VmZjQ7XG4kYm9yZGVyLWhvdmVyOiAjYjRjNmQyO1xuXG4kbGluay1jb2xvcjogIzM3NTdjNTtcblxuLmJ1dHRvbiB7XG4gICAgQGluY2x1ZGUgYm9sZCgpO1xufSIsIi8vLS0tLT4gQlJFQUtQT0lOVFNcbkBpbXBvcnQgJ3Nhc3MtbXEvbXEnO1xuXG4kbXEtYnJlYWtwb2ludHM6IChcbiAgICBtb2JpbGU6ICAzMjBweCxcbiAgICB0YWJsZXQ6ICA3NTBweCxcbiAgICBkZXNrdG9wOiA5NzBweCxcbiAgICB3aWRlOiAxMTcwcHgsXG4pO1xuLy8tLS0tPiBCUkVBS1BPSU5UUyBFTkRcblxuLy8tLS0tPiBNQVRFUklBTCBDT01QT05FTlRTXG5AaW1wb3J0ICdAbWF0ZXJpYWwvZWxldmF0aW9uL19taXhpbnMnO1xuQGltcG9ydCAnQG1hdGVyaWFsL3JpcHBsZS9fbWl4aW5zJztcbkBpbXBvcnQgJ0BtYXRlcmlhbC9idXR0b24vX21peGlucyc7XG5AaW1wb3J0ICdAbWF0ZXJpYWwvZmFiL19taXhpbnMnO1xuQGltcG9ydCAnQG1hdGVyaWFsL2NoZWNrYm94L21kYy1jaGVja2JveCc7XG5AaW1wb3J0ICdAbWF0ZXJpYWwvZm9ybS1maWVsZC9tZGMtZm9ybS1maWVsZCc7XG4vLy0tLS0+IE1BVEVSSUFMIENPTVBPTkVOVFMgRU5EXG5cbi8vLS0tLT4gVFlQT0dSQVBIWSBBTkQgSUNPTlNcbkBpbXBvcnQgJ25vZGVfbW9kdWxlcy9tb2R1bGFyc2NhbGUtc2Fzcy9zdHlsZXNoZWV0cy9tb2R1bGFyc2NhbGUnO1xuXG4kbW9kdWxhcnNjYWxlOiAoXG4gICAgYmFzZTogMXJlbSxcbiAgICByYXRpbzogJG1pbm9yLXRoaXJkXG4pO1xuXG5AaW1wb3J0ICcuLi8uLi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTGlnaHQvTXVzZW9TYW5zTGlnaHQnO1xuQGltcG9ydCAnLi4vLi4vc3RhdGljL2ZvbnRzL011c2VvU2Fuc1JlZ3VsYXIvTXVzZW9TYW5zUmVndWxhcic7XG5AaW1wb3J0ICcuLi8uLi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zTWVkaXVtL011c2VvU2Fuc01lZGl1bSc7XG5AaW1wb3J0ICcuLi8uLi9zdGF0aWMvZm9udHMvTXVzZW9TYW5zQm9sZC9NdXNlb1NhbnNCb2xkJztcbkBpbXBvcnQgJy4uLy4uL3N0YXRpYy9mb250cy9NdXNlb1NhbnNCbGFjay9NdXNlb1NhbnNCbGFjayc7XG5AaW1wb3J0ICcuLi8uLi9zdGF0aWMvZm9udHMvaWNvbnMvaWNvbnMnO1xuXG5AbWl4aW4gbGlnaHQge1xuICAgIGZvbnQtZmFtaWx5OiBcIk11c2VvU2Fuc0N5cmwtMTAwXCI7XG59XG5cbkBtaXhpbiByZWd1bGFyIHtcbiAgICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTMwMFwiO1xufVxuXG5AbWl4aW4gbWVkaXVtIHtcbiAgICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTUwMFwiO1xufVxuXG5AbWl4aW4gYm9sZCB7XG4gICAgZm9udC1mYW1pbHk6IFwiTXVzZW9TYW5zQ3lybC03MDBcIjtcbn1cblxuQG1peGluIGJsYWNrIHtcbiAgICBmb250LWZhbWlseTogXCJNdXNlb1NhbnNDeXJsLTkwMFwiO1xufVxuXG4vLyBJY29uc1xuLy8gQGltcG9ydCAndmFyaWFibGVzL19pb25pY29ucy12YXJpYWJsZXMuc2Nzcyc7XG4vLyBAaW1wb3J0ICcuLi9jc3MvaW9uaWNvbnMubWluLmNzcyc7XG4vLy0tLS0+IFRZUE9HUkFQSFkgRU5EXG5cbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9jb3JlL2FuaW1hdGlvbnMuc2Nzc1wiO1xuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2NvcmUvYmFzZS5zY3NzXCI7XG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvY29yZS9jb2xvcnMuc2Nzc1wiO1xuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2NvcmUvY29yZS5zY3NzXCI7XG5cblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjIEJMT0NLUyAjIyMjIyMjIyMjIyMjIyMjIyNcblxuLy8tLS0tPiBNSVNDRUxMQU5FT1VTXG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvYmxvY2tzL3RpdGxlL3RpdGxlLnNjc3NcIjtcblxuXG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvYmxvY2tzL2J1dHRvbi9idXR0b24uc2Nzc1wiO1xuXG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvYmxvY2tzL2ZhYi9mYWIuc2Nzc1wiO1xuXG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvYmxvY2tzL2ljb24vX192YXJpYWJsZXMuc2Nzc1wiO1xuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9pY29uL2ljb25zLnNjc3NcIjtcblxuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9saW5rL2xpbmsuc2Nzc1wiO1xuXG5AaW1wb3J0IFwiL2hvbWUvaGFnZW4vcHJvamVjdHMvdG9yZ29zdmV0L3Rvcmdvc3ZldC93ZWIvZnJvbnRlbmQvc3JjL3Nhc3MvYmxvY2tzL2lucHV0L2lucHV0LnNjc3NcIjtcblxuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9icmVhZGNydW1icy9icmVhZGNydW1icy5zY3NzXCI7XG5cbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvcmliYm9uL3JpYmJvbi5zY3NzXCI7XG5cbi8vLS0tLT4gTUlTQ0VMTEFORU9VUyBFTkRcblxuLy8tLS0tPiBIRUFERVJcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvaGVhZGVyLXRvcC9oZWFkZXItdG9wLnNjc3NcIjtcblxuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9oZWFkZXItYm90dG9tL2hlYWRlci1ib3R0b20uc2Nzc1wiO1xuXG4vLy0tLS0+IEhFQURFUiBFTkRcblxuLy8tLS0tPiBGT09URVJcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvZm9vdGVyLW1pZGRsZS9mb290ZXItbWlkZGxlLnNjc3NcIjtcblxuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9mb290ZXItYm90dG9tL2Zvb3Rlci1ib3R0b20uc2Nzc1wiO1xuXG4vLy0tLS0+IEZPT1RFUiBFTkRcblxuLy8tLS0tPiBTSURFLU1FTlVcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3Mvc2lkZS1tZW51L3NpZGUtbWVudS5zY3NzXCI7XG5cbi8vLS0tLT4gU0lERS1NRU5VIEVORFxuXG4vLy0tLS0+IFNJREUtTUVOVVxuQGltcG9ydCBcIi9ob21lL2hhZ2VuL3Byb2plY3RzL3Rvcmdvc3ZldC90b3Jnb3N2ZXQvd2ViL2Zyb250ZW5kL3NyYy9zYXNzL2Jsb2Nrcy9uYXYtbWVudS9uYXYtbWVudS5zY3NzXCI7XG5cbi8vLS0tLT4gU0lERS1NRU5VIEVORFxuXG4vLy0tLS0+IENBVEFMT0dcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvY2F0YWxvZy9jYXRhbG9nLnNjc3NcIjtcblxuLy8tLS0tPiBDQVRBTE9HIEVORFxuXG4vLy0tLS0+IEdBTExFUllcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvZ2FsbGVyeS9nYWxsZXJ5LnNjc3NcIjtcblxuLy8tLS0tPiBHQUxMRVJZIEVORFxuXG4vLy0tLS0+IENBUkRcbkBpbXBvcnQgXCIvaG9tZS9oYWdlbi9wcm9qZWN0cy90b3Jnb3N2ZXQvdG9yZ29zdmV0L3dlYi9mcm9udGVuZC9zcmMvc2Fzcy9ibG9ja3MvY2FyZC9jYXJkLnNjc3NcIjtcblxuLy8tLS0tPiBDQVJEIEVORFxuXG4vLyAjIyMjIyMjIyMjIyMjIyMjIyMgRU5EIEJMT0NLUyAjIyMjIyMjIyMjIyMjIyMjIyNcblxuXG5cblxuLy8gR0FSQkFHRVxuXG4ucm93X190aXRsZSB7XG4gICAgcGFkZGluZzogMjBweCAwcHggMTBweCAwcHg7XG4gICAgZm9udC1zaXplOiBtcygyKTtcbn1cblxuLnJvdyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbn1cblxuLmNvbnRlbnQtYXJlYV9jb21wb25lbnRzIHtcbiAgICBwYWRkaW5nOiA1MHB4IDE1cHggNTBweCAxNXB4O1xufVxuIiwiLm1haW4ge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZS1vdXQ7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG59XG5cbi5jbGVhcmZpeCB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMDtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBjbGVhcjogYm90aDtcbiAgICBoZWlnaHQ6IDA7XG4gIH1cbiAgXG5AbWl4aW4gY2xlYXJmaXgge1xuICAmOmFmdGVyIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAwO1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGhlaWdodDogMDtcbiAgfVxufVxuXG4uYWNpZC1ncmVlbiB7XG4gIGNvbG9yOiAkYWNpZC1ncmVlbjtcbn1cblxuQG1peGluIGFjaWQtZ3JlZW4ge1xuICBjb2xvcjogJGFjaWQtZ3JlZW47XG59XG5cbi5jb250ZW50LWFyZWEge1xuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICB3aWR0aDogMzIwcHg7XG4gIEBpbmNsdWRlIG1xKCRmcm9tOiB0YWJsZXQsICR1bnRpbDogZGVza3RvcCkge1xuICAgICAgd2lkdGg6IDc1MHB4O1xuICB9XG4gIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wLCAkdW50aWw6IHdpZGUpIHtcbiAgICAgIHdpZHRoOiA5NzBweDtcbiAgfVxuICBAaW5jbHVkZSBtcSgkZnJvbTogd2lkZSkge1xuICAgICAgd2lkdGg6IDExNzBweDtcbiAgfVxufVxuXG4uY29udGVudC1hcmVhX2ZsZXgge1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMHB4IDE1cHggMHB4IDE1cHg7XG4gIEBpbmNsdWRlIG1xKCRmcm9tOiB0YWJsZXQsICR1bnRpbDogZGVza3RvcCkge1xuICAgIHdpZHRoOiA3NTBweDtcbiAgfVxuICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCwgJHVudGlsOiB3aWRlKSB7XG4gICAgd2lkdGg6IDk3MHB4O1xuICB9XG4gIEBpbmNsdWRlIG1xKCRmcm9tOiB3aWRlKSB7XG4gICAgd2lkdGg6IDExNzBweDtcbiAgfVxufVxuXG5cbi5wYWdlLWNvbnRlbnQtd3JhcHBlciB7XG4gIG1hcmdpbi1ib3R0b206IC0zNzRweDtcbiAgbWluLWhlaWdodDogMTAwJTtcbiAgbWluLXdpZHRoOiAzMjBweDtcbiAgJjphZnRlciB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgaGVpZ2h0OiA2MDBweDtcbiAgfVxufVxuXG4ucGFnZS1mb290ZXIge1xuICBoZWlnaHQ6IDM3NHB4O1xuICBtaW4td2lkdGg6IDMyMHB4O1xufVxuXG5ib2R5IHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBjb2xvcjogJHRleHQtYmxhY2s7XG4gIEBpbmNsdWRlIG1lZGl1bSgpO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiOyAvLyBGaXhlcyBhbiBpc3N1ZSB3aGVyZSBSdWJ5IGxvY2FsZSBpcyBub3Qgc2V0IHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MtbXEvc2Fzcy1tcS9wdWxsLzEwXG5cbi8vLyBCYXNlIGZvbnQgc2l6ZSBvbiB0aGUgYDxib2R5PmAgZWxlbWVudFxuLy8vIEB0eXBlIE51bWJlciAodW5pdClcbiRtcS1iYXNlLWZvbnQtc2l6ZTogMTZweCAhZGVmYXVsdDtcblxuLy8vIFJlc3BvbnNpdmUgbW9kZVxuLy8vXG4vLy8gU2V0IHRvIGBmYWxzZWAgdG8gZW5hYmxlIHN1cHBvcnQgZm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgQG1lZGlhIHF1ZXJpZXMsXG4vLy8gKElFIDw9IDgsIEZpcmVmb3ggPD0gMywgT3BlcmEgPD0gOSlcbi8vL1xuLy8vIFlvdSBjb3VsZCBjcmVhdGUgYSBzdHlsZXNoZWV0IHNlcnZlZCBleGNsdXNpdmVseSB0byBvbGRlciBicm93c2Vycyxcbi8vLyB3aGVyZSBAbWVkaWEgcXVlcmllcyBhcmUgcmFzdGVyaXplZFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAvLyBvbGQtaWUuc2Nzc1xuLy8vICAkbXEtcmVzcG9uc2l2ZTogZmFsc2U7XG4vLy8gIEBpbXBvcnQgJ21haW4nOyAvLyBAbWVkaWEgcXVlcmllcyBpbiB0aGlzIGZpbGUgd2lsbCBiZSByYXN0ZXJpemVkIHVwIHRvICRtcS1zdGF0aWMtYnJlYWtwb2ludFxuLy8vICAgICAgICAgICAgICAgICAgIC8vIGxhcmdlciBicmVha3BvaW50cyB3aWxsIGJlIGlnbm9yZWRcbi8vL1xuLy8vIEB0eXBlIEJvb2xlYW5cbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI3Jlc3BvbnNpdmUtbW9kZS1vZmYgRGlzYWJsZWQgcmVzcG9uc2l2ZSBtb2RlIGRvY3VtZW50YXRpb25cbiRtcS1yZXNwb25zaXZlOiB0cnVlICFkZWZhdWx0O1xuXG4vLy8gQnJlYWtwb2ludCBsaXN0XG4vLy9cbi8vLyBOYW1lIHlvdXIgYnJlYWtwb2ludHMgaW4gYSB3YXkgdGhhdCBjcmVhdGVzIGEgdWJpcXVpdG91cyBsYW5ndWFnZVxuLy8vIGFjcm9zcyB0ZWFtIG1lbWJlcnMuIEl0IHdpbGwgaW1wcm92ZSBjb21tdW5pY2F0aW9uIGJldHdlZW5cbi8vLyBzdGFrZWhvbGRlcnMsIGRlc2lnbmVycywgZGV2ZWxvcGVycywgYW5kIHRlc3RlcnMuXG4vLy9cbi8vLyBAdHlwZSBNYXBcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI3NlZWluZy10aGUtY3VycmVudGx5LWFjdGl2ZS1icmVha3BvaW50IEZ1bGwgZG9jdW1lbnRhdGlvbiBhbmQgZXhhbXBsZXNcbiRtcS1icmVha3BvaW50czogKFxuICAgIG1vYmlsZTogIDMyMHB4LFxuICAgIHRhYmxldDogIDc0MHB4LFxuICAgIGRlc2t0b3A6IDk4MHB4LFxuICAgIHdpZGU6ICAgIDEzMDBweFxuKSAhZGVmYXVsdDtcblxuLy8vIFN0YXRpYyBicmVha3BvaW50IChmb3IgZml4ZWQtd2lkdGggbGF5b3V0cylcbi8vL1xuLy8vIERlZmluZSB0aGUgYnJlYWtwb2ludCBmcm9tICRtcS1icmVha3BvaW50cyB0aGF0IHNob3VsZFxuLy8vIGJlIHVzZWQgYXMgdGhlIHRhcmdldCB3aWR0aCBmb3IgdGhlIGZpeGVkLXdpZHRoIGxheW91dFxuLy8vIChpLmUuIHdoZW4gJG1xLXJlc3BvbnNpdmUgaXMgc2V0IHRvICdmYWxzZScpIGluIGEgb2xkLWllLnNjc3Ncbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgLy8gdGFibGV0LW9ubHkuc2Nzc1xuLy8vICAvL1xuLy8vICAvLyBJZ25vcmUgYWxsIHN0eWxlcyBhYm92ZSB0YWJsZXQgYnJlYWtwb2ludCxcbi8vLyAgLy8gYW5kIGZpeCB0aGUgc3R5bGVzIChlLmcuIGxheW91dCkgYXQgdGFibGV0IHdpZHRoXG4vLy8gICRtcS1yZXNwb25zaXZlOiBmYWxzZTtcbi8vLyAgJG1xLXN0YXRpYy1icmVha3BvaW50OiB0YWJsZXQ7XG4vLy8gIEBpbXBvcnQgJ21haW4nOyAvLyBAbWVkaWEgcXVlcmllcyBpbiB0aGlzIGZpbGUgd2lsbCBiZSByYXN0ZXJpemVkIHVwIHRvIHRhYmxldFxuLy8vICAgICAgICAgICAgICAgICAgIC8vIGxhcmdlciBicmVha3BvaW50cyB3aWxsIGJlIGlnbm9yZWRcbi8vL1xuLy8vIEB0eXBlIFN0cmluZ1xuLy8vIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzLW1xL3Nhc3MtbXEjYWRkaW5nLWN1c3RvbS1icmVha3BvaW50cyBGdWxsIGRvY3VtZW50YXRpb24gYW5kIGV4YW1wbGVzXG4kbXEtc3RhdGljLWJyZWFrcG9pbnQ6IGRlc2t0b3AgIWRlZmF1bHQ7XG5cbi8vLyBTaG93IGJyZWFrcG9pbnRzIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXG4vLy9cbi8vLyBJZiB5b3Ugd2FudCB0byBkaXNwbGF5IHRoZSBjdXJyZW50bHkgYWN0aXZlIGJyZWFrcG9pbnQgaW4gdGhlIHRvcFxuLy8vIHJpZ2h0IGNvcm5lciBvZiB5b3VyIHNpdGUgZHVyaW5nIGRldmVsb3BtZW50LCBhZGQgdGhlIGJyZWFrcG9pbnRzXG4vLy8gdG8gdGhpcyBsaXN0LCBvcmRlcmVkIGJ5IHdpZHRoLCBlLmcuIChtb2JpbGUsIHRhYmxldCwgZGVza3RvcCkuXG4vLy9cbi8vLyBAdHlwZSBtYXBcbiRtcS1zaG93LWJyZWFrcG9pbnRzOiAoKSAhZGVmYXVsdDtcblxuLy8vIEN1c3RvbWl6ZSB0aGUgbWVkaWEgdHlwZSAoZS5nLiBgQG1lZGlhIHNjcmVlbmAgb3IgYEBtZWRpYSBwcmludGApXG4vLy8gQnkgZGVmYXVsdCBzYXNzLW1xIHVzZXMgYW4gXCJhbGxcIiBtZWRpYSB0eXBlIChgQG1lZGlhIGFsbCBhbmQg4oCmYClcbi8vL1xuLy8vIEB0eXBlIFN0cmluZ1xuLy8vIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzLW1xL3Nhc3MtbXEjY2hhbmdpbmctbWVkaWEtdHlwZSBGdWxsIGRvY3VtZW50YXRpb24gYW5kIGV4YW1wbGVzXG4kbXEtbWVkaWEtdHlwZTogYWxsICFkZWZhdWx0O1xuXG4vLy8gQ29udmVydCBwaXhlbHMgdG8gZW1zXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHB4IC0gdmFsdWUgdG8gY29udmVydFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYmFzZS1mb250LXNpemUgKCRtcS1iYXNlLWZvbnQtc2l6ZSkgLSBgPGJvZHk+YCBmb250IHNpemVcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgJGZvbnQtc2l6ZS1pbi1lbXM6IG1xLXB4MmVtKDE2cHgpO1xuLy8vICBwIHsgZm9udC1zaXplOiBtcS1weDJlbSgxNnB4KTsgfVxuLy8vXG4vLy8gQHJlcXVpcmVzICRtcS1iYXNlLWZvbnQtc2l6ZVxuLy8vIEByZXR1cm5zIHtOdW1iZXJ9XG5AZnVuY3Rpb24gbXEtcHgyZW0oJHB4LCAkYmFzZS1mb250LXNpemU6ICRtcS1iYXNlLWZvbnQtc2l6ZSkge1xuICAgIEBpZiB1bml0bGVzcygkcHgpIHtcbiAgICAgICAgQHdhcm4gXCJBc3N1bWluZyAjeyRweH0gdG8gYmUgaW4gcGl4ZWxzLCBhdHRlbXB0aW5nIHRvIGNvbnZlcnQgaXQgaW50byBwaXhlbHMuXCI7XG4gICAgICAgIEByZXR1cm4gbXEtcHgyZW0oJHB4ICogMXB4LCAkYmFzZS1mb250LXNpemUpO1xuICAgIH0gQGVsc2UgaWYgdW5pdCgkcHgpID09IGVtIHtcbiAgICAgICAgQHJldHVybiAkcHg7XG4gICAgfVxuICAgIEByZXR1cm4gKCRweCAvICRiYXNlLWZvbnQtc2l6ZSkgKiAxZW07XG59XG5cbi8vLyBHZXQgYSBicmVha3BvaW50J3Mgd2lkdGhcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkbmFtZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQuIE9uZSBvZiAkbXEtYnJlYWtwb2ludHNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgJHRhYmxldC13aWR0aDogbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgodGFibGV0KTtcbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKGRlc2t0b3ApKSB7fVxuLy8vXG4vLy8gQHJlcXVpcmVzIHtWYXJpYWJsZX0gJG1xLWJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAcmV0dXJucyB7TnVtYmVyfSBWYWx1ZSBpbiBwaXhlbHNcbkBmdW5jdGlvbiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkbXEtYnJlYWtwb2ludHMpIHtcbiAgICBAaWYgbWFwLWhhcy1rZXkoJGJyZWFrcG9pbnRzLCAkbmFtZSkge1xuICAgICAgICBAcmV0dXJuIG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAgIEB3YXJuIFwiQnJlYWtwb2ludCAjeyRuYW1lfSB3YXNuJ3QgZm91bmQgaW4gJGJyZWFrcG9pbnRzLlwiO1xuICAgIH1cbn1cblxuLy8vIE1lZGlhIFF1ZXJ5IG1peGluXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZyB8IEJvb2xlYW59ICRmcm9tIChmYWxzZSkgLSBPbmUgb2YgJG1xLWJyZWFrcG9pbnRzXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBCb29sZWFufSAkdW50aWwgKGZhbHNlKSAtIE9uZSBvZiAkbXEtYnJlYWtwb2ludHNcbi8vLyBAcGFyYW0ge1N0cmluZyB8IEJvb2xlYW59ICRhbmQgKGZhbHNlKSAtIEFkZGl0aW9uYWwgbWVkaWEgcXVlcnkgcGFyYW1ldGVyc1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkbWVkaWEtdHlwZSAoJG1xLW1lZGlhLXR5cGUpIC0gTWVkaWEgdHlwZTogc2NyZWVuLCBwcmludOKAplxuLy8vXG4vLy8gQGlnbm9yZSBVbmRvY3VtZW50ZWQgQVBJLCBmb3IgYWR2YW5jZWQgdXNlIG9ubHk6XG4vLy8gQGlnbm9yZSBAcGFyYW0ge01hcH0gJGJyZWFrcG9pbnRzICgkbXEtYnJlYWtwb2ludHMpXG4vLy8gQGlnbm9yZSBAcGFyYW0ge1N0cmluZ30gJHN0YXRpYy1icmVha3BvaW50ICgkbXEtc3RhdGljLWJyZWFrcG9pbnQpXG4vLy9cbi8vLyBAY29udGVudCBzdHlsaW5nIHJ1bGVzLCB3cmFwcGVkIGludG8gYSBAbWVkaWEgcXVlcnkgd2hlbiAkcmVzcG9uc2l2ZSBpcyB0cnVlXG4vLy9cbi8vLyBAcmVxdWlyZXMge1ZhcmlhYmxlfSAkbXEtbWVkaWEtdHlwZVxuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1icmVha3BvaW50c1xuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1zdGF0aWMtYnJlYWtwb2ludFxuLy8vIEByZXF1aXJlcyB7ZnVuY3Rpb259IG1xLXB4MmVtXG4vLy8gQHJlcXVpcmVzIHtmdW5jdGlvbn0gbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGhcbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzLW1xL3Nhc3MtbXEjcmVzcG9uc2l2ZS1tb2RlLW9uLWRlZmF1bHQgRnVsbCBkb2N1bWVudGF0aW9uIGFuZCBleGFtcGxlc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAuZWxlbWVudCB7XG4vLy8gICAgQGluY2x1ZGUgbXEoJGZyb206IG1vYmlsZSkge1xuLy8vICAgICAgY29sb3I6IHJlZDtcbi8vLyAgICB9XG4vLy8gICAgQGluY2x1ZGUgbXEoJHVudGlsOiB0YWJsZXQpIHtcbi8vLyAgICAgIGNvbG9yOiBibHVlO1xuLy8vICAgIH1cbi8vLyAgICBAaW5jbHVkZSBtcShtb2JpbGUsIHRhYmxldCkge1xuLy8vICAgICAgY29sb3I6IGdyZWVuO1xuLy8vICAgIH1cbi8vLyAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0LCAkYW5kOiAnKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJykge1xuLy8vICAgICAgY29sb3I6IHRlYWw7XG4vLy8gICAgfVxuLy8vICAgIEBpbmNsdWRlIG1xKDk1MHB4KSB7XG4vLy8gICAgICBjb2xvcjogaG90cGluaztcbi8vLyAgICB9XG4vLy8gICAgQGluY2x1ZGUgbXEodGFibGV0LCAkbWVkaWEtdHlwZTogc2NyZWVuKSB7XG4vLy8gICAgICBjb2xvcjogaG90cGluaztcbi8vLyAgICB9XG4vLy8gICAgLy8gQWR2YW5jZWQgdXNlOlxuLy8vICAgICRteS1icmVha3BvaW50czogKEw6IDkwMHB4LCBYTDogMTIwMHB4KTtcbi8vLyAgICBAaW5jbHVkZSBtcShMLCAkYnJlYWtwb2ludHM6ICRteS1icmVha3BvaW50cywgJHN0YXRpYy1icmVha3BvaW50OiBMKSB7XG4vLy8gICAgICBjb2xvcjogaG90cGluaztcbi8vLyAgICB9XG4vLy8gIH1cbkBtaXhpbiBtcShcbiAgICAkZnJvbTogZmFsc2UsXG4gICAgJHVudGlsOiBmYWxzZSxcbiAgICAkYW5kOiBmYWxzZSxcbiAgICAkbWVkaWEtdHlwZTogJG1xLW1lZGlhLXR5cGUsXG4gICAgJGJyZWFrcG9pbnRzOiAkbXEtYnJlYWtwb2ludHMsXG4gICAgJHJlc3BvbnNpdmU6ICRtcS1yZXNwb25zaXZlLFxuICAgICRzdGF0aWMtYnJlYWtwb2ludDogJG1xLXN0YXRpYy1icmVha3BvaW50XG4pIHtcbiAgICAkbWluLXdpZHRoOiAwO1xuICAgICRtYXgtd2lkdGg6IDA7XG4gICAgJG1lZGlhLXF1ZXJ5OiAnJztcblxuICAgIC8vIEZyb206IHRoaXMgYnJlYWtwb2ludCAoaW5jbHVzaXZlKVxuICAgIEBpZiAkZnJvbSB7XG4gICAgICAgIEBpZiB0eXBlLW9mKCRmcm9tKSA9PSBudW1iZXIge1xuICAgICAgICAgICAgJG1pbi13aWR0aDogbXEtcHgyZW0oJGZyb20pO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAgICRtaW4td2lkdGg6IG1xLXB4MmVtKG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRmcm9tLCAkYnJlYWtwb2ludHMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVudGlsOiB0aGF0IGJyZWFrcG9pbnQgKGV4Y2x1c2l2ZSlcbiAgICBAaWYgJHVudGlsIHtcbiAgICAgICAgQGlmIHR5cGUtb2YoJHVudGlsKSA9PSBudW1iZXIge1xuICAgICAgICAgICAgJG1heC13aWR0aDogbXEtcHgyZW0oJHVudGlsKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgICAkbWF4LXdpZHRoOiBtcS1weDJlbShtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkdW50aWwsICRicmVha3BvaW50cykpIC0gLjAxZW07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXNwb25zaXZlIHN1cHBvcnQgaXMgZGlzYWJsZWQsIHJhc3Rlcml6ZSB0aGUgb3V0cHV0IG91dHNpZGUgQG1lZGlhIGJsb2Nrc1xuICAgIC8vIFRoZSBicm93c2VyIHdpbGwgcmVseSBvbiB0aGUgY2FzY2FkZSBpdHNlbGYuXG4gICAgQGlmICRyZXNwb25zaXZlID09IGZhbHNlIHtcbiAgICAgICAgJHN0YXRpYy1icmVha3BvaW50LXdpZHRoOiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkc3RhdGljLWJyZWFrcG9pbnQsICRicmVha3BvaW50cyk7XG4gICAgICAgICR0YXJnZXQtd2lkdGg6IG1xLXB4MmVtKCRzdGF0aWMtYnJlYWtwb2ludC13aWR0aCk7XG5cbiAgICAgICAgLy8gT3V0cHV0IG9ubHkgcnVsZXMgdGhhdCBzdGFydCBhdCBvciBzcGFuIG91ciB0YXJnZXQgd2lkdGhcbiAgICAgICAgQGlmIChcbiAgICAgICAgICAgICRhbmQgPT0gZmFsc2VcbiAgICAgICAgICAgIGFuZCAkbWluLXdpZHRoIDw9ICR0YXJnZXQtd2lkdGhcbiAgICAgICAgICAgIGFuZCAoXG4gICAgICAgICAgICAgICAgJHVudGlsID09IGZhbHNlIG9yICRtYXgtd2lkdGggPj0gJHRhcmdldC13aWR0aFxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIEBjb250ZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVzcG9uc2l2ZSBzdXBwb3J0IGlzIGVuYWJsZWQsIG91dHB1dCBydWxlcyBpbnNpZGUgQG1lZGlhIHF1ZXJpZXNcbiAgICBAZWxzZSB7XG4gICAgICAgIEBpZiAkbWluLXdpZHRoICE9IDAgeyAkbWVkaWEtcXVlcnk6ICcjeyRtZWRpYS1xdWVyeX0gYW5kIChtaW4td2lkdGg6ICN7JG1pbi13aWR0aH0pJzsgfVxuICAgICAgICBAaWYgJG1heC13aWR0aCAhPSAwIHsgJG1lZGlhLXF1ZXJ5OiAnI3skbWVkaWEtcXVlcnl9IGFuZCAobWF4LXdpZHRoOiAjeyRtYXgtd2lkdGh9KSc7IH1cbiAgICAgICAgQGlmICRhbmQgICAgICAgICAgICB7ICRtZWRpYS1xdWVyeTogJyN7JG1lZGlhLXF1ZXJ5fSBhbmQgI3skYW5kfSc7IH1cblxuICAgICAgICAvLyBSZW1vdmUgdW5uZWNlc3NhcnkgbWVkaWEgcXVlcnkgcHJlZml4ICdhbGwgYW5kICdcbiAgICAgICAgQGlmICgkbWVkaWEtdHlwZSA9PSAnYWxsJyBhbmQgJG1lZGlhLXF1ZXJ5ICE9ICcnKSB7XG4gICAgICAgICAgICAkbWVkaWEtdHlwZTogJyc7XG4gICAgICAgICAgICAkbWVkaWEtcXVlcnk6IHN0ci1zbGljZSh1bnF1b3RlKCRtZWRpYS1xdWVyeSksIDYpO1xuICAgICAgICB9XG5cbiAgICAgICAgQG1lZGlhICN7JG1lZGlhLXR5cGUgKyAkbWVkaWEtcXVlcnl9IHtcbiAgICAgICAgICAgIEBjb250ZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLy8gQWRkIGEgYnJlYWtwb2ludFxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRuYW1lIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkd2lkdGggLSBXaWR0aCBvZiB0aGUgYnJlYWtwb2ludFxuLy8vXG4vLy8gQHJlcXVpcmVzIHtWYXJpYWJsZX0gJG1xLWJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gIEBpbmNsdWRlIG1xLWFkZC1icmVha3BvaW50KHR2c2NyZWVuLCAxOTIwcHgpO1xuLy8vICBAaW5jbHVkZSBtcSh0dnNjcmVlbikge31cbkBtaXhpbiBtcS1hZGQtYnJlYWtwb2ludCgkbmFtZSwgJHdpZHRoKSB7XG4gICAgJG5ldy1icmVha3BvaW50OiAoJG5hbWU6ICR3aWR0aCk7XG4gICAgJG1xLWJyZWFrcG9pbnRzOiBtYXAtbWVyZ2UoJG1xLWJyZWFrcG9pbnRzLCAkbmV3LWJyZWFrcG9pbnQpICFnbG9iYWw7XG59XG5cbi8vLyBTaG93IHRoZSBhY3RpdmUgYnJlYWtwb2ludCBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lciBvZiB0aGUgdmlld3BvcnRcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xI3NlZWluZy10aGUtY3VycmVudGx5LWFjdGl2ZS1icmVha3BvaW50XG4vLy9cbi8vLyBAcGFyYW0ge0xpc3R9ICRzaG93LWJyZWFrcG9pbnRzICgkbXEtc2hvdy1icmVha3BvaW50cykgLSBMaXN0IG9mIGJyZWFrcG9pbnRzIHRvIHNob3cgaW4gdGhlIHRvcCByaWdodCBjb3JuZXJcbi8vLyBAcGFyYW0ge01hcH0gJGJyZWFrcG9pbnRzICgkbXEtYnJlYWtwb2ludHMpIC0gQnJlYWtwb2ludCBuYW1lcyBhbmQgc2l6ZXNcbi8vL1xuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1icmVha3BvaW50c1xuLy8vIEByZXF1aXJlcyB7VmFyaWFibGV9ICRtcS1zaG93LWJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gIC8vIFNob3cgYnJlYWtwb2ludHMgdXNpbmcgZ2xvYmFsIHNldHRpbmdzXG4vLy8gIEBpbmNsdWRlIG1xLXNob3ctYnJlYWtwb2ludHM7XG4vLy9cbi8vLyAgLy8gU2hvdyBicmVha3BvaW50cyB1c2luZyBjdXN0b20gc2V0dGluZ3Ncbi8vLyAgQGluY2x1ZGUgbXEtc2hvdy1icmVha3BvaW50cygoTCwgWEwpLCAoUzogMzAwcHgsIEw6IDgwMHB4LCBYTDogMTIwMHB4KSk7XG5AbWl4aW4gbXEtc2hvdy1icmVha3BvaW50cygkc2hvdy1icmVha3BvaW50czogJG1xLXNob3ctYnJlYWtwb2ludHMsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzKSB7XG4gICAgYm9keTpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNGOEUzO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0ZCRUVENTtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjRkJFRUQ1O1xuICAgICAgICBjb2xvcjogI0MwOTg1MztcbiAgICAgICAgZm9udDogc21hbGwtY2FwdGlvbjtcbiAgICAgICAgcGFkZGluZzogM3B4IDZweDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgei1pbmRleDogMTAwO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgdGhhdCBzaG91bGQgYmUgc2hvd25cbiAgICAgICAgQGVhY2ggJHNob3ctYnJlYWtwb2ludCBpbiAkc2hvdy1icmVha3BvaW50cyB7XG4gICAgICAgICAgICAkd2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRzaG93LWJyZWFrcG9pbnQsICRicmVha3BvaW50cyk7XG4gICAgICAgICAgICBAaW5jbHVkZSBtcSgkc2hvdy1icmVha3BvaW50LCAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiI3skc2hvdy1icmVha3BvaW50fSDiiaUgI3skd2lkdGh9ICgje21xLXB4MmVtKCR3aWR0aCl9KVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5AaWYgbGVuZ3RoKCRtcS1zaG93LWJyZWFrcG9pbnRzKSA+IDAge1xuICAgIEBpbmNsdWRlIG1xLXNob3ctYnJlYWtwb2ludHM7XG59XG4iLCIudGl0bGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDBweCAwcHggMTVweCAwcHg7XG4gICAgZm9udC1zaXplOiBtcygyKTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjZWVlO1xuICAgIEBpbmNsdWRlIGJvbGQoKTtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogbXMoMyk7XG4gICAgfVxufSIsIkBmdW5jdGlvbiBtcy1mdW5jdGlvbigkdjogMCwgJGJhc2U6IGZhbHNlLCAkcmF0aW86IGZhbHNlLCAkdGhyZWFkOiBmYWxzZSwgJHNldHRpbmdzOiAkbW9kdWxhcnNjYWxlKSB7XG5cbiAgLy8gUGFyc2Ugc2V0dGluZ3NcbiAgJG1zLXNldHRpbmdzOiBtcy1zZXR0aW5ncygkYmFzZSwkcmF0aW8sJHRocmVhZCwkc2V0dGluZ3MpO1xuICAkYmFzZTogbnRoKCRtcy1zZXR0aW5ncywgMSk7XG4gICRyYXRpbzogbnRoKCRtcy1zZXR0aW5ncywgMik7XG5cbiAgLy8gUmVuZGVyIHRhcmdldCB2YWx1ZXMgZnJvbSBzZXR0aW5ncy5cbiAgQGlmIHVuaXQoJHJhdGlvKSAhPSAnJyB7XG4gICAgJHJhdGlvOiBtcy10YXJnZXQoJHJhdGlvLCRiYXNlKVxuICB9XG5cbiAgLy8gRmFzdCBjYWxjIGlmIG5vdCBtdWx0aSBzdHJhbmRlZFxuICBAaWYobGVuZ3RoKCRiYXNlKSA9PSAxKSB7XG4gICAgQHJldHVybiBtcy1yb3VuZC1weChtcy1wb3coJHJhdGlvLCAkdikgKiAkYmFzZSk7XG4gIH1cblxuICAvLyBDcmVhdGUgbmV3IGJhc2UgYXJyYXlcbiAgJG1zLWJhc2VzOiBudGgoJGJhc2UsMSk7XG5cbiAgLy8gTm9ybWFsaXplIGJhc2UgdmFsdWVzXG4gIEBmb3IgJGkgZnJvbSAyIHRocm91Z2ggbGVuZ3RoKCRiYXNlKSB7XG4gICAgLy8gaW5pdGlhbCBiYXNlIHZhbHVlXG4gICAgJG1zLWJhc2U6IG50aCgkYmFzZSwkaSk7XG4gICAgLy8gSWYgdGhlIGJhc2UgaXMgYmlnZ2VyIHRoYW4gdGhlIG1haW4gYmFzZVxuICAgIEBpZigkbXMtYmFzZSA+IG50aCgkYmFzZSwxKSkge1xuICAgICAgLy8gZGl2aWRlIHRoZSB2YWx1ZSB1bnRpbCBpdCBhbGlnbnMgd2l0aCBtYWluIGJhc2UuXG4gICAgICBAd2hpbGUoJG1zLWJhc2UgPiBudGgoJGJhc2UsMSkpIHtcbiAgICAgICAgJG1zLWJhc2U6ICRtcy1iYXNlIC8gJHJhdGlvO1xuICAgICAgfVxuICAgICAgJG1zLWJhc2U6ICRtcy1iYXNlICogJHJhdGlvO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgYmFzZSBpcyBzbWFsbGVyIHRoYW4gdGhlIG1haW4gYmFzZS5cbiAgICBAZWxzZWlmICgkbXMtYmFzZSA8IG50aCgkYmFzZSwxKSkge1xuICAgICAgLy8gcHVtcCB1cCB0aGUgdmFsdWUgdW50aWwgaXQgYWxpZ25zIHdpdGggbWFpbiBiYXNlLlxuICAgICAgQHdoaWxlICRtcy1iYXNlIDwgbnRoKCRiYXNlLDEpIHtcbiAgICAgICAgJG1zLWJhc2U6ICRtcy1iYXNlICogJHJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQdXNoIGludG8gbmV3IGFycmF5XG4gICAgJG1zLWJhc2VzOiBhcHBlbmQoJG1zLWJhc2VzLCRtcy1iYXNlKTtcbiAgfVxuXG4gIC8vIFNvcnQgYXJyYXkgZnJvbSBzbWFsbGVzdCB0byBsYXJnZXN0LlxuICAkbXMtYmFzZXM6IG1zLXNvcnQoJG1zLWJhc2VzKTtcblxuICAvLyBGaW5kIHN0ZXAgdG8gdXNlIGluIGNhbGN1bGF0aW9uXG4gICR2dGVwOiBmbG9vcigkdiAvIGxlbmd0aCgkbXMtYmFzZXMpKTtcbiAgLy8gRmluZCBiYXNlIHRvIHVzZSBpbiBjYWxjdWxhdGlvblxuICAkbXMtYmFzZTogcm91bmQoKCR2IC8gbGVuZ3RoKCRtcy1iYXNlcykgLSAkdnRlcCkgKiBsZW5ndGgoJG1zLWJhc2VzKSkgKyAxO1xuXG4gIEByZXR1cm4gbXMtcm91bmQtcHgobXMtcG93KCRyYXRpbywgJHZ0ZXApICogbnRoKCRtcy1iYXNlcywkbXMtYmFzZSkpO1xufSIsIi5idXR0b24ge1xuICAgIEBpbmNsdWRlIG1kYy1idXR0b24tYmFzZV87XG4gICAgQGluY2x1ZGUgbWRjLWJ1dHRvbi1jb3JuZXItcmFkaXVzKDJweCk7XG4gICAgQGluY2x1ZGUgbWRjLWJ1dHRvbi1jb250YWluZXItZmlsbC1jb2xvcih0cmFuc3BhcmVudCk7XG4gICAgQGluY2x1ZGUgbWRjLWJ1dHRvbi1pbmstY29sb3IocHJpbWFyeSk7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1jb2xvcihwcmltYXJ5LCAkbWRjLXVuZmlsbGVkLWJ1dHRvbi1yaXBwbGUtb3BhY2l0eSk7XG4gICAgQGluY2x1ZGUgbWVkaXVtKCk7XG59XG5cblxuLmJ1dHRvbl9yYWlzZWQsXG4uYnV0dG9uX3VuZWxldmF0ZWQge1xuICBAaW5jbHVkZSBtZGMtYnV0dG9uLS1maWxsZWRfO1xuICBAaW5jbHVkZSBtZGMtYnV0dG9uLWNvbnRhaW5lci1maWxsLWNvbG9yKHByaW1hcnkpO1xuICBAaW5jbHVkZSBtZGMtYnV0dG9uLWluay1jb2xvcih0ZXh0LXByaW1hcnktb24tcHJpbWFyeSk7XG4gIEBpbmNsdWRlIG1kYy1yaXBwbGUtY29sb3IodGV4dC1wcmltYXJ5LW9uLXByaW1hcnksICRtZGMtZmlsbGVkLWJ1dHRvbi1yaXBwbGUtb3BhY2l0eSk7XG59XG5cbi5idXR0b25fcmFpc2VkIHtcbiAgQGluY2x1ZGUgbWRjLWJ1dHRvbi0tcmFpc2VkXztcbn1cblxuLmJ1dHRvbl9zdHJva2VkIHtcbiAgICBAaW5jbHVkZSBtZGMtYnV0dG9uLS1zdHJva2VkXztcbiAgICBAaW5jbHVkZSBtZGMtYnV0dG9uLXN0cm9rZS13aWR0aCgycHgpO1xuICAgIEBpbmNsdWRlIG1kYy1idXR0b24tc3Ryb2tlLWNvbG9yKHByaW1hcnkpO1xufVxuXG4uYnV0dG9uX2NvbXBhY3Qge1xuICAgIEBpbmNsdWRlIG1kYy1idXR0b24tLWNvbXBhY3RfO1xufVxuXG4uYnV0dG9uX2RlbnNlIHtcbiAgICBAaW5jbHVkZSBtZGMtYnV0dG9uLS1kZW5zZV8oKTsgICAgICBcbn1cblxuLmJ1dHRvbl9yb3VuZCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGhlaWdodDogNDRweDtcbiAgICB3aWR0aDogNDRweDtcbiAgICBmb250LXNpemU6IDIycHg7XG4gICAgY29sb3I6ICR0ZXh0LWJsYWNrO1xuICAgIGJvcmRlci1yYWRpdXM6IDIycHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1zdXJmYWNlO1xuICAgIEBpbmNsdWRlIG1kYy1yaXBwbGUtcmFkaXVzO1xuICAgIEBpbmNsdWRlIG1kYy1idXR0b24tY29udGFpbmVyLWZpbGwtY29sb3IodHJhbnNwYXJlbnQpO1xuICAgIEBpbmNsdWRlIG1kYy1yaXBwbGUtY29sb3IoYmxhY2ssIDAuMSk7XG59XG5cbi5idXR0b25fX2ljb24ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogMThweDtcbiAgICBoZWlnaHQ6IDE4cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICB9XG59XG5cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vL1xuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL2VsZXZhdGlvbi9taXhpbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvcmlwcGxlL21peGluc1wiO1xuQGltcG9ydCBcIkBtYXRlcmlhbC90aGVtZS9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvdGhlbWUvbWl4aW5zXCI7XG5AaW1wb3J0IFwiQG1hdGVyaWFsL3R5cG9ncmFwaHkvbWl4aW5zXCI7XG5AaW1wb3J0IFwiLi92YXJpYWJsZXNcIjtcblxuQG1peGluIG1kYy1idXR0b24tZmlsbGVkLWFjY2Vzc2libGUoJGNvbnRhaW5lci1maWxsLWNvbG9yKSB7XG4gICRmaWxsLXRvbmU6IG1kYy10aGVtZS10b25lKCRjb250YWluZXItZmlsbC1jb2xvcik7XG5cbiAgQGluY2x1ZGUgbWRjLWJ1dHRvbi1jb250YWluZXItZmlsbC1jb2xvcigkY29udGFpbmVyLWZpbGwtY29sb3IpO1xuXG4gIEBpZiAoJGZpbGwtdG9uZSA9PSBcImRhcmtcIikge1xuICAgIEBpbmNsdWRlIG1kYy1idXR0b24taW5rLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1kYXJrKTtcbiAgICBAaW5jbHVkZSBtZGMtcmlwcGxlLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1kYXJrLCAkbWRjLWZpbGxlZC1idXR0b24tcmlwcGxlLW9wYWNpdHkpO1xuICB9IEBlbHNlIHtcbiAgICBAaW5jbHVkZSBtZGMtYnV0dG9uLWluay1jb2xvcih0ZXh0LXByaW1hcnktb24tbGlnaHQpO1xuICAgIEBpbmNsdWRlIG1kYy1yaXBwbGUtY29sb3IodGV4dC1wcmltYXJ5LW9uLWxpZ2h0LCAkbWRjLWZpbGxlZC1idXR0b24tcmlwcGxlLW9wYWNpdHkpO1xuICB9XG59XG5cbkBtaXhpbiBtZGMtYnV0dG9uLWNvbnRhaW5lci1maWxsLWNvbG9yKCRjb2xvcikge1xuICAvLyA6bm90KDpkaXNhYmxlZCkgaXMgdXNlZCB0byBzdXBwb3J0IGxpbmsgc3R5bGVkIGFzIGJ1dHRvblxuICAvLyBhcyBsaW5rIGRvZXMgbm90IHN1cHBvcnQgOmVuYWJsZWQgc3R5bGVcbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoYmFja2dyb3VuZC1jb2xvciwgJGNvbG9yLCAkZWRnZU9wdE91dDogdHJ1ZSk7XG4gIH1cbn1cblxuQG1peGluIG1kYy1idXR0b24tc3Ryb2tlLWNvbG9yKCRjb2xvcikge1xuICAmOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuQG1peGluIG1kYy1idXR0b24taW5rLWNvbG9yKCRjb2xvcikge1xuICAmOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChjb2xvciwgJGNvbG9yKTtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWJ1dHRvbi1jb3JuZXItcmFkaXVzKCRjb3JuZXItcmFkaXVzKSB7XG4gIGJvcmRlci1yYWRpdXM6ICRjb3JuZXItcmFkaXVzO1xufVxuXG5AbWl4aW4gbWRjLWJ1dHRvbi1zdHJva2Utd2lkdGgoJHN0cm9rZS13aWR0aCkge1xuICAvLyBOb3RlOiBBZGp1c3QgcGFkZGluZyB0byBtYWludGFpbiBjb25zaXN0ZW50IHdpZHRoIHdpdGggbm9uLXN0cm9rZWQgYnV0dG9uc1xuICAkcGFkZGluZy12YWx1ZTogbWF4KCRtZGMtYnV0dG9uLWhvcml6b250YWwtcGFkZGluZyAtICRzdHJva2Utd2lkdGgsIDApO1xuXG4gIHBhZGRpbmctcmlnaHQ6ICRwYWRkaW5nLXZhbHVlO1xuICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nLXZhbHVlO1xuICBib3JkZXItd2lkdGg6ICRzdHJva2Utd2lkdGg7XG4gIC8vIE5vdGU6IGxpbmUgaGVpZ2h0IGlzIGFkanVzdGVkIGZvciBzdHJva2UgYnV0dG9uIGJlY2F1c2UgYm9yZGVycyBhcmUgbm90XG4gIC8vIGNvbnNpZGVyZWQgYXMgc3BhY2UgYXZhaWxhYmxlIHRvIHRleHQgb24gdGhlIFdlYlxuICBsaW5lLWhlaWdodDogJG1kYy1idXR0b24taGVpZ2h0IC0gJHN0cm9rZS13aWR0aCAqIDI7XG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBpZ25vcmVcbiAgJi5tZGMtYnV0dG9uLS1kZW5zZSB7XG4gICAgLy8gTWludXMgZXh0cmEgMSB0byBhY2NvbW1vZGF0ZSBvZGQgZm9udCBzaXplIG9mIGRlbnNlIGJ1dHRvblxuICAgIGxpbmUtaGVpZ2h0OiAkbWRjLWRlbnNlLWJ1dHRvbi1oZWlnaHQgLSAkc3Ryb2tlLXdpZHRoICogMiAtIDE7XG4gIH1cblxuICAmLm1kYy1idXR0b24tLWNvbXBhY3Qge1xuICAgICRwYWRkaW5nLWNvbXBhY3QtdmFsdWU6IG1heCgkbWRjLWNvbXBhY3QtYnV0dG9uLWhvcml6b250YWwtcGFkZGluZyAtICRzdHJva2Utd2lkdGgsIDApO1xuXG4gICAgcGFkZGluZy1yaWdodDogJHBhZGRpbmctY29tcGFjdC12YWx1ZTtcbiAgICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nLWNvbXBhY3QtdmFsdWU7XG4gIH1cbn1cblxuQG1peGluIG1kYy1idXR0b24tYmFzZV8oKSB7XG4gIEBpbmNsdWRlIG1kYy10eXBvZ3JhcGh5KGJ1dHRvbik7XG4gIEBpbmNsdWRlIG1kYy1yaXBwbGUtc3VyZmFjZTtcbiAgQGluY2x1ZGUgbWRjLXJpcHBsZS1yYWRpdXM7XG5cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1pbi13aWR0aDogNjRweDtcbiAgaGVpZ2h0OiAkbWRjLWJ1dHRvbi1oZWlnaHQ7XG4gIHBhZGRpbmc6IDAgJG1kYy1idXR0b24taG9yaXpvbnRhbC1wYWRkaW5nO1xuICBib3JkZXI6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGlnbm9yZVxuICAmOmFjdGl2ZSB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgfVxuXG4gICY6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gICY6Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyOiAwO1xuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoYmFja2dyb3VuZC1jb2xvciwgdHJhbnNwYXJlbnQpO1xuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGNvbG9yLCB0ZXh0LWRpc2FibGVkLW9uLWxpZ2h0KTtcblxuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcblxuICAgIEBpbmNsdWRlIG1kYy10aGVtZS1kYXJrKFwiLm1kYy1idXR0b25cIikge1xuICAgICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoY29sb3IsIHRleHQtZGlzYWJsZWQtb24tZGFyayk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtZGMtYnV0dG9uX19pY29uXyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDE4cHg7XG4gIGhlaWdodDogMThweDtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbkBtaXhpbiBtZGMtYnV0dG9uLS1zdHJva2VkXygpIHtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcblxuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsIHRleHQtZGlzYWJsZWQtb24tbGlnaHQpO1xuXG4gICAgQGluY2x1ZGUgbWRjLXRoZW1lLWRhcmsoXCIubWRjLWJ1dHRvblwiKSB7XG4gICAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChib3JkZXItY29sb3IsIHRleHQtZGlzYWJsZWQtb24tZGFyayk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtZGMtYnV0dG9uLS1maWxsZWRfKCkge1xuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCByZ2JhKGJsYWNrLCAuMTIpKTtcbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChjb2xvciwgdGV4dC1kaXNhYmxlZC1vbi1saWdodCk7XG5cbiAgICBAaW5jbHVkZSBtZGMtdGhlbWUtZGFyayhcIi5tZGMtYnV0dG9uXCIpIHtcbiAgICAgIEBpbmNsdWRlIG1kYy10aGVtZS1wcm9wKGJhY2tncm91bmQtY29sb3IsIHJnYmEod2hpdGUsIC4xMikpO1xuICAgICAgQGluY2x1ZGUgbWRjLXRoZW1lLXByb3AoY29sb3IsIHRleHQtZGlzYWJsZWQtb24tbGlnaHQpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWRjLWJ1dHRvbi0tcmFpc2VkXygpIHtcbiAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbigyKTtcbiAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbi10cmFuc2l0aW9uO1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIEBpbmNsdWRlIG1kYy1lbGV2YXRpb24oNCk7XG4gIH1cblxuICAmOmFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbig4KTtcbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIEBpbmNsdWRlIG1kYy1lbGV2YXRpb24oMCk7XG4gIH1cbn1cblxuQG1peGluIG1kYy1idXR0b24tLWNvbXBhY3RfKCkge1xuICBwYWRkaW5nOiAwICRtZGMtY29tcGFjdC1idXR0b24taG9yaXpvbnRhbC1wYWRkaW5nO1xufVxuXG5AbWl4aW4gbWRjLWJ1dHRvbi0tZGVuc2VfKCkge1xuICBoZWlnaHQ6ICRtZGMtZGVuc2UtYnV0dG9uLWhlaWdodDtcbiAgZm9udC1zaXplOiAuODEyNXJlbTsgLy8gMTNzcFxuICBsaW5lLWhlaWdodDogJG1kYy1kZW5zZS1idXR0b24taGVpZ2h0O1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vXG5cbiRtZGMtYnV0dG9uLWhlaWdodDogMzZweDtcbiRtZGMtYnV0dG9uLWhvcml6b250YWwtcGFkZGluZzogMTZweDtcbiRtZGMtZGVuc2UtYnV0dG9uLWhlaWdodDogMzJweDtcbiRtZGMtY29tcGFjdC1idXR0b24taG9yaXpvbnRhbC1wYWRkaW5nOiA4cHg7XG5cbiRtZGMtdW5maWxsZWQtYnV0dG9uLXJpcHBsZS1vcGFjaXR5OiAuMTY7XG4kbWRjLWZpbGxlZC1idXR0b24tcmlwcGxlLW9wYWNpdHk6IC4zMjtcbiIsIi5mYWIge1xuICAgIEBpbmNsdWRlIG1kYy1mYWItYmFzZV87XG4gICAgQGluY2x1ZGUgbWRjLWZhYi1jb250YWluZXItY29sb3Ioc2Vjb25kYXJ5KTtcbiAgICBAaW5jbHVkZSBtZGMtZmFiLWluay1jb2xvcih0ZXh0LXByaW1hcnktb24tc2Vjb25kYXJ5KTtcbiAgICBAaW5jbHVkZSBtZGMtcmlwcGxlLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1zZWNvbmRhcnksICRtZGMtcmlwcGxlLXByZXNzZWQtZGFyay1pbmstb3BhY2l0eSk7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICAgICY6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKSB7XG4gICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjE4KTtcbiAgICB9XG59XG5cbi5mYWJfX2ljb24ge1xuICAgIEBpbmNsdWRlIG1kYy1mYWJfX2ljb25fO1xufVxuXG4uZmFiX21pbmkge1xuICAgIEBpbmNsdWRlIG1kYy1mYWItLW1pbmlfKCk7XG4gICAgZm9udC1zaXplOiAyMHB4ICFpbXBvcnRhbnQ7XG59IiwiLy8gQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5AaW1wb3J0IFwiQG1hdGVyaWFsL2FuaW1hdGlvbi9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvZWxldmF0aW9uL21peGluc1wiO1xuQGltcG9ydCBcIkBtYXRlcmlhbC9lbGV2YXRpb24vdmFyaWFibGVzXCI7XG5AaW1wb3J0IFwiQG1hdGVyaWFsL3JpcHBsZS9taXhpbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvcmlwcGxlL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIkBtYXRlcmlhbC90aGVtZS9mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJAbWF0ZXJpYWwvdGhlbWUvbWl4aW5zXCI7XG5cbkBtaXhpbiBtZGMtZmFiLWFjY2Vzc2libGUoJGNvbnRhaW5lci1jb2xvcikge1xuICAkZmlsbC10b25lOiBtZGMtdGhlbWUtdG9uZSgkY29udGFpbmVyLWNvbG9yKTtcblxuICBAaW5jbHVkZSBtZGMtZmFiLWNvbnRhaW5lci1jb2xvcigkY29udGFpbmVyLWNvbG9yKTtcblxuICBAaWYgKCRmaWxsLXRvbmUgPT0gXCJkYXJrXCIpIHtcbiAgICBAaW5jbHVkZSBtZGMtZmFiLWluay1jb2xvcih0ZXh0LXByaW1hcnktb24tZGFyayk7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1jb2xvcih0ZXh0LXByaW1hcnktb24tZGFyaywgJG1kYy1yaXBwbGUtcHJlc3NlZC1saWdodC1pbmstb3BhY2l0eSk7XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIG1kYy1mYWItaW5rLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1saWdodCk7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1jb2xvcih0ZXh0LXByaW1hcnktb24tbGlnaHQsICRtZGMtcmlwcGxlLXByZXNzZWQtZGFyay1pbmstb3BhY2l0eSk7XG4gIH1cbn1cblxuQG1peGluIG1kYy1mYWItY29udGFpbmVyLWNvbG9yKCRjb2xvcikge1xuICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkY29sb3IsICRlZGdlT3B0T3V0OiB0cnVlKTtcbn1cblxuQG1peGluIG1kYy1mYWItaW5rLWNvbG9yKCRjb2xvcikge1xuICBAaW5jbHVkZSBtZGMtdGhlbWUtcHJvcChjb2xvciwgJGNvbG9yKTtcbn1cblxuJG1kYy1mYWItaWNvbi1lbnRlci1kZWxheV86IDkwbXM7XG4kbWRjLWZhYi1pY29uLWVudGVyLWR1cmF0aW9uXzogMTgwbXM7XG5cbkBtaXhpbiBtZGMtZmFiLWJhc2VfIHtcbiAgQGluY2x1ZGUgbWRjLXJpcHBsZS1zdXJmYWNlO1xuICBAaW5jbHVkZSBtZGMtcmlwcGxlLXJhZGl1cztcbiAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbig2KTtcblxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDU2cHg7XG4gIGhlaWdodDogNTZweDtcbiAgcGFkZGluZzogMDtcbiAgdHJhbnNpdGlvbjpcbiAgICBib3gtc2hhZG93ICRtZGMtZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb24gJG1kYy1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24sXG4gICAgb3BhY2l0eSAxNW1zIGxpbmVhciAzMG1zLFxuICAgIG1kYy1hbmltYXRpb24tZW50ZXIodHJhbnNmb3JtLCAkbWRjLWZhYi1pY29uLWVudGVyLWR1cmF0aW9uXyArICRtZGMtZmFiLWljb24tZW50ZXItZGVsYXlfKTtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbig4KTtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBAaW5jbHVkZSBtZGMtZWxldmF0aW9uKDEyKTtcbiAgfVxuXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzIHtcbiAgICAvLyBUT0RPKGFjZHZvcmFrKTogU2hvdWxkIHRoaXMgYmUgcGFpcmVkIHdpdGggc3RhdGVzIGFuZC9vciByaXBwbGU/IFdlIGRvbid0IHdhbnQgdG8gZGlzYWJsZSBvdXRsaW5lXG4gICAgLy8gKGFuIGFjY2Vzc2liaWxpdHkvdXNhYmlsaXR5IGZlYXR1cmUpIHVubGVzcyB3ZSdyZSBjb25maWRlbnQgdGhhdCB0aGVyZSBpcyBhbHNvIGEgdmlzdWFsIGluZGljYXRpb24gdGhhdCB0aGVcbiAgICAvLyBlbGVtZW50IGhhcyBmb2N1cy4gSWYgdGhlIGNsaWVudCBoYXMgY3VzdG9taXplZCB0aGUgRE9NIGluIHNvbWUgdW5leHBlY3RlZCB3YXksIGFuZCBpcyBjZXJ0YWluIHRoYXQgYW5vdGhlclxuICAgIC8vIGVsZW1lbnQgd2lsbCByZWNlaXZlIGZvY3VzIGluc3RlYWQsIHRoZXkgY2FuIGFsd2F5cyBvdmVycmlkZSB0aGlzIHByb3BlcnR5IG1hbnVhbGx5IGluIHRoZWlyIENTUy5cbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG5cbiAgJjpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5cbiAgJjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IDA7XG4gIH1cblxuICAvLyBUaGlzIGFsbG93cyBmb3IgdXNpbmcgU1ZHcyB3aXRoaW4gdGhlbSB0byBhbGlnbiBwcm9wZXJseSBpbiBhbGwgYnJvd3NlcnMuXG4gIC8vIENhbiByZW1vdmUgb25jZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI5NDUxNSBpcyByZXNvbHZlZC5cblxuICAvLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1tYXgtdHlwZVxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGlnbm9yZVxuICA+IHN2ZyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLy8gc3R5bGVsaW50LWVuYWJsZSBzZWxlY3Rvci1tYXgtdHlwZVxufVxuXG5AbWl4aW4gbWRjLWZhYi0tbWluaV8ge1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xufVxuXG5AbWl4aW4gbWRjLWZhYl9faWNvbl8ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIHRyYW5zaXRpb246IG1kYy1hbmltYXRpb24tZW50ZXIodHJhbnNmb3JtLCAkbWRjLWZhYi1pY29uLWVudGVyLWR1cmF0aW9uXywgJG1kYy1mYWItaWNvbi1lbnRlci1kZWxheV8pO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xufVxuXG5AbWl4aW4gbWRjLWZhYi0tZXhpdGVkXyB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIHRyYW5zaXRpb246XG4gICAgb3BhY2l0eSAxNW1zIGxpbmVhciAxNTBtcyxcbiAgICBtZGMtYW5pbWF0aW9uLWV4aXQtcGVybWFuZW50KHRyYW5zZm9ybSwgMTgwbXMpO1xuICBvcGFjaXR5OiAwO1xuXG4gIC5tZGMtZmFiX19pY29uIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIHRyYW5zaXRpb246IG1kYy1hbmltYXRpb24tZXhpdC1wZXJtYW5lbnQodHJhbnNmb3JtLCAxMzVtcyk7XG4gIH1cbn1cbiIsIkBpbXBvcnQgXCIuL19fdmFyaWFibGVzXCI7XG5cbi5pY29uIHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnaWNvbnMnO1xuICAgIH1cbn1cblxuLmljb25faGVhcnQge1xuICAgICY6YmVmb3JlICB7XG4gICAgICAgIGNvbnRlbnQ6ICRpY29uLWhlYXJ0O1xuICAgIH1cbn1cblxuLmljb25faGVhcnQtZW1wdHkge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24taGVhcnQtZW1wdHk7XG4gICAgfVxufVxuXG4uaWNvbl9tZW51IHtcbiAgICAmOmJlZm9yZSAge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1tZW51O1xuICAgIH1cbn1cblxuLmljb25fbGlzdCB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAkaWNvbi10aC1saXN0O1xuICAgIH1cbn1cblxuLmljb25fY2FydCB7XG4gICAgJjpiZWZvcmUgIHtcbiAgICAgICAgY29udGVudDogJGljb24tY2FydDtcbiAgICB9XG59XG5cbi5pY29uX2Nsb3NlIHtcbiAgICAmOmJlZm9yZSAge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1jbG9zZTtcbiAgICB9XG59XG5cbi5pY29uX29wdGlvbnMge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24tb3B0aW9ucztcbiAgICB9XG59XG5cbi5pY29uX2RpcmVjdGlvbiB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1kaXJlY3Rpb247XG4gICAgfVxufVxuXG4uaWNvbl9oZWxwLW91dGxpbmUge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24taGVscC1vdXRsaW5lO1xuICAgIH1cbn1cblxuLmljb25fcm91YmxlIHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICRpY29uLXJvdWJsZTtcbiAgICB9XG59XG5cbi5pY29uX2NvbnRhY3Qge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24tY29udGFjdDtcbiAgICB9XG59XG5cbi5pY29uX2NvbnRhY3Qtb3V0bGluZSB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1jb250YWN0LW91dGxpbmU7XG4gICAgfVxufVxuXG4uaWNvbl9zZWFyY2gge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24tc2VhcmNoO1xuICAgIH1cbn1cblxuLmljb25fY2hldnJvbi11cCB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1jaGV2cm9uLXVwO1xuICAgIH1cbn1cblxuLmljb25fY2hldnJvbi1kb3duIHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICRpY29uLWNoZXZyb24tZG93bjtcbiAgICB9XG59XG5cbi5pY29uX2NoZXZyb24tbGVmdCB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAkaWNvbi1jaGV2cm9uLWxlZnQ7XG4gICAgfVxufVxuXG4uaWNvbl9jaGV2cm9uLXJpZ2h0IHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICRpY29uLWNoZXZyb24tcmlnaHQ7XG4gICAgfVxufVxuXG4uaWNvbl9jYXJ0LXBsdXMge1xuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGljb24tY2FydC1wbHVzO1xuICAgIH1cbn0iLCIkaWNvbi10aDogJ1xcZTgwMCc7XG4kaWNvbi1oZWFydDogJ1xcZTgwMSc7XG4kaWNvbi1oZWFydC1lbXB0eTogJ1xcZTgwMic7XG4kaWNvbi1kaXJlY3Rpb246ICdcXGU4MDMnO1xuJGljb24tYXR0ZW50aW9uLWNpcmNsZWQ6ICdcXGU4MDQnO1xuJGljb24tdGgtbGlzdDogJ1xcZTgwNic7XG4kaWNvbi1kb3QtMzogJ1xcZTgwYyc7XG4kaWNvbi1jYXJ0OiAnXFxlODBmJztcbiRpY29uLXRoLWxhcmdlOiAnXFxlODE3JztcbiRpY29uLWxpc3QtYnVsbGV0OiAnXFxmMGNhJztcbiRpY29uLWNoZXZyb24tZG93bjogJ1xcZjEyMyc7XG4kaWNvbi1jaGV2cm9uLWxlZnQ6ICdcXGYxMjQnO1xuJGljb24tY2hldnJvbi1yaWdodDogJ1xcZjEyNSc7XG4kaWNvbi1jaGV2cm9uLXVwOiAnXFxmMTI2JztcbiRpY29uLWNsb3NlLWJnOiAnXFxmMTJhJztcbiRpY29uLXJvdWJsZTogJ1xcZjE1OCc7XG4kaWNvbi1jYXJ0LXBsdXM6ICdcXGYyMTcnO1xuJGljb24tYWRkOiAnXFxmMmM3JztcbiRpY29uLWNsb3NlOiAnXFxmMmQ3JztcbiRpY29uLXJlbW92ZTogJ1xcZjJmNCc7XG4kaWNvbi1zdGFyOiAnXFxmMmZjJztcbiRpY29uLWFkZC1jaXJjbGU6ICdcXGYzNTknO1xuJGljb24tbWVudTogJ1xcZjM5NCc7XG4kaWNvbi1vcHRpb25zOiAnXFxmMzlkJzsgXG4kaWNvbi1yZW1vdmUtY2lyY2xlOiAnXFxmM2E5JztcbiRpY29uLXN0YXItaGFsZjogJ1xcZjNhZCc7XG4kaWNvbi1zdGFyLW91dGxpbmU6ICdcXGYzYWUnO1xuJGljb24tY29udGFjdC1vdXRsaW5lOiAnXFxmNDE5JztcbiRpY29uLWNvbnRhY3Q6ICdcXGY0MWEnO1xuJGljb24taGVscC1vdXRsaW5lOiAnXFxmNDQ1JztcbiRpY29uLWhlbHA6ICdcXGY0NDYnO1xuJGljb24tc2VhcmNoOiAnXFxlODA1JzsiLCJcbi5saW5rX2ZpbGxlZCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIGNvbG9yOiAkdGV4dC1ibGFjaztcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGNvbG9yO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG59XG4ubGlua19maWxsZWQ6YmVmb3JlIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB6LWluZGV4OiAtMTtcbiAgICB0b3A6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYmFja2dyb3VuZDogJGFjaWQtZ3JlZW47XG4gICAgdHJhbnNmb3JtOiBzY2FsZVkoMCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlO1xuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybTtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcbn1cbi5saW5rX2ZpbGxlZDpob3ZlcjpiZWZvcmUsIC5saW5rX2ZpbGxlZDpmb2N1czpiZWZvcmUsIC5saW5rX2ZpbGxlZDphY3RpdmU6YmVmb3JlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWSgxKTtcbn1cbiIsIi5pbnB1dCB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDBweCAwcHggMHB4IDE1cHg7XG59IiwiLmJyZWFkY3J1bWJzIHtcbiAgICBtYXJnaW46IDIwcHggMDtcbiAgICBiYWNrZ3JvdW5kOiAkd2hpdGU7XG4gICAgZm9udC1zaXplOiBtcygtMik7XG59XG5cbi5icmVhZGNydW1ic19faXRlbXMge1xuICAgIHBhZGRpbmc6IDEwcHggMHB4IDEwcHggMHB4O1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5icmVhZGNydW1ic19faXRlbSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDBweCAycHggMHB4IDJweDtcbn1cblxuLmJyZWFkY3J1bWJzX19saW5rIHtcbiAgICBjb2xvcjogIzRkNGQ0ZDtcbn1cblxuLmJyZWFkY3J1bWJzX19pdGVtLWZpcnN0IHtcblxufVxuXG4uYnJlYWRjcnVtYnNfX2l0ZW0tbGFzdCB7XG5cbn1cblxuLmJyZWFkY3J1bWJzX19jb250ZW50LWFyZWEge1xuICAgIHBhZGRpbmc6IDBweCAxNXB4IDBweCAxNXB4O1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBtb2JpbGUsICR1bnRpbDogZGVza3RvcCkge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG59XG5cbi5icmVhZGNydW1ic19fZGVsaW1ldGVyIHtcbiAgICBwYWRkaW5nOiAwcHggMnB4IDBweCAycHg7XG59IiwiLnJpYmJvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTVweDtcbiAgICBsZWZ0OiAtMTJweDtcbiAgICBwYWRkaW5nOiAzcHggMTJweCAycHggMjNweDtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgY29sb3I6ICR3aGl0ZTtcbiAgICB0cmFuc2Zvcm06IHNrZXdYKC0yNWRlZyk7XG4gICAgei1pbmRleDogNTA7XG4gICAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbigyKTtcbn1cblxuLnJpYmJvbl9fY29udGVudCB7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICB0cmFuc2Zvcm06IHNrZXdYKDI1ZGVnKTtcbiAgICBAaW5jbHVkZSBib2xkKCk7XG59XG5cbi5yaWJib25fZ3JlZW4ge1xuICAgIGNvbG9yOiAkdGV4dC1ibGFjaztcbiAgICBiYWNrZ3JvdW5kOiAkYWNpZC1ncmVlbjtcbn1cbiIsIiRoZWFkZXItdG9wLWhlaWdodDogNzhweDtcblxuLmhlYWRlci10b3Age1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBoZWlnaHQ6ICRoZWFkZXItdG9wLWhlaWdodDtcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAuY29udGVudC1hcmVhIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbn1cblxuLmhlYWRlci10b3BfX2xvZ28ge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTcwcHg7XG4gICAgY29sb3I6ICR0ZXh0LWJsYWNrO1xuICAgIGZvbnQtc2l6ZTogbXMoMyk7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGxpbmUtaGVpZ2h0OiAkaGVhZGVyLXRvcC1oZWlnaHQ7XG4gICAgQGluY2x1ZGUgYm9sZCgpO1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiB0YWJsZXQpIHtcbiAgICAgICAgd2lkdGg6IDIzNXB4O1xuICAgICAgICBmb250LXNpemU6IDM0cHg7XG4gICAgfVxufVxuXG4uaGVhZGVyLXRvcF9fbmF2IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogNTA1cHg7XG4gICAgcGFkZGluZzogMzJweCAxNXB4IDIycHggMTVweDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICBmb250LXNpemU6IG1zKC0xKTtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogd2lkZSkge1xuICAgICAgICB3aWR0aDogNjgwcHg7XG4gICAgfVxufVxuXG4uaGVhZGVyLXRvcF9fbmF2LWl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuLmhlYWRlci10b3BfX2NvbnRyb2xzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDBweDtcbiAgICByaWdodDogMTVweDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IGRlc2t0b3ApIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG59XG5cbi5oZWFkZXItdG9wX19jb250cm9sIHtcbiAgICBoZWlnaHQ6IDQ0cHg7XG4gICAgd2lkdGg6IDQ0cHg7XG4gICAgYm9yZGVyLXJhZGl1czogMjJweDtcbiAgICBjb2xvcjogJHRleHQtYmxhY2s7XG4gICAgQGluY2x1ZGUgbWRjLXJpcHBsZS1jb2xvcihibGFjaywgMC4xKTtcbn1cblxuLmhlYWRlci10b3BfX3Bob25lcyB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgcGFkZGluZzogMTVweCAwcHggMTVweCAxNXB4O1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgQGluY2x1ZGUgYm9sZCgpO1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wKSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG59XG5cbi5oZWFkZXItdG9wX19waG9uZS1jYXB0aW9uIHtcbiAgICBmb250LXNpemU6IG1zKC0xKTtcbn1cblxuLmhlYWRlci10b3BfX3Bob25lIHtcbiAgICBmb250LXNpemU6IG1zKDIpO1xufSIsIiRoZWFkZXItYm90dG9tLWhlaWdodDogNDhweDtcblxuLm1haW4ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuLnBhZ2Utd3JhcHBlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xufVxuXG4uaGVhZGVyLWJvdHRvbSB7XG4gICAgaGVpZ2h0OiAkaGVhZGVyLWJvdHRvbS1oZWlnaHQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgY29sb3I6ICR3aGl0ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyMTIxO1xuICAgIEBpbmNsdWRlIGJvbGQoKTtcbiAgICBAaW5jbHVkZSBtZGMtZWxldmF0aW9uKDQpO1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBtb2JpbGUsICR1bnRpbDogZGVza3RvcCkge1xuICAgICAgICAuY29udGVudC1hcmVhX2ZsZXgge1xuICAgICAgICAgICAgcGFkZGluZzogMHB4O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi5oZWFkZXItYm90dG9tX19zZWFyY2gtYm94IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZzogN3B4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wLCAkdW50aWw6IHdpZGUpIHtcbiAgICAgICAgd2lkdGg6IDQ2MHB4O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogd2lkZSkge1xuICAgICAgICB3aWR0aDogNjYwcHg7XG4gICAgfVxufVxuXG4uaGVhZGVyLWJvdHRvbV9fZHJvcGRvd24ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgd2lkdGg6IDI0MHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXNpemU6IG1zKDApO1xuICAgIGxpbmUtaGVpZ2h0OiAkaGVhZGVyLWJvdHRvbS1oZWlnaHQ7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHRyYW5zaXRpb246IDAuMnM7XG4gICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6ICMzMDMxMzE7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wKSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbn1cblxuLmhlYWRlci1ib3R0b21fX2NhcnQge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAyNDBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDQ4cHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHRyYW5zaXRpb246IDAuMnM7XG4gICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6ICMzMDMxMzE7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wKSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAvLyBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICB9XG59XG5cbi5oZWFkZXItYm90dG9tX19jYXJ0LWljb24ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDBweDtcbiAgICBsZWZ0OiAyNXB4O1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuLmhlYWRlci1ib3R0b21fX3NlYXJjaC1pY29uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxMnB4O1xuICAgIHJpZ2h0OiAyNXB4O1xuICAgIGNvbG9yOiAkdGV4dC1ibGFjaztcbiAgICBmb250LXNpemU6IDE4cHg7XG59XG5cbi5oZWFkZXItYm90dG9tX19jYXJ0LWNvdW50ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDlweDtcbiAgICByaWdodDogMjVweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgaGVpZ2h0OiAzMHB4O1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICRtYXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMHB4IDIwcHggMHB4IHJnYmEoNzIsMjE4LDE2MSwxKTtcbiAgICAtbW96LWJveC1zaGFkb3c6IDBweCAwcHggMjBweCAwcHggcmdiYSg3MiwyMTgsMTYxLDEpO1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMjBweCAwcHggcmdiYSg3MiwyMTgsMTYxLDEpO1xufSIsIi5mb290ZXItbWlkZGxlIHtcbiAgICBoZWlnaHQ6IDMyMHB4O1xuICAgIGZvbnQtc2l6ZTogbXMoNCk7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSIsIi5mb290ZXItYm90dG9tIHtcbiAgICBoZWlnaHQ6IDU0cHg7XG4gICAgY29sb3I6ICR3aGl0ZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDU0cHg7XG4gICAgZm9udC1zaXplOiBtcygtMSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHRleHQtYmxhY2s7XG59XG4iLCIuc2lkZS1tZW51IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwcHg7XG4gICAgcmlnaHQ6IDBweDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogIDEwMDtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB6LWluZGV4OiAxMDAwO1xufVxuXG4uc2lkZU1lbnVfX2hpZGRlbiB7XG4gICAgdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwbXMgZWFzZS1vdXQgMzAwbXM7XG59XG5cbi5uYXZNZW51X3Zpc2libGUge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDtcbn1cblxuLnNpZGUtbWVudV9fb3ZlcmxheSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogODAlO1xuICAgIGxlZnQ6IDA7XG4gICAgaGVpZ2h0OiAxMDAlO1xufVxuXG4uc2lkZS1tZW51X19jb250ZW50IHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDEwMCU7XG4gICAgcGFkZGluZy1yaWdodDogMjAlO1xuICAgIGJhY2tncm91bmQ6ICR3aGl0ZTtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNlNWU1ZTU7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDMwMG1zIGVhc2Utb3V0O1xuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG59XG5cbi5zaWRlLW1lbnVfX2F1dGgtYXJlYSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGhlaWdodDogNzRweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAyMnB4O1xufVxuXG4uc2lkZS1tZW51X19jbG9zZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTZweDtcbiAgICByaWdodDogMTZweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zaWRlLW1lbnVfX2RlbGltZXRlciB7XG4gICAgbWFyZ2luOiA0cHggMHB4IDRweCAwcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwwLDAsLjEpO1xufVxuXG4uc2lkZS1tZW51X19pdGVtIHtcbiAgICBoZWlnaHQ6IDQ4cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmUgIWltcG9ydGFudDtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4ICFpbXBvcnRhbnQ7XG4gICAgY29sb3I6ICR0ZXh0LWJsYWNrICFpbXBvcnRhbnQ7XG4gICAgZm9udC1zaXplOiBtcygwKTtcbiAgICBsaW5lLWhlaWdodDogNDhweDtcbiAgICBAaW5jbHVkZSBtZWRpdW0oKTtcbn0iLCIubmF2LW1lbnUge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDEwMCU7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZS1vdXQ7XG4gICAgYmFja2dyb3VuZDogJHdoaXRlO1xuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG4gICAgei1pbmRleDogMjAwMDA7XG59XG5cblxuLm5hdi1tZW51X19oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDc0cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMTJweCAxNnB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLm5hdi1tZW51X19jb250cm9sIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xufVxuXG4ubmF2LW1lbnVfX2NvbnRlbnQge1xuICAgIG92ZXJmbG93OiBhdXRvO1xufVxuXG4ubmF2LW1lbnVfX3RpdGxlIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIGZvbnQtc2l6ZTogbXMoMSk7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgZmxleC1ncm93OiAxO1xufSIsIi5jYXRhbG9nIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wKSB7XG4gICAgICAgIHBhZGRpbmc6IDBweCAxNXB4IDBweCAxNXB4O1xuICAgIH1cbn1cblxuLmNhdGFsb2dfX2xlZnQtY29udGVudCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IGRlc2t0b3AsICR1bnRpbDogd2lkZSkge1xuICAgICAgICB3aWR0aDogMjEycHg7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiB3aWRlKSB7XG4gICAgICAgIHdpZHRoOiAyNjNweDtcbiAgICB9XG59XG5cbi5jYXRhbG9nX19yaWdodC1jb250ZW50IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0KSB7XG4gICAgICAgIHBhZGRpbmc6IDBweCAxNXB4IDBweCAxNXB4O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICB3aWR0aDogNzI4cHg7XG4gICAgICAgIHBhZGRpbmc6IDBweCAwcHggMHB4IDMwcHg7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiB3aWRlKSB7XG4gICAgICAgIHdpZHRoOiA4NzZweDtcbiAgICB9XG59XG5cbi5jYXRhbG9nX19uYXYge1xuICAgIHBhZGRpbmc6IDBweCA0cHggMHB4IDRweDtcbiAgICBtYXgtaGVpZ2h0OiAzMzZweDtcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgYmFja2dyb3VuZDogJHdoaXRlO1xufVxuXG4uY2F0YWxvZ19fbmF2LWl0ZW0ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogNDhweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmb250LXNpemU6IG1zKC0xKTtcbiAgICBjb2xvcjogJHRleHQtYmxhY2sgIWltcG9ydGFudDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGxpbmUtaGVpZ2h0OiA0OHB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTtcbiAgICBAaW5jbHVkZSBtZWRpdW0oKTtcbiAgICBAaW5jbHVkZSBtZGMtcmlwcGxlLWNvbG9yKCM0OGRhYTEsIDAuMSk7XG59XG5cbi5ncmVlbl9zY3JvbGxiYXJ7XG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICBcbiAgICAmOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJmMmY3O1xuICAgIH1cbiAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgICB3aWR0aDogMTVweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlYmYyZjc7XG4gICAgfVxuICAgICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICAgIHdpZHRoOiAxNXB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQ4ZGFhMTtcbiAgICB9XG4gIH0iLCIuZ2FsbGVyeSB7XG5cbn1cblxuLmdhbGxlcnlfX2l0ZW1zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5nYWxsZXJ5X19pdGVtIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxNnB4O1xufVxuXG4uZ2FsbGVyeV9fdG9wIHtcbiAgICBoZWlnaHQ6IDQ1cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZDogJHdoaXRlO1xufVxuXG4uZ2FsbGVyeV9fc29ydGluZyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5nYWxsZXJ5X19zb3J0aW5nLWNhcHRpb24ge1xuICAgIEBpbmNsdWRlIGJvbGQoKTtcbn1cblxuLmdhbGxlcnlfX3NvcnRpbmctYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICBjb2xvcjogIzRkNGQ0ZDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59IiwiLmNhcmQge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTUycHg7XG4gICAgaGVpZ2h0OiAzMjBweDtcbiAgICBjb2xvcjogJHRleHQtYmxhY2s7XG4gICAgYmFja2dyb3VuZDogJHdoaXRlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJveC1zaGFkb3c7XG4gICAgQGluY2x1ZGUgbWRjLWVsZXZhdGlvbigyKTtcbiAgICAmOmhvdmVyIHtcbiAgICAgICAgei1pbmRleDogNTAwO1xuICAgICAgICBAaW5jbHVkZSBtZGMtZWxldmF0aW9uKDYpO1xuICAgICAgICAuY2FyZF9fcHVyY2hhc2Uge1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAgICAgfVxuICAgICAgICAuY2FyZF9faW1nLW92ZXJsYXktd3JhcHBlciB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB9XG4gICAgICAgIC5jYXJkX19yaWJib24ge1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0LCAkdW50aWw6IGRlc2t0b3ApIHtcbiAgICAgICAgaGVpZ2h0OiA0MjBweDtcbiAgICAgICAgd2lkdGg6IDIyNXB4O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCwgJHVudGlsOiB3aWRlKSB7XG4gICAgICAgIGhlaWdodDogNDIwcHg7XG4gICAgICAgIHdpZHRoOiAyMjJweDtcbiAgICB9XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHdpZGUpIHtcbiAgICAgICAgaGVpZ2h0OiA0MjBweDtcbiAgICAgICAgd2lkdGg6IDI3MnB4O1xuICAgIH1cbn1cblxuLmNhcmRfX2ltZy13cmFwIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxNTJweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCwgJHVudGlsOiBkZXNrdG9wKSB7XG4gICAgICAgIGhlaWdodDogMjI1cHg7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiBkZXNrdG9wLCAkdW50aWw6IHdpZGUpIHtcbiAgICAgICAgaGVpZ2h0OiAyMjJweDtcbiAgICB9XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHdpZGUpIHtcbiAgICAgICAgaGVpZ2h0OiAyNzJweDtcbiAgICB9XG59XG5cbi5jYXJkX19pbWctb3ZlcmxheS13cmFwcGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdG9wOiAwcHg7XG4gICAgbGVmdDogMHB4O1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG59XG5cbi5jYXJkX19pbWctb3ZlcmxheSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB0b3A6IDBweDtcbiAgICBsZWZ0OiAwcHg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQ6ICM0OGRhYTE7XG4gICAgb3BhY2l0eTogMC43O1xuICAgIHotaW5kZXg6IDQwMDA7XG59XG5cbi5jYXJkX19pbWcge1xuICAgIGhlaWdodDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLmNhcmRfX2RldGFpbHMtd3JhcCB7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5jYXJkX19kZXRhaWxzIHtcbiAgICBjb2xvcjogJHdoaXRlICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyLWNvbG9yOiAkd2hpdGUgIWltcG9ydGFudDtcbiAgICB6LWluZGV4OiA1MDAwO1xuICAgIEBpbmNsdWRlIGJvbGQoKTtcbn1cblxuLmNhcmRfX2NvbnRlbnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBoZWlnaHQ6IDE2OHB4O1xuICAgIHBhZGRpbmc6IDhweDtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0KSB7XG4gICAgICAgIHBhZGRpbmc6IDE0cHg7XG4gICAgfVxuICAgIEBpbmNsdWRlIG1xKCRmcm9tOiB0YWJsZXQsICR1bnRpbDogZGVza3RvcCkge1xuICAgICAgICBoZWlnaHQ6IDE4NXB4O1xuICAgIH1cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCwgJHVudGlsOiB3aWRlKSB7XG4gICAgICAgIGhlaWdodDogMTg1cHg7XG4gICAgfVxufVxuXG4uY2FyZF9fcHJpY2Uge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDI0cHg7XG4gICAgbGVmdDogOHB4O1xuICAgIGZvbnQtc2l6ZTogbXMoMCk7XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCkge1xuICAgICAgICBsZWZ0OiAxNHB4O1xuICAgICAgICBmb250LXNpemU6IG1zKDIpO1xuICAgIH1cbn1cblxuLnByaWNlIHtcbiAgICBAaW5jbHVkZSBib2xkKCk7XG4gICAgJjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiaWNvbnNcIjtcbiAgICAgICAgY29udGVudDogJGljb25fcm91YmxlO1xuICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgfVxufVxuXG4uY2FyZF9fdGl0bGUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIC8vIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIC8vIGhlaWdodDogNjNweDtcbiAgICBmb250LXNpemU6IG1zKC0xKTtcbiAgICAvLyBsaW5lLWhlaWdodDogMTZweDtcbiAgICAvLyAtd2Via2l0LWxpbmUtY2xhbXA6IDQ7XG4gICAgLy8gLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAvLyBvdmVyZmxvdzogaGlkZGVuO1xuICAgIC8vIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHRyYW5zaXRpb246IDAuMnM7XG4gICAgJjpob3ZlciB7XG4gICAgICAgIGNvbG9yOiAkbGluay1jb2xvcjtcbiAgICB9XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCkge1xuICAgICAgICBmb250LXNpemU6IG1zKDApO1xuICAgIH1cbn1cblxuLmNhcmRfX3B1cmNoYXNlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQ6ICRhY2lkLWdyZWVuO1xuICAgIGJvdHRvbTogMTZweDtcbiAgICByaWdodDogMTJweDtcbiAgICBjb2xvcjogJHRleHQtYmxhY2s7XG4gICAgQGluY2x1ZGUgbXEoJGZyb206IG1vYmlsZSwgJHVudGlsOiB0YWJsZXQpIHtcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgICB3aWR0aDogNDBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICB9XG59XG5cbi5jYXJkX19yaWJib24ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4ycztcbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBvcGFjaXR5O1xufVxuXG4iXX0= */
